
POTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b9c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003ca8  08003ca8  00013ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d24  08003d24  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003d24  08003d24  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d24  08003d24  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d24  08003d24  00013d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d28  08003d28  00013d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000070  08003d9c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08003d9c  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7ec  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000212e  00000000  00000000  0002d885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  0002f9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  00030638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d51  00000000  00000000  000311e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d9ba  00000000  00000000  00048f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a067  00000000  00000000  000568eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0952  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003744  00000000  00000000  000e09a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c90 	.word	0x08003c90

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003c90 	.word	0x08003c90

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 fd0e 	bl	8000b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f88c 	bl	8000280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f9bc 	bl	80004e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 800016c:	f000 f8ce 	bl	800030c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000170:	f000 f918 	bl	80003a4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000174:	f000 f98c 	bl	8000490 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  ///////////////////////////////////////////////////////////////
  //initialization of ringing module/////////////////////////////
  ///////////////////////////////////////////////////////////////
  myRing.callBackFrequency=100;
 8000178:	4b36      	ldr	r3, [pc, #216]	; (8000254 <main+0xf8>)
 800017a:	2264      	movs	r2, #100	; 0x64
 800017c:	601a      	str	r2, [r3, #0]
  myRing.burstFrequency=25;
 800017e:	4b35      	ldr	r3, [pc, #212]	; (8000254 <main+0xf8>)
 8000180:	2219      	movs	r2, #25
 8000182:	809a      	strh	r2, [r3, #4]
  myRing.state=RINGER_OFF;
 8000184:	4b33      	ldr	r3, [pc, #204]	; (8000254 <main+0xf8>)
 8000186:	2200      	movs	r2, #0
 8000188:	779a      	strb	r2, [r3, #30]
  /*myRing.FR_GPIO_Port=POTS_LED_STAT_GPIO_Port;
  myRing.FR_Pin=POTS_LED_STAT_Pin;
  myRing.RM_GPIO_Port=LED_GPIO_Port;
  myRing.RM_Pin=LED_Pin;*/
  myRing.FR_GPIO_Port=POTS_FR_GPIO_Port;
 800018a:	4b32      	ldr	r3, [pc, #200]	; (8000254 <main+0xf8>)
 800018c:	4a32      	ldr	r2, [pc, #200]	; (8000258 <main+0xfc>)
 800018e:	60da      	str	r2, [r3, #12]
  myRing.FR_Pin=POTS_FR_Pin;
 8000190:	4b30      	ldr	r3, [pc, #192]	; (8000254 <main+0xf8>)
 8000192:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000196:	821a      	strh	r2, [r3, #16]
  myRing.RM_GPIO_Port=POTS_RM_GPIO_Port;
 8000198:	4b2e      	ldr	r3, [pc, #184]	; (8000254 <main+0xf8>)
 800019a:	4a2f      	ldr	r2, [pc, #188]	; (8000258 <main+0xfc>)
 800019c:	615a      	str	r2, [r3, #20]
  myRing.RM_Pin=POTS_RM_Pin;
 800019e:	4b2d      	ldr	r3, [pc, #180]	; (8000254 <main+0xf8>)
 80001a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80001a4:	831a      	strh	r2, [r3, #24]
  ringInit(&myRing);
 80001a6:	482b      	ldr	r0, [pc, #172]	; (8000254 <main+0xf8>)
 80001a8:	f000 fad4 	bl	8000754 <ringInit>
  HAL_TIM_Base_Start_IT(&htim2);
 80001ac:	482b      	ldr	r0, [pc, #172]	; (800025c <main+0x100>)
 80001ae:	f001 fd3d 	bl	8001c2c <HAL_TIM_Base_Start_IT>

  ///////////////////////////////////////////////////////////////
  //initialization of signaling module///////////////////////////
  ///////////////////////////////////////////////////////////////
  mySignaling.toneFrequency=450; //this is required tone frequency
 80001b2:	4b2b      	ldr	r3, [pc, #172]	; (8000260 <main+0x104>)
 80001b4:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80001b8:	811a      	strh	r2, [r3, #8]
  mySignaling.toneOnDuration=450;
 80001ba:	4b29      	ldr	r3, [pc, #164]	; (8000260 <main+0x104>)
 80001bc:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80001c0:	815a      	strh	r2, [r3, #10]
  mySignaling.toneOffDuration=0;
 80001c2:	4b27      	ldr	r3, [pc, #156]	; (8000260 <main+0x104>)
 80001c4:	2200      	movs	r2, #0
 80001c6:	819a      	strh	r2, [r3, #12]
  mySignaling.callBackFrequency=CALLBACK_FREQUENCY_HZ; //currently the function is implemented that TIM3 interrupt frequency is equal to requested tone frequency
 80001c8:	4b25      	ldr	r3, [pc, #148]	; (8000260 <main+0x104>)
 80001ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001ce:	601a      	str	r2, [r3, #0]
  mySignaling.fclk=8000000;
 80001d0:	4b23      	ldr	r3, [pc, #140]	; (8000260 <main+0x104>)
 80001d2:	4a24      	ldr	r2, [pc, #144]	; (8000264 <main+0x108>)
 80001d4:	605a      	str	r2, [r3, #4]
  mySignaling.timer=&htim3;
 80001d6:	4b22      	ldr	r3, [pc, #136]	; (8000260 <main+0x104>)
 80001d8:	4a23      	ldr	r2, [pc, #140]	; (8000268 <main+0x10c>)
 80001da:	615a      	str	r2, [r3, #20]
  mySignaling.state=SIGNALING_STATE_TONE;
 80001dc:	4b20      	ldr	r3, [pc, #128]	; (8000260 <main+0x104>)
 80001de:	2201      	movs	r2, #1
 80001e0:	741a      	strb	r2, [r3, #16]
  signalingInit(&mySignaling);
 80001e2:	481f      	ldr	r0, [pc, #124]	; (8000260 <main+0x104>)
 80001e4:	f000 fb13 	bl	800080e <signalingInit>


  ///////////////////////////////////////////////////////////////
  //initialization of dialing receiver///////////////////////////
  ///////////////////////////////////////////////////////////////
  myDialing.SHK_GPIO_Port=POTS_SHK_GPIO_Port;
 80001e8:	4b20      	ldr	r3, [pc, #128]	; (800026c <main+0x110>)
 80001ea:	4a1b      	ldr	r2, [pc, #108]	; (8000258 <main+0xfc>)
 80001ec:	601a      	str	r2, [r3, #0]
  myDialing.SHK_Pin=POTS_SHK_Pin;
 80001ee:	4b1f      	ldr	r3, [pc, #124]	; (800026c <main+0x110>)
 80001f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80001f4:	809a      	strh	r2, [r3, #4]
  myDialing.callbackFrequencyHertz=CALLBACK_FREQUENCY_HZ;
 80001f6:	4b1d      	ldr	r3, [pc, #116]	; (800026c <main+0x110>)
 80001f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001fc:	811a      	strh	r2, [r3, #8]
  pulseDialingInit(&myDialing);
 80001fe:	481b      	ldr	r0, [pc, #108]	; (800026c <main+0x110>)
 8000200:	f000 fa35 	bl	800066e <pulseDialingInit>

  //assert_param(0);
  debug_message("reset");
 8000204:	481a      	ldr	r0, [pc, #104]	; (8000270 <main+0x114>)
 8000206:	f000 f9e9 	bl	80005dc <debug_message>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if(myDialing.dialedDigit>-1){
 800020a:	4b18      	ldr	r3, [pc, #96]	; (800026c <main+0x110>)
 800020c:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8000210:	2b00      	cmp	r3, #0
 8000212:	dbfa      	blt.n	800020a <main+0xae>
		if(myDialing.dialedDigit==9)
 8000214:	4b15      	ldr	r3, [pc, #84]	; (800026c <main+0x110>)
 8000216:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800021a:	2b09      	cmp	r3, #9
 800021c:	d103      	bne.n	8000226 <main+0xca>
			mySignaling.toneOffDuration=450;
 800021e:	4b10      	ldr	r3, [pc, #64]	; (8000260 <main+0x104>)
 8000220:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000224:	819a      	strh	r2, [r3, #12]
		snprintf(buffer, sizeof(buffer), "dialed %d\n", myDialing.dialedDigit);
 8000226:	4b11      	ldr	r3, [pc, #68]	; (800026c <main+0x110>)
 8000228:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800022c:	4a11      	ldr	r2, [pc, #68]	; (8000274 <main+0x118>)
 800022e:	2180      	movs	r1, #128	; 0x80
 8000230:	4811      	ldr	r0, [pc, #68]	; (8000278 <main+0x11c>)
 8000232:	f003 f8df 	bl	80033f4 <sniprintf>
		HAL_UART_Transmit_IT(&huart1, buffer, strlen(buffer));
 8000236:	4810      	ldr	r0, [pc, #64]	; (8000278 <main+0x11c>)
 8000238:	f7ff ff88 	bl	800014c <strlen>
 800023c:	4603      	mov	r3, r0
 800023e:	b29b      	uxth	r3, r3
 8000240:	461a      	mov	r2, r3
 8000242:	490d      	ldr	r1, [pc, #52]	; (8000278 <main+0x11c>)
 8000244:	480d      	ldr	r0, [pc, #52]	; (800027c <main+0x120>)
 8000246:	f002 fcb0 	bl	8002baa <HAL_UART_Transmit_IT>
		myDialing.dialedDigit=-1;
 800024a:	4b08      	ldr	r3, [pc, #32]	; (800026c <main+0x110>)
 800024c:	22ff      	movs	r2, #255	; 0xff
 800024e:	739a      	strb	r2, [r3, #14]
	if(myDialing.dialedDigit>-1){
 8000250:	e7db      	b.n	800020a <main+0xae>
 8000252:	bf00      	nop
 8000254:	200001c0 	.word	0x200001c0
 8000258:	40010c00 	.word	0x40010c00
 800025c:	200001e0 	.word	0x200001e0
 8000260:	2000009c 	.word	0x2000009c
 8000264:	007a1200 	.word	0x007a1200
 8000268:	200000b4 	.word	0x200000b4
 800026c:	20000228 	.word	0x20000228
 8000270:	08003ca8 	.word	0x08003ca8
 8000274:	08003cb0 	.word	0x08003cb0
 8000278:	20000140 	.word	0x20000140
 800027c:	200000fc 	.word	0x200000fc

08000280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b090      	sub	sp, #64	; 0x40
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	f107 0318 	add.w	r3, r7, #24
 800028a:	2228      	movs	r2, #40	; 0x28
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f003 f8a8 	bl	80033e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]
 80002a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002a2:	2301      	movs	r3, #1
 80002a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b0:	2301      	movs	r3, #1
 80002b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b4:	2302      	movs	r3, #2
 80002b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80002be:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80002c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c4:	f107 0318 	add.w	r3, r7, #24
 80002c8:	4618      	mov	r0, r3
 80002ca:	f001 f845 	bl	8001358 <HAL_RCC_OscConfig>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002d4:	f000 f9c6 	bl	8000664 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d8:	230f      	movs	r3, #15
 80002da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002dc:	2302      	movs	r3, #2
 80002de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80002e4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80002e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80002ea:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80002ee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2102      	movs	r1, #2
 80002f4:	4618      	mov	r0, r3
 80002f6:	f001 faaf 	bl	8001858 <HAL_RCC_ClockConfig>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000300:	f000 f9b0 	bl	8000664 <Error_Handler>
  }
}
 8000304:	bf00      	nop
 8000306:	3740      	adds	r7, #64	; 0x40
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b086      	sub	sp, #24
 8000310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000312:	f107 0308 	add.w	r3, r7, #8
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]
 800031c:	609a      	str	r2, [r3, #8]
 800031e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000320:	463b      	mov	r3, r7
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000328:	4b1d      	ldr	r3, [pc, #116]	; (80003a0 <MX_TIM2_Init+0x94>)
 800032a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800032e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000330:	4b1b      	ldr	r3, [pc, #108]	; (80003a0 <MX_TIM2_Init+0x94>)
 8000332:	2200      	movs	r2, #0
 8000334:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000336:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <MX_TIM2_Init+0x94>)
 8000338:	2200      	movs	r2, #0
 800033a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 800;
 800033c:	4b18      	ldr	r3, [pc, #96]	; (80003a0 <MX_TIM2_Init+0x94>)
 800033e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000342:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000344:	4b16      	ldr	r3, [pc, #88]	; (80003a0 <MX_TIM2_Init+0x94>)
 8000346:	2200      	movs	r2, #0
 8000348:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800034a:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <MX_TIM2_Init+0x94>)
 800034c:	2280      	movs	r2, #128	; 0x80
 800034e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000350:	4813      	ldr	r0, [pc, #76]	; (80003a0 <MX_TIM2_Init+0x94>)
 8000352:	f001 fc1b 	bl	8001b8c <HAL_TIM_Base_Init>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800035c:	f000 f982 	bl	8000664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000364:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000366:	f107 0308 	add.w	r3, r7, #8
 800036a:	4619      	mov	r1, r3
 800036c:	480c      	ldr	r0, [pc, #48]	; (80003a0 <MX_TIM2_Init+0x94>)
 800036e:	f001 ffd3 	bl	8002318 <HAL_TIM_ConfigClockSource>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000378:	f000 f974 	bl	8000664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800037c:	2300      	movs	r3, #0
 800037e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000380:	2300      	movs	r3, #0
 8000382:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000384:	463b      	mov	r3, r7
 8000386:	4619      	mov	r1, r3
 8000388:	4805      	ldr	r0, [pc, #20]	; (80003a0 <MX_TIM2_Init+0x94>)
 800038a:	f002 fb51 	bl	8002a30 <HAL_TIMEx_MasterConfigSynchronization>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000394:	f000 f966 	bl	8000664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000398:	bf00      	nop
 800039a:	3718      	adds	r7, #24
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	200001e0 	.word	0x200001e0

080003a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b08e      	sub	sp, #56	; 0x38
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003b8:	f107 0320 	add.w	r3, r7, #32
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	605a      	str	r2, [r3, #4]
 80003ca:	609a      	str	r2, [r3, #8]
 80003cc:	60da      	str	r2, [r3, #12]
 80003ce:	611a      	str	r2, [r3, #16]
 80003d0:	615a      	str	r2, [r3, #20]
 80003d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003d4:	4b2c      	ldr	r3, [pc, #176]	; (8000488 <MX_TIM3_Init+0xe4>)
 80003d6:	4a2d      	ldr	r2, [pc, #180]	; (800048c <MX_TIM3_Init+0xe8>)
 80003d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 18;
 80003da:	4b2b      	ldr	r3, [pc, #172]	; (8000488 <MX_TIM3_Init+0xe4>)
 80003dc:	2212      	movs	r2, #18
 80003de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e0:	4b29      	ldr	r3, [pc, #164]	; (8000488 <MX_TIM3_Init+0xe4>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1024;
 80003e6:	4b28      	ldr	r3, [pc, #160]	; (8000488 <MX_TIM3_Init+0xe4>)
 80003e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ee:	4b26      	ldr	r3, [pc, #152]	; (8000488 <MX_TIM3_Init+0xe4>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003f4:	4b24      	ldr	r3, [pc, #144]	; (8000488 <MX_TIM3_Init+0xe4>)
 80003f6:	2280      	movs	r2, #128	; 0x80
 80003f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003fa:	4823      	ldr	r0, [pc, #140]	; (8000488 <MX_TIM3_Init+0xe4>)
 80003fc:	f001 fbc6 	bl	8001b8c <HAL_TIM_Base_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000406:	f000 f92d 	bl	8000664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800040a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800040e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000410:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000414:	4619      	mov	r1, r3
 8000416:	481c      	ldr	r0, [pc, #112]	; (8000488 <MX_TIM3_Init+0xe4>)
 8000418:	f001 ff7e 	bl	8002318 <HAL_TIM_ConfigClockSource>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000422:	f000 f91f 	bl	8000664 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000426:	4818      	ldr	r0, [pc, #96]	; (8000488 <MX_TIM3_Init+0xe4>)
 8000428:	f001 fc52 	bl	8001cd0 <HAL_TIM_PWM_Init>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000432:	f000 f917 	bl	8000664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000436:	2300      	movs	r3, #0
 8000438:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800043a:	2300      	movs	r3, #0
 800043c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800043e:	f107 0320 	add.w	r3, r7, #32
 8000442:	4619      	mov	r1, r3
 8000444:	4810      	ldr	r0, [pc, #64]	; (8000488 <MX_TIM3_Init+0xe4>)
 8000446:	f002 faf3 	bl	8002a30 <HAL_TIMEx_MasterConfigSynchronization>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000450:	f000 f908 	bl	8000664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000454:	2360      	movs	r3, #96	; 0x60
 8000456:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800045c:	2300      	movs	r3, #0
 800045e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	220c      	movs	r2, #12
 8000468:	4619      	mov	r1, r3
 800046a:	4807      	ldr	r0, [pc, #28]	; (8000488 <MX_TIM3_Init+0xe4>)
 800046c:	f001 fe96 	bl	800219c <HAL_TIM_PWM_ConfigChannel>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000476:	f000 f8f5 	bl	8000664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800047a:	4803      	ldr	r0, [pc, #12]	; (8000488 <MX_TIM3_Init+0xe4>)
 800047c:	f000 fa5c 	bl	8000938 <HAL_TIM_MspPostInit>

}
 8000480:	bf00      	nop
 8000482:	3738      	adds	r7, #56	; 0x38
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	200000b4 	.word	0x200000b4
 800048c:	40000400 	.word	0x40000400

08000490 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000494:	4b11      	ldr	r3, [pc, #68]	; (80004dc <MX_USART1_UART_Init+0x4c>)
 8000496:	4a12      	ldr	r2, [pc, #72]	; (80004e0 <MX_USART1_UART_Init+0x50>)
 8000498:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800049a:	4b10      	ldr	r3, [pc, #64]	; (80004dc <MX_USART1_UART_Init+0x4c>)
 800049c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <MX_USART1_UART_Init+0x4c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <MX_USART1_UART_Init+0x4c>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <MX_USART1_UART_Init+0x4c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004b4:	4b09      	ldr	r3, [pc, #36]	; (80004dc <MX_USART1_UART_Init+0x4c>)
 80004b6:	220c      	movs	r2, #12
 80004b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ba:	4b08      	ldr	r3, [pc, #32]	; (80004dc <MX_USART1_UART_Init+0x4c>)
 80004bc:	2200      	movs	r2, #0
 80004be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <MX_USART1_UART_Init+0x4c>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004c6:	4805      	ldr	r0, [pc, #20]	; (80004dc <MX_USART1_UART_Init+0x4c>)
 80004c8:	f002 fb22 	bl	8002b10 <HAL_UART_Init>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004d2:	f000 f8c7 	bl	8000664 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	200000fc 	.word	0x200000fc
 80004e0:	40013800 	.word	0x40013800

080004e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ea:	f107 0310 	add.w	r3, r7, #16
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]
 80004f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f8:	4b35      	ldr	r3, [pc, #212]	; (80005d0 <MX_GPIO_Init+0xec>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a34      	ldr	r2, [pc, #208]	; (80005d0 <MX_GPIO_Init+0xec>)
 80004fe:	f043 0310 	orr.w	r3, r3, #16
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b32      	ldr	r3, [pc, #200]	; (80005d0 <MX_GPIO_Init+0xec>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f003 0310 	and.w	r3, r3, #16
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000510:	4b2f      	ldr	r3, [pc, #188]	; (80005d0 <MX_GPIO_Init+0xec>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a2e      	ldr	r2, [pc, #184]	; (80005d0 <MX_GPIO_Init+0xec>)
 8000516:	f043 0320 	orr.w	r3, r3, #32
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b2c      	ldr	r3, [pc, #176]	; (80005d0 <MX_GPIO_Init+0xec>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0320 	and.w	r3, r3, #32
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000528:	4b29      	ldr	r3, [pc, #164]	; (80005d0 <MX_GPIO_Init+0xec>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a28      	ldr	r2, [pc, #160]	; (80005d0 <MX_GPIO_Init+0xec>)
 800052e:	f043 0308 	orr.w	r3, r3, #8
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b26      	ldr	r3, [pc, #152]	; (80005d0 <MX_GPIO_Init+0xec>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0308 	and.w	r3, r3, #8
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000540:	4b23      	ldr	r3, [pc, #140]	; (80005d0 <MX_GPIO_Init+0xec>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a22      	ldr	r2, [pc, #136]	; (80005d0 <MX_GPIO_Init+0xec>)
 8000546:	f043 0304 	orr.w	r3, r3, #4
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b20      	ldr	r3, [pc, #128]	; (80005d0 <MX_GPIO_Init+0xec>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f003 0304 	and.w	r3, r3, #4
 8000554:	603b      	str	r3, [r7, #0]
 8000556:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055e:	481d      	ldr	r0, [pc, #116]	; (80005d4 <MX_GPIO_Init+0xf0>)
 8000560:	f000 fec9 	bl	80012f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, POTS_RM_Pin|POTS_FR_Pin|POTS_LED_STAT_Pin, GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800056a:	481b      	ldr	r0, [pc, #108]	; (80005d8 <MX_GPIO_Init+0xf4>)
 800056c:	f000 fec3 	bl	80012f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000570:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000574:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000576:	2301      	movs	r3, #1
 8000578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	2300      	movs	r3, #0
 800057c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057e:	2302      	movs	r3, #2
 8000580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000582:	f107 0310 	add.w	r3, r7, #16
 8000586:	4619      	mov	r1, r3
 8000588:	4812      	ldr	r0, [pc, #72]	; (80005d4 <MX_GPIO_Init+0xf0>)
 800058a:	f000 fd19 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : POTS_SHK_Pin */
  GPIO_InitStruct.Pin = POTS_SHK_Pin;
 800058e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000592:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(POTS_SHK_GPIO_Port, &GPIO_InitStruct);
 800059c:	f107 0310 	add.w	r3, r7, #16
 80005a0:	4619      	mov	r1, r3
 80005a2:	480d      	ldr	r0, [pc, #52]	; (80005d8 <MX_GPIO_Init+0xf4>)
 80005a4:	f000 fd0c 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : POTS_RM_Pin POTS_FR_Pin POTS_LED_STAT_Pin */
  GPIO_InitStruct.Pin = POTS_RM_Pin|POTS_FR_Pin|POTS_LED_STAT_Pin;
 80005a8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80005ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ae:	2301      	movs	r3, #1
 80005b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	2302      	movs	r3, #2
 80005b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ba:	f107 0310 	add.w	r3, r7, #16
 80005be:	4619      	mov	r1, r3
 80005c0:	4805      	ldr	r0, [pc, #20]	; (80005d8 <MX_GPIO_Init+0xf4>)
 80005c2:	f000 fcfd 	bl	8000fc0 <HAL_GPIO_Init>

}
 80005c6:	bf00      	nop
 80005c8:	3720      	adds	r7, #32
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40021000 	.word	0x40021000
 80005d4:	40011000 	.word	0x40011000
 80005d8:	40010c00 	.word	0x40010c00

080005dc <debug_message>:

/* USER CODE BEGIN 4 */

void debug_message(uint8_t *message)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]

	snprintf(buffer, sizeof(buffer), "debug %s\n", message);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4a09      	ldr	r2, [pc, #36]	; (800060c <debug_message+0x30>)
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	4809      	ldr	r0, [pc, #36]	; (8000610 <debug_message+0x34>)
 80005ec:	f002 ff02 	bl	80033f4 <sniprintf>
	HAL_UART_Transmit_IT(&huart1, buffer, strlen(buffer));
 80005f0:	4807      	ldr	r0, [pc, #28]	; (8000610 <debug_message+0x34>)
 80005f2:	f7ff fdab 	bl	800014c <strlen>
 80005f6:	4603      	mov	r3, r0
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	461a      	mov	r2, r3
 80005fc:	4904      	ldr	r1, [pc, #16]	; (8000610 <debug_message+0x34>)
 80005fe:	4805      	ldr	r0, [pc, #20]	; (8000614 <debug_message+0x38>)
 8000600:	f002 fad3 	bl	8002baa <HAL_UART_Transmit_IT>
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	08003cbc 	.word	0x08003cbc
 8000610:	20000140 	.word	0x20000140
 8000614:	200000fc 	.word	0x200000fc

08000618 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2){
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000628:	d112      	bne.n	8000650 <HAL_TIM_PeriodElapsedCallback+0x38>
		myTIM2Counter++;
 800062a:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800062c:	881b      	ldrh	r3, [r3, #0]
 800062e:	3301      	adds	r3, #1
 8000630:	b29a      	uxth	r2, r3
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000634:	801a      	strh	r2, [r3, #0]
		if(myTIM2Counter>=TIM2_INTERRUPT_FREQUENCY_HZ/CALLBACK_FREQUENCY_HZ)
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	2b09      	cmp	r3, #9
 800063c:	d908      	bls.n	8000650 <HAL_TIM_PeriodElapsedCallback+0x38>
		{
			//this is executes with frequency of CALLBACK_FREQUENCY_HZ
			myTIM2Counter=0;
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000640:	2200      	movs	r2, #0
 8000642:	801a      	strh	r2, [r3, #0]
			signalingCallback(&mySignaling);
 8000644:	4805      	ldr	r0, [pc, #20]	; (800065c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000646:	f000 f8a0 	bl	800078a <signalingCallback>

			pulseDialingCallback(&myDialing);
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800064c:	f000 f822 	bl	8000694 <pulseDialingCallback>
			//ringCallback(&myRing);
		}
	}
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	2000008c 	.word	0x2000008c
 800065c:	2000009c 	.word	0x2000009c
 8000660:	20000228 	.word	0x20000228

08000664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000668:	b672      	cpsid	i
}
 800066a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800066c:	e7fe      	b.n	800066c <Error_Handler+0x8>

0800066e <pulseDialingInit>:
  * @brief  initialize ringing module
  * @param  pulseDIaling: pointer to a structure of type pulse_dialing_machine_t. This structure contains state of the ringing module
  * @retval None
  */
void pulseDialingInit(pulse_dialing_machine_t *pulseDialing)
{
 800066e:	b480      	push	{r7}
 8000670:	b083      	sub	sp, #12
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
	pulseDialing->counter=0;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2200      	movs	r2, #0
 800067a:	72da      	strb	r2, [r3, #11]
	pulseDialing->timeSinceLastRisingSlope=0;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2200      	movs	r2, #0
 8000680:	819a      	strh	r2, [r3, #12]
	pulseDialing->dialedDigit=-1;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	22ff      	movs	r2, #255	; 0xff
 8000686:	739a      	strb	r2, [r3, #14]
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr
	...

08000694 <pulseDialingCallback>:

//http://www.gordostuff.com/2011/08/telephone-set-function-2-to-provide.html


void pulseDialingCallback(pulse_dialing_machine_t *pulseDialing)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	GPIO_PinState SHK_CurrentLevel; //this is SHK signal level observed in current invocation of the callback

	//read in current SHK level
	SHK_CurrentLevel=HAL_GPIO_ReadPin(pulseDialing->SHK_GPIO_Port, pulseDialing->SHK_Pin);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	889b      	ldrh	r3, [r3, #4]
 80006a4:	4619      	mov	r1, r3
 80006a6:	4610      	mov	r0, r2
 80006a8:	f000 fe0e 	bl	80012c8 <HAL_GPIO_ReadPin>
 80006ac:	4603      	mov	r3, r0
 80006ae:	73fb      	strb	r3, [r7, #15]
	//and recognize if this is continuously HIGH LOW or a slope
	if(SHK_CurrentLevel == GPIO_PIN_SET){
 80006b0:	7bfb      	ldrb	r3, [r7, #15]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d10b      	bne.n	80006ce <pulseDialingCallback+0x3a>
		if(pulseDialing->SHK_PreviousLevel == GPIO_PIN_SET)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	799b      	ldrb	r3, [r3, #6]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d103      	bne.n	80006c6 <pulseDialingCallback+0x32>
			pulseDialing->SHK_State=SHK_HIGH;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2201      	movs	r2, #1
 80006c2:	729a      	strb	r2, [r3, #10]
 80006c4:	e00e      	b.n	80006e4 <pulseDialingCallback+0x50>
		else
			pulseDialing->SHK_State=SHK_SLOPE_RISING;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2202      	movs	r2, #2
 80006ca:	729a      	strb	r2, [r3, #10]
 80006cc:	e00a      	b.n	80006e4 <pulseDialingCallback+0x50>
	}
	else{
		if(pulseDialing->SHK_PreviousLevel == GPIO_PIN_SET)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	799b      	ldrb	r3, [r3, #6]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d103      	bne.n	80006de <pulseDialingCallback+0x4a>
			pulseDialing->SHK_State=SHK_SLOPE_FALLING;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2203      	movs	r2, #3
 80006da:	729a      	strb	r2, [r3, #10]
 80006dc:	e002      	b.n	80006e4 <pulseDialingCallback+0x50>
		else
			pulseDialing->SHK_State=SHK_LOW;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2200      	movs	r2, #0
 80006e2:	729a      	strb	r2, [r3, #10]
	}

	//here we know if this was rising or falling slope
	if(pulseDialing->SHK_State==SHK_SLOPE_RISING){
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	7a9b      	ldrb	r3, [r3, #10]
 80006e8:	2b02      	cmp	r3, #2
 80006ea:	d108      	bne.n	80006fe <pulseDialingCallback+0x6a>
		pulseDialing->counter++;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	7adb      	ldrb	r3, [r3, #11]
 80006f0:	3301      	adds	r3, #1
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	72da      	strb	r2, [r3, #11]
		pulseDialing->timeSinceLastRisingSlope=0;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2200      	movs	r2, #0
 80006fc:	819a      	strh	r2, [r3, #12]
	}
	if(pulseDialing->SHK_State==SHK_HIGH && pulseDialing->counter){
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	7a9b      	ldrb	r3, [r3, #10]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d11d      	bne.n	8000742 <pulseDialingCallback+0xae>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	7adb      	ldrb	r3, [r3, #11]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d019      	beq.n	8000742 <pulseDialingCallback+0xae>
		pulseDialing->timeSinceLastRisingSlope++;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	899b      	ldrh	r3, [r3, #12]
 8000712:	3301      	adds	r3, #1
 8000714:	b29a      	uxth	r2, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	819a      	strh	r2, [r3, #12]
		if(pulseDialing->timeSinceLastRisingSlope>200){
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	899b      	ldrh	r3, [r3, #12]
 800071e:	2bc8      	cmp	r3, #200	; 0xc8
 8000720:	d90f      	bls.n	8000742 <pulseDialingCallback+0xae>
			//a digit has been completely dialed and is stored in counter here
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000722:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000726:	480a      	ldr	r0, [pc, #40]	; (8000750 <pulseDialingCallback+0xbc>)
 8000728:	f000 fdfd 	bl	8001326 <HAL_GPIO_TogglePin>
			pulseDialing->dialedDigit=pulseDialing->counter;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	7adb      	ldrb	r3, [r3, #11]
 8000730:	b25a      	sxtb	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	739a      	strb	r2, [r3, #14]
			pulseDialing->counter=0;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2200      	movs	r2, #0
 800073a:	72da      	strb	r2, [r3, #11]
			pulseDialing->timeSinceLastRisingSlope=0;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2200      	movs	r2, #0
 8000740:	819a      	strh	r2, [r3, #12]
	/////////////



	//currentLevel is stored for next invocation of this function
	pulseDialing->SHK_PreviousLevel=SHK_CurrentLevel;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	7bfa      	ldrb	r2, [r7, #15]
 8000746:	719a      	strb	r2, [r3, #6]
}
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40011000 	.word	0x40011000

08000754 <ringInit>:
  * @brief  initialize ringing module
  * @param  ring: pointer to a structure of type ringer_t. This structure contains state of the ringing module
  * @retval None
  */
void ringInit(ringer_t *ring)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	ring->callBackCounterBurst=0;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2200      	movs	r2, #0
 8000760:	835a      	strh	r2, [r3, #26]
	HAL_GPIO_WritePin(ring->FR_GPIO_Port, ring->FR_Pin, GPIO_PIN_RESET);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	68d8      	ldr	r0, [r3, #12]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	8a1b      	ldrh	r3, [r3, #16]
 800076a:	2200      	movs	r2, #0
 800076c:	4619      	mov	r1, r3
 800076e:	f000 fdc2 	bl	80012f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ring->RM_GPIO_Port, ring->RM_Pin, GPIO_PIN_RESET);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6958      	ldr	r0, [r3, #20]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	8b1b      	ldrh	r3, [r3, #24]
 800077a:	2200      	movs	r2, #0
 800077c:	4619      	mov	r1, r3
 800077e:	f000 fdba 	bl	80012f6 <HAL_GPIO_WritePin>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <signalingCallback>:

#include "signaling.h"



void signalingCallback(signaling_t *signaling){
 800078a:	b580      	push	{r7, lr}
 800078c:	b082      	sub	sp, #8
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
	signaling->callBackCounterDuration++;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	89db      	ldrh	r3, [r3, #14]
 8000796:	3301      	adds	r3, #1
 8000798:	b29a      	uxth	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	81da      	strh	r2, [r3, #14]

	switch(signaling->state)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	7c1b      	ldrb	r3, [r3, #16]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d002      	beq.n	80007ac <signalingCallback+0x22>
 80007a6:	2b02      	cmp	r3, #2
 80007a8:	d013      	beq.n	80007d2 <signalingCallback+0x48>
 80007aa:	e025      	b.n	80007f8 <signalingCallback+0x6e>
	{
	case SIGNALING_STATE_TONE: //in this state a tone is beeing generated
		if(signaling->callBackCounterDuration>=signaling->toneOnDuration){ //if the tone has been generated long enough
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	89da      	ldrh	r2, [r3, #14]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	895b      	ldrh	r3, [r3, #10]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d323      	bcc.n	8000800 <signalingCallback+0x76>
			HAL_TIM_PWM_Stop(signaling->timer, TIM_CHANNEL_4); 	//stop generating tone
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	695b      	ldr	r3, [r3, #20]
 80007bc:	210c      	movs	r1, #12
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 fb80 	bl	8001ec4 <HAL_TIM_PWM_Stop>
			signaling->state=SIGNALING_STATE_PAUSE;				//change state to SIGNALING_STATE_PASUE
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2202      	movs	r2, #2
 80007c8:	741a      	strb	r2, [r3, #16]
			signaling->callBackCounterDuration=0; 				//reset counter
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2200      	movs	r2, #0
 80007ce:	81da      	strh	r2, [r3, #14]
			}

		break;
 80007d0:	e016      	b.n	8000800 <signalingCallback+0x76>
	case SIGNALING_STATE_PAUSE:
		if(signaling->callBackCounterDuration>=signaling->toneOffDuration){ //if the pause has been generated long enough
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	89da      	ldrh	r2, [r3, #14]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	899b      	ldrh	r3, [r3, #12]
 80007da:	429a      	cmp	r2, r3
 80007dc:	d312      	bcc.n	8000804 <signalingCallback+0x7a>
			HAL_TIM_PWM_Start(signaling->timer, TIM_CHANNEL_4); 	//start generating tone
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	210c      	movs	r1, #12
 80007e4:	4618      	mov	r0, r3
 80007e6:	f001 facb 	bl	8001d80 <HAL_TIM_PWM_Start>
			signaling->state=SIGNALING_STATE_TONE;				//change state to SIGNALING_STATE_PASUE
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2201      	movs	r2, #1
 80007ee:	741a      	strb	r2, [r3, #16]
			signaling->callBackCounterDuration=0; 				//reset counter
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2200      	movs	r2, #0
 80007f4:	81da      	strh	r2, [r3, #14]
			}
		break;
 80007f6:	e005      	b.n	8000804 <signalingCallback+0x7a>
	case SIGNALING_STATE_OFF:
	default:
		signaling->callBackCounterDuration=0;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2200      	movs	r2, #0
 80007fc:	81da      	strh	r2, [r3, #14]
		break;
 80007fe:	e002      	b.n	8000806 <signalingCallback+0x7c>
		break;
 8000800:	bf00      	nop
 8000802:	e000      	b.n	8000806 <signalingCallback+0x7c>
		break;
 8000804:	bf00      	nop
	}
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <signalingInit>:


//currently this function assumes that PWM channel 4 is used
//it is not reconfigurable on the fly for other PWM channels
void signalingInit(signaling_t *signaling){
 800080e:	b580      	push	{r7, lr}
 8000810:	b084      	sub	sp, #16
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]

	uint32_t psc; //psc is prescaler value needed for PWM channel to generate required frequency
	uint16_t ccr; //ccr is defining duty cycle of generated PWM

	psc=(signaling->fclk)/(1023*(signaling->toneFrequency));	//calculate necessary prescaler value
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	685a      	ldr	r2, [r3, #4]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	891b      	ldrh	r3, [r3, #8]
 800081e:	4619      	mov	r1, r3
 8000820:	460b      	mov	r3, r1
 8000822:	029b      	lsls	r3, r3, #10
 8000824:	1a5b      	subs	r3, r3, r1
 8000826:	fbb2 f3f3 	udiv	r3, r2, r3
 800082a:	60fb      	str	r3, [r7, #12]
	if(psc<UINT16_MAX){ //timer can accept only 16 bit results
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000832:	4293      	cmp	r3, r2
 8000834:	d812      	bhi.n	800085c <signalingInit+0x4e>
		ccr=512;
 8000836:	f44f 7300 	mov.w	r3, #512	; 0x200
 800083a:	817b      	strh	r3, [r7, #10]
		signaling->timer->Instance->PSC=psc;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	695b      	ldr	r3, [r3, #20]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	629a      	str	r2, [r3, #40]	; 0x28
		signaling->timer->Instance->CCR4=ccr; //50% duty cycle of generated square signal
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	897a      	ldrh	r2, [r7, #10]
 800084e:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_PWM_Start(signaling->timer, TIM_CHANNEL_4);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	210c      	movs	r1, #12
 8000856:	4618      	mov	r0, r3
 8000858:	f001 fa92 	bl	8001d80 <HAL_TIM_PWM_Start>
		//return 0;
	}
	//return 1;

}
 800085c:	bf00      	nop
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800086a:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <HAL_MspInit+0x5c>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	4a14      	ldr	r2, [pc, #80]	; (80008c0 <HAL_MspInit+0x5c>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6193      	str	r3, [r2, #24]
 8000876:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <HAL_MspInit+0x5c>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <HAL_MspInit+0x5c>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <HAL_MspInit+0x5c>)
 8000888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088c:	61d3      	str	r3, [r2, #28]
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <HAL_MspInit+0x5c>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <HAL_MspInit+0x60>)
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <HAL_MspInit+0x60>)
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b6:	bf00      	nop
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	40021000 	.word	0x40021000
 80008c4:	40010000 	.word	0x40010000

080008c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008d8:	d114      	bne.n	8000904 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <HAL_TIM_Base_MspInit+0x68>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	4a14      	ldr	r2, [pc, #80]	; (8000930 <HAL_TIM_Base_MspInit+0x68>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	61d3      	str	r3, [r2, #28]
 80008e6:	4b12      	ldr	r3, [pc, #72]	; (8000930 <HAL_TIM_Base_MspInit+0x68>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2100      	movs	r1, #0
 80008f6:	201c      	movs	r0, #28
 80008f8:	f000 fa7b 	bl	8000df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008fc:	201c      	movs	r0, #28
 80008fe:	f000 fa94 	bl	8000e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000902:	e010      	b.n	8000926 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <HAL_TIM_Base_MspInit+0x6c>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d10b      	bne.n	8000926 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <HAL_TIM_Base_MspInit+0x68>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	4a07      	ldr	r2, [pc, #28]	; (8000930 <HAL_TIM_Base_MspInit+0x68>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	61d3      	str	r3, [r2, #28]
 800091a:	4b05      	ldr	r3, [pc, #20]	; (8000930 <HAL_TIM_Base_MspInit+0x68>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
}
 8000926:	bf00      	nop
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40021000 	.word	0x40021000
 8000934:	40000400 	.word	0x40000400

08000938 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 0310 	add.w	r3, r7, #16
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a0f      	ldr	r2, [pc, #60]	; (8000990 <HAL_TIM_MspPostInit+0x58>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d117      	bne.n	8000988 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000958:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <HAL_TIM_MspPostInit+0x5c>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a0d      	ldr	r2, [pc, #52]	; (8000994 <HAL_TIM_MspPostInit+0x5c>)
 800095e:	f043 0308 	orr.w	r3, r3, #8
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <HAL_TIM_MspPostInit+0x5c>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0308 	and.w	r3, r3, #8
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = AU_PWM_Pin;
 8000970:	2302      	movs	r3, #2
 8000972:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2302      	movs	r3, #2
 800097a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AU_PWM_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	4619      	mov	r1, r3
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <HAL_TIM_MspPostInit+0x60>)
 8000984:	f000 fb1c 	bl	8000fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000988:	bf00      	nop
 800098a:	3720      	adds	r7, #32
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40000400 	.word	0x40000400
 8000994:	40021000 	.word	0x40021000
 8000998:	40010c00 	.word	0x40010c00

0800099c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a20      	ldr	r2, [pc, #128]	; (8000a38 <HAL_UART_MspInit+0x9c>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d139      	bne.n	8000a30 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009bc:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <HAL_UART_MspInit+0xa0>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	4a1e      	ldr	r2, [pc, #120]	; (8000a3c <HAL_UART_MspInit+0xa0>)
 80009c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c6:	6193      	str	r3, [r2, #24]
 80009c8:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <HAL_UART_MspInit+0xa0>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <HAL_UART_MspInit+0xa0>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a18      	ldr	r2, [pc, #96]	; (8000a3c <HAL_UART_MspInit+0xa0>)
 80009da:	f043 0304 	orr.w	r3, r3, #4
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <HAL_UART_MspInit+0xa0>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f003 0304 	and.w	r3, r3, #4
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = POTS_DEBUG_TX_Pin;
 80009ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POTS_DEBUG_TX_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	4619      	mov	r1, r3
 8000a00:	480f      	ldr	r0, [pc, #60]	; (8000a40 <HAL_UART_MspInit+0xa4>)
 8000a02:	f000 fadd 	bl	8000fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTS_DEBUG_RX_Pin;
 8000a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(POTS_DEBUG_RX_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4809      	ldr	r0, [pc, #36]	; (8000a40 <HAL_UART_MspInit+0xa4>)
 8000a1c:	f000 fad0 	bl	8000fc0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2100      	movs	r1, #0
 8000a24:	2025      	movs	r0, #37	; 0x25
 8000a26:	f000 f9e4 	bl	8000df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a2a:	2025      	movs	r0, #37	; 0x25
 8000a2c:	f000 f9fd 	bl	8000e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a30:	bf00      	nop
 8000a32:	3720      	adds	r7, #32
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40013800 	.word	0x40013800
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	40010800 	.word	0x40010800

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <NMI_Handler+0x4>

08000a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <MemManage_Handler+0x4>

08000a56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr

08000a6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr

08000a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr

08000a86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8a:	f000 f8bf 	bl	8000c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a98:	4802      	ldr	r0, [pc, #8]	; (8000aa4 <TIM2_IRQHandler+0x10>)
 8000a9a:	f001 fa77 	bl	8001f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200001e0 	.word	0x200001e0

08000aa8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <USART1_IRQHandler+0x10>)
 8000aae:	f002 f8c1 	bl	8002c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200000fc 	.word	0x200000fc

08000abc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac4:	4a14      	ldr	r2, [pc, #80]	; (8000b18 <_sbrk+0x5c>)
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <_sbrk+0x60>)
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad0:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <_sbrk+0x64>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d102      	bne.n	8000ade <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <_sbrk+0x64>)
 8000ada:	4a12      	ldr	r2, [pc, #72]	; (8000b24 <_sbrk+0x68>)
 8000adc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <_sbrk+0x64>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d207      	bcs.n	8000afc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aec:	f002 fc50 	bl	8003390 <__errno>
 8000af0:	4603      	mov	r3, r0
 8000af2:	220c      	movs	r2, #12
 8000af4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000af6:	f04f 33ff 	mov.w	r3, #4294967295
 8000afa:	e009      	b.n	8000b10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <_sbrk+0x64>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b02:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <_sbrk+0x64>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4413      	add	r3, r2
 8000b0a:	4a05      	ldr	r2, [pc, #20]	; (8000b20 <_sbrk+0x64>)
 8000b0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20005000 	.word	0x20005000
 8000b1c:	00000400 	.word	0x00000400
 8000b20:	20000090 	.word	0x20000090
 8000b24:	20000250 	.word	0x20000250

08000b28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b36:	490d      	ldr	r1, [pc, #52]	; (8000b6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b38:	4a0d      	ldr	r2, [pc, #52]	; (8000b70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b3c:	e002      	b.n	8000b44 <LoopCopyDataInit>

08000b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b42:	3304      	adds	r3, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b48:	d3f9      	bcc.n	8000b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b4c:	4c0a      	ldr	r4, [pc, #40]	; (8000b78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b50:	e001      	b.n	8000b56 <LoopFillZerobss>

08000b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b54:	3204      	adds	r2, #4

08000b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b58:	d3fb      	bcc.n	8000b52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b5a:	f7ff ffe5 	bl	8000b28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b5e:	f002 fc1d 	bl	800339c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b62:	f7ff fafb 	bl	800015c <main>
  bx lr
 8000b66:	4770      	bx	lr
  ldr r0, =_sdata
 8000b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b6c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b70:	08003d2c 	.word	0x08003d2c
  ldr r2, =_sbss
 8000b74:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b78:	2000024c 	.word	0x2000024c

08000b7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC1_2_IRQHandler>
	...

08000b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_Init+0x28>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a07      	ldr	r2, [pc, #28]	; (8000ba8 <HAL_Init+0x28>)
 8000b8a:	f043 0310 	orr.w	r3, r3, #16
 8000b8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f000 f923 	bl	8000ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b96:	200f      	movs	r0, #15
 8000b98:	f000 f808 	bl	8000bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b9c:	f7ff fe62 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40022000 	.word	0x40022000

08000bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <HAL_InitTick+0x54>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <HAL_InitTick+0x58>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 f93b 	bl	8000e46 <HAL_SYSTICK_Config>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e00e      	b.n	8000bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b0f      	cmp	r3, #15
 8000bde:	d80a      	bhi.n	8000bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be0:	2200      	movs	r2, #0
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	f000 f903 	bl	8000df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bec:	4a06      	ldr	r2, [pc, #24]	; (8000c08 <HAL_InitTick+0x5c>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e000      	b.n	8000bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000000 	.word	0x20000000
 8000c04:	20000008 	.word	0x20000008
 8000c08:	20000004 	.word	0x20000004

08000c0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <HAL_IncTick+0x1c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <HAL_IncTick+0x20>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a03      	ldr	r2, [pc, #12]	; (8000c2c <HAL_IncTick+0x20>)
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	20000238 	.word	0x20000238

08000c30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return uwTick;
 8000c34:	4b02      	ldr	r3, [pc, #8]	; (8000c40 <HAL_GetTick+0x10>)
 8000c36:	681b      	ldr	r3, [r3, #0]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	20000238 	.word	0x20000238

08000c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c60:	4013      	ands	r3, r2
 8000c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c76:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	60d3      	str	r3, [r2, #12]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	f003 0307 	and.w	r3, r3, #7
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db0b      	blt.n	8000cd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	f003 021f 	and.w	r2, r3, #31
 8000cc0:	4906      	ldr	r1, [pc, #24]	; (8000cdc <__NVIC_EnableIRQ+0x34>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	095b      	lsrs	r3, r3, #5
 8000cc8:	2001      	movs	r0, #1
 8000cca:	fa00 f202 	lsl.w	r2, r0, r2
 8000cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	e000e100 	.word	0xe000e100

08000ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db0a      	blt.n	8000d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	490c      	ldr	r1, [pc, #48]	; (8000d2c <__NVIC_SetPriority+0x4c>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	0112      	lsls	r2, r2, #4
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	440b      	add	r3, r1
 8000d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d08:	e00a      	b.n	8000d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4908      	ldr	r1, [pc, #32]	; (8000d30 <__NVIC_SetPriority+0x50>)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f003 030f 	and.w	r3, r3, #15
 8000d16:	3b04      	subs	r3, #4
 8000d18:	0112      	lsls	r2, r2, #4
 8000d1a:	b2d2      	uxtb	r2, r2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	761a      	strb	r2, [r3, #24]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000e100 	.word	0xe000e100
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	; 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f1c3 0307 	rsb	r3, r3, #7
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	bf28      	it	cs
 8000d52:	2304      	movcs	r3, #4
 8000d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	2b06      	cmp	r3, #6
 8000d5c:	d902      	bls.n	8000d64 <NVIC_EncodePriority+0x30>
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3b03      	subs	r3, #3
 8000d62:	e000      	b.n	8000d66 <NVIC_EncodePriority+0x32>
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	f04f 32ff 	mov.w	r2, #4294967295
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43da      	mvns	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	401a      	ands	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	fa01 f303 	lsl.w	r3, r1, r3
 8000d86:	43d9      	mvns	r1, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	4313      	orrs	r3, r2
         );
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3724      	adds	r7, #36	; 0x24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000da8:	d301      	bcc.n	8000dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000daa:	2301      	movs	r3, #1
 8000dac:	e00f      	b.n	8000dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <SysTick_Config+0x40>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db6:	210f      	movs	r1, #15
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbc:	f7ff ff90 	bl	8000ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <SysTick_Config+0x40>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <SysTick_Config+0x40>)
 8000dc8:	2207      	movs	r2, #7
 8000dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	e000e010 	.word	0xe000e010

08000ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f7ff ff2d 	bl	8000c44 <__NVIC_SetPriorityGrouping>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	4603      	mov	r3, r0
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	607a      	str	r2, [r7, #4]
 8000dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e04:	f7ff ff42 	bl	8000c8c <__NVIC_GetPriorityGrouping>
 8000e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	68b9      	ldr	r1, [r7, #8]
 8000e0e:	6978      	ldr	r0, [r7, #20]
 8000e10:	f7ff ff90 	bl	8000d34 <NVIC_EncodePriority>
 8000e14:	4602      	mov	r2, r0
 8000e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff5f 	bl	8000ce0 <__NVIC_SetPriority>
}
 8000e22:	bf00      	nop
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff35 	bl	8000ca8 <__NVIC_EnableIRQ>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff ffa2 	bl	8000d98 <SysTick_Config>
 8000e54:	4603      	mov	r3, r0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b085      	sub	sp, #20
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d008      	beq.n	8000e86 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2204      	movs	r2, #4
 8000e78:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e020      	b.n	8000ec8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f022 020e 	bic.w	r2, r2, #14
 8000e94:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f022 0201 	bic.w	r2, r2, #1
 8000ea4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eae:	2101      	movs	r1, #1
 8000eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr
	...

08000ed4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000edc:	2300      	movs	r3, #0
 8000ede:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d005      	beq.n	8000ef6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2204      	movs	r2, #4
 8000eee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e051      	b.n	8000f9a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f022 020e 	bic.w	r2, r2, #14
 8000f04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f022 0201 	bic.w	r2, r2, #1
 8000f14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a22      	ldr	r2, [pc, #136]	; (8000fa4 <HAL_DMA_Abort_IT+0xd0>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d029      	beq.n	8000f74 <HAL_DMA_Abort_IT+0xa0>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a20      	ldr	r2, [pc, #128]	; (8000fa8 <HAL_DMA_Abort_IT+0xd4>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d022      	beq.n	8000f70 <HAL_DMA_Abort_IT+0x9c>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a1f      	ldr	r2, [pc, #124]	; (8000fac <HAL_DMA_Abort_IT+0xd8>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d01a      	beq.n	8000f6a <HAL_DMA_Abort_IT+0x96>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a1d      	ldr	r2, [pc, #116]	; (8000fb0 <HAL_DMA_Abort_IT+0xdc>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d012      	beq.n	8000f64 <HAL_DMA_Abort_IT+0x90>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a1c      	ldr	r2, [pc, #112]	; (8000fb4 <HAL_DMA_Abort_IT+0xe0>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d00a      	beq.n	8000f5e <HAL_DMA_Abort_IT+0x8a>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a1a      	ldr	r2, [pc, #104]	; (8000fb8 <HAL_DMA_Abort_IT+0xe4>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d102      	bne.n	8000f58 <HAL_DMA_Abort_IT+0x84>
 8000f52:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f56:	e00e      	b.n	8000f76 <HAL_DMA_Abort_IT+0xa2>
 8000f58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f5c:	e00b      	b.n	8000f76 <HAL_DMA_Abort_IT+0xa2>
 8000f5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f62:	e008      	b.n	8000f76 <HAL_DMA_Abort_IT+0xa2>
 8000f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f68:	e005      	b.n	8000f76 <HAL_DMA_Abort_IT+0xa2>
 8000f6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f6e:	e002      	b.n	8000f76 <HAL_DMA_Abort_IT+0xa2>
 8000f70:	2310      	movs	r3, #16
 8000f72:	e000      	b.n	8000f76 <HAL_DMA_Abort_IT+0xa2>
 8000f74:	2301      	movs	r3, #1
 8000f76:	4a11      	ldr	r2, [pc, #68]	; (8000fbc <HAL_DMA_Abort_IT+0xe8>)
 8000f78:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	4798      	blx	r3
    } 
  }
  return status;
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40020008 	.word	0x40020008
 8000fa8:	4002001c 	.word	0x4002001c
 8000fac:	40020030 	.word	0x40020030
 8000fb0:	40020044 	.word	0x40020044
 8000fb4:	40020058 	.word	0x40020058
 8000fb8:	4002006c 	.word	0x4002006c
 8000fbc:	40020000 	.word	0x40020000

08000fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b08b      	sub	sp, #44	; 0x2c
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd2:	e169      	b.n	80012a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	69fa      	ldr	r2, [r7, #28]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	f040 8158 	bne.w	80012a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	4a9a      	ldr	r2, [pc, #616]	; (8001260 <HAL_GPIO_Init+0x2a0>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d05e      	beq.n	80010ba <HAL_GPIO_Init+0xfa>
 8000ffc:	4a98      	ldr	r2, [pc, #608]	; (8001260 <HAL_GPIO_Init+0x2a0>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d875      	bhi.n	80010ee <HAL_GPIO_Init+0x12e>
 8001002:	4a98      	ldr	r2, [pc, #608]	; (8001264 <HAL_GPIO_Init+0x2a4>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d058      	beq.n	80010ba <HAL_GPIO_Init+0xfa>
 8001008:	4a96      	ldr	r2, [pc, #600]	; (8001264 <HAL_GPIO_Init+0x2a4>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d86f      	bhi.n	80010ee <HAL_GPIO_Init+0x12e>
 800100e:	4a96      	ldr	r2, [pc, #600]	; (8001268 <HAL_GPIO_Init+0x2a8>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d052      	beq.n	80010ba <HAL_GPIO_Init+0xfa>
 8001014:	4a94      	ldr	r2, [pc, #592]	; (8001268 <HAL_GPIO_Init+0x2a8>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d869      	bhi.n	80010ee <HAL_GPIO_Init+0x12e>
 800101a:	4a94      	ldr	r2, [pc, #592]	; (800126c <HAL_GPIO_Init+0x2ac>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d04c      	beq.n	80010ba <HAL_GPIO_Init+0xfa>
 8001020:	4a92      	ldr	r2, [pc, #584]	; (800126c <HAL_GPIO_Init+0x2ac>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d863      	bhi.n	80010ee <HAL_GPIO_Init+0x12e>
 8001026:	4a92      	ldr	r2, [pc, #584]	; (8001270 <HAL_GPIO_Init+0x2b0>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d046      	beq.n	80010ba <HAL_GPIO_Init+0xfa>
 800102c:	4a90      	ldr	r2, [pc, #576]	; (8001270 <HAL_GPIO_Init+0x2b0>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d85d      	bhi.n	80010ee <HAL_GPIO_Init+0x12e>
 8001032:	2b12      	cmp	r3, #18
 8001034:	d82a      	bhi.n	800108c <HAL_GPIO_Init+0xcc>
 8001036:	2b12      	cmp	r3, #18
 8001038:	d859      	bhi.n	80010ee <HAL_GPIO_Init+0x12e>
 800103a:	a201      	add	r2, pc, #4	; (adr r2, 8001040 <HAL_GPIO_Init+0x80>)
 800103c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001040:	080010bb 	.word	0x080010bb
 8001044:	08001095 	.word	0x08001095
 8001048:	080010a7 	.word	0x080010a7
 800104c:	080010e9 	.word	0x080010e9
 8001050:	080010ef 	.word	0x080010ef
 8001054:	080010ef 	.word	0x080010ef
 8001058:	080010ef 	.word	0x080010ef
 800105c:	080010ef 	.word	0x080010ef
 8001060:	080010ef 	.word	0x080010ef
 8001064:	080010ef 	.word	0x080010ef
 8001068:	080010ef 	.word	0x080010ef
 800106c:	080010ef 	.word	0x080010ef
 8001070:	080010ef 	.word	0x080010ef
 8001074:	080010ef 	.word	0x080010ef
 8001078:	080010ef 	.word	0x080010ef
 800107c:	080010ef 	.word	0x080010ef
 8001080:	080010ef 	.word	0x080010ef
 8001084:	0800109d 	.word	0x0800109d
 8001088:	080010b1 	.word	0x080010b1
 800108c:	4a79      	ldr	r2, [pc, #484]	; (8001274 <HAL_GPIO_Init+0x2b4>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d013      	beq.n	80010ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001092:	e02c      	b.n	80010ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	623b      	str	r3, [r7, #32]
          break;
 800109a:	e029      	b.n	80010f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	3304      	adds	r3, #4
 80010a2:	623b      	str	r3, [r7, #32]
          break;
 80010a4:	e024      	b.n	80010f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	3308      	adds	r3, #8
 80010ac:	623b      	str	r3, [r7, #32]
          break;
 80010ae:	e01f      	b.n	80010f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	330c      	adds	r3, #12
 80010b6:	623b      	str	r3, [r7, #32]
          break;
 80010b8:	e01a      	b.n	80010f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d102      	bne.n	80010c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010c2:	2304      	movs	r3, #4
 80010c4:	623b      	str	r3, [r7, #32]
          break;
 80010c6:	e013      	b.n	80010f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d105      	bne.n	80010dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010d0:	2308      	movs	r3, #8
 80010d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	69fa      	ldr	r2, [r7, #28]
 80010d8:	611a      	str	r2, [r3, #16]
          break;
 80010da:	e009      	b.n	80010f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010dc:	2308      	movs	r3, #8
 80010de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69fa      	ldr	r2, [r7, #28]
 80010e4:	615a      	str	r2, [r3, #20]
          break;
 80010e6:	e003      	b.n	80010f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010e8:	2300      	movs	r3, #0
 80010ea:	623b      	str	r3, [r7, #32]
          break;
 80010ec:	e000      	b.n	80010f0 <HAL_GPIO_Init+0x130>
          break;
 80010ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	2bff      	cmp	r3, #255	; 0xff
 80010f4:	d801      	bhi.n	80010fa <HAL_GPIO_Init+0x13a>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	e001      	b.n	80010fe <HAL_GPIO_Init+0x13e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3304      	adds	r3, #4
 80010fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	2bff      	cmp	r3, #255	; 0xff
 8001104:	d802      	bhi.n	800110c <HAL_GPIO_Init+0x14c>
 8001106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	e002      	b.n	8001112 <HAL_GPIO_Init+0x152>
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110e:	3b08      	subs	r3, #8
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	210f      	movs	r1, #15
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	fa01 f303 	lsl.w	r3, r1, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	401a      	ands	r2, r3
 8001124:	6a39      	ldr	r1, [r7, #32]
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	fa01 f303 	lsl.w	r3, r1, r3
 800112c:	431a      	orrs	r2, r3
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 80b1 	beq.w	80012a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001140:	4b4d      	ldr	r3, [pc, #308]	; (8001278 <HAL_GPIO_Init+0x2b8>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a4c      	ldr	r2, [pc, #304]	; (8001278 <HAL_GPIO_Init+0x2b8>)
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b4a      	ldr	r3, [pc, #296]	; (8001278 <HAL_GPIO_Init+0x2b8>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001158:	4a48      	ldr	r2, [pc, #288]	; (800127c <HAL_GPIO_Init+0x2bc>)
 800115a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115c:	089b      	lsrs	r3, r3, #2
 800115e:	3302      	adds	r3, #2
 8001160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001164:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	220f      	movs	r2, #15
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	4013      	ands	r3, r2
 800117a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a40      	ldr	r2, [pc, #256]	; (8001280 <HAL_GPIO_Init+0x2c0>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d013      	beq.n	80011ac <HAL_GPIO_Init+0x1ec>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a3f      	ldr	r2, [pc, #252]	; (8001284 <HAL_GPIO_Init+0x2c4>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d00d      	beq.n	80011a8 <HAL_GPIO_Init+0x1e8>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a3e      	ldr	r2, [pc, #248]	; (8001288 <HAL_GPIO_Init+0x2c8>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d007      	beq.n	80011a4 <HAL_GPIO_Init+0x1e4>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a3d      	ldr	r2, [pc, #244]	; (800128c <HAL_GPIO_Init+0x2cc>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d101      	bne.n	80011a0 <HAL_GPIO_Init+0x1e0>
 800119c:	2303      	movs	r3, #3
 800119e:	e006      	b.n	80011ae <HAL_GPIO_Init+0x1ee>
 80011a0:	2304      	movs	r3, #4
 80011a2:	e004      	b.n	80011ae <HAL_GPIO_Init+0x1ee>
 80011a4:	2302      	movs	r3, #2
 80011a6:	e002      	b.n	80011ae <HAL_GPIO_Init+0x1ee>
 80011a8:	2301      	movs	r3, #1
 80011aa:	e000      	b.n	80011ae <HAL_GPIO_Init+0x1ee>
 80011ac:	2300      	movs	r3, #0
 80011ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011b0:	f002 0203 	and.w	r2, r2, #3
 80011b4:	0092      	lsls	r2, r2, #2
 80011b6:	4093      	lsls	r3, r2
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011be:	492f      	ldr	r1, [pc, #188]	; (800127c <HAL_GPIO_Init+0x2bc>)
 80011c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c2:	089b      	lsrs	r3, r3, #2
 80011c4:	3302      	adds	r3, #2
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d006      	beq.n	80011e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011d8:	4b2d      	ldr	r3, [pc, #180]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	492c      	ldr	r1, [pc, #176]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	600b      	str	r3, [r1, #0]
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011e6:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	4928      	ldr	r1, [pc, #160]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 80011f0:	4013      	ands	r3, r2
 80011f2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d006      	beq.n	800120e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001200:	4b23      	ldr	r3, [pc, #140]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	4922      	ldr	r1, [pc, #136]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	604b      	str	r3, [r1, #4]
 800120c:	e006      	b.n	800121c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800120e:	4b20      	ldr	r3, [pc, #128]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	43db      	mvns	r3, r3
 8001216:	491e      	ldr	r1, [pc, #120]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 8001218:	4013      	ands	r3, r2
 800121a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d006      	beq.n	8001236 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001228:	4b19      	ldr	r3, [pc, #100]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	4918      	ldr	r1, [pc, #96]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	608b      	str	r3, [r1, #8]
 8001234:	e006      	b.n	8001244 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001236:	4b16      	ldr	r3, [pc, #88]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 8001238:	689a      	ldr	r2, [r3, #8]
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	43db      	mvns	r3, r3
 800123e:	4914      	ldr	r1, [pc, #80]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 8001240:	4013      	ands	r3, r2
 8001242:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d021      	beq.n	8001294 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 8001252:	68da      	ldr	r2, [r3, #12]
 8001254:	490e      	ldr	r1, [pc, #56]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	4313      	orrs	r3, r2
 800125a:	60cb      	str	r3, [r1, #12]
 800125c:	e021      	b.n	80012a2 <HAL_GPIO_Init+0x2e2>
 800125e:	bf00      	nop
 8001260:	10320000 	.word	0x10320000
 8001264:	10310000 	.word	0x10310000
 8001268:	10220000 	.word	0x10220000
 800126c:	10210000 	.word	0x10210000
 8001270:	10120000 	.word	0x10120000
 8001274:	10110000 	.word	0x10110000
 8001278:	40021000 	.word	0x40021000
 800127c:	40010000 	.word	0x40010000
 8001280:	40010800 	.word	0x40010800
 8001284:	40010c00 	.word	0x40010c00
 8001288:	40011000 	.word	0x40011000
 800128c:	40011400 	.word	0x40011400
 8001290:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <HAL_GPIO_Init+0x304>)
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	43db      	mvns	r3, r3
 800129c:	4909      	ldr	r1, [pc, #36]	; (80012c4 <HAL_GPIO_Init+0x304>)
 800129e:	4013      	ands	r3, r2
 80012a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	3301      	adds	r3, #1
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	fa22 f303 	lsr.w	r3, r2, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f47f ae8e 	bne.w	8000fd4 <HAL_GPIO_Init+0x14>
  }
}
 80012b8:	bf00      	nop
 80012ba:	bf00      	nop
 80012bc:	372c      	adds	r7, #44	; 0x2c
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	40010400 	.word	0x40010400

080012c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	887b      	ldrh	r3, [r7, #2]
 80012da:	4013      	ands	r3, r2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d002      	beq.n	80012e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012e0:	2301      	movs	r3, #1
 80012e2:	73fb      	strb	r3, [r7, #15]
 80012e4:	e001      	b.n	80012ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr

080012f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	460b      	mov	r3, r1
 8001300:	807b      	strh	r3, [r7, #2]
 8001302:	4613      	mov	r3, r2
 8001304:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001306:	787b      	ldrb	r3, [r7, #1]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800130c:	887a      	ldrh	r2, [r7, #2]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001312:	e003      	b.n	800131c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	041a      	lsls	r2, r3, #16
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	611a      	str	r2, [r3, #16]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr

08001326 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001326:	b480      	push	{r7}
 8001328:	b085      	sub	sp, #20
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	460b      	mov	r3, r1
 8001330:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001338:	887a      	ldrh	r2, [r7, #2]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4013      	ands	r3, r2
 800133e:	041a      	lsls	r2, r3, #16
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	43d9      	mvns	r1, r3
 8001344:	887b      	ldrh	r3, [r7, #2]
 8001346:	400b      	ands	r3, r1
 8001348:	431a      	orrs	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	611a      	str	r2, [r3, #16]
}
 800134e:	bf00      	nop
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e26c      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 8087 	beq.w	8001486 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001378:	4b92      	ldr	r3, [pc, #584]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 030c 	and.w	r3, r3, #12
 8001380:	2b04      	cmp	r3, #4
 8001382:	d00c      	beq.n	800139e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001384:	4b8f      	ldr	r3, [pc, #572]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 030c 	and.w	r3, r3, #12
 800138c:	2b08      	cmp	r3, #8
 800138e:	d112      	bne.n	80013b6 <HAL_RCC_OscConfig+0x5e>
 8001390:	4b8c      	ldr	r3, [pc, #560]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800139c:	d10b      	bne.n	80013b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139e:	4b89      	ldr	r3, [pc, #548]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d06c      	beq.n	8001484 <HAL_RCC_OscConfig+0x12c>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d168      	bne.n	8001484 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e246      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013be:	d106      	bne.n	80013ce <HAL_RCC_OscConfig+0x76>
 80013c0:	4b80      	ldr	r3, [pc, #512]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a7f      	ldr	r2, [pc, #508]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80013c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	e02e      	b.n	800142c <HAL_RCC_OscConfig+0xd4>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x98>
 80013d6:	4b7b      	ldr	r3, [pc, #492]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a7a      	ldr	r2, [pc, #488]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	4b78      	ldr	r3, [pc, #480]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a77      	ldr	r2, [pc, #476]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e01d      	b.n	800142c <HAL_RCC_OscConfig+0xd4>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013f8:	d10c      	bne.n	8001414 <HAL_RCC_OscConfig+0xbc>
 80013fa:	4b72      	ldr	r3, [pc, #456]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a71      	ldr	r2, [pc, #452]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	4b6f      	ldr	r3, [pc, #444]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a6e      	ldr	r2, [pc, #440]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 800140c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	e00b      	b.n	800142c <HAL_RCC_OscConfig+0xd4>
 8001414:	4b6b      	ldr	r3, [pc, #428]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a6a      	ldr	r2, [pc, #424]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 800141a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4b68      	ldr	r3, [pc, #416]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a67      	ldr	r2, [pc, #412]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d013      	beq.n	800145c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001434:	f7ff fbfc 	bl	8000c30 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800143c:	f7ff fbf8 	bl	8000c30 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b64      	cmp	r3, #100	; 0x64
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e1fa      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144e:	4b5d      	ldr	r3, [pc, #372]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0xe4>
 800145a:	e014      	b.n	8001486 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fbe8 	bl	8000c30 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001464:	f7ff fbe4 	bl	8000c30 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b64      	cmp	r3, #100	; 0x64
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e1e6      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001476:	4b53      	ldr	r3, [pc, #332]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x10c>
 8001482:	e000      	b.n	8001486 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d063      	beq.n	800155a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001492:	4b4c      	ldr	r3, [pc, #304]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 030c 	and.w	r3, r3, #12
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00b      	beq.n	80014b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800149e:	4b49      	ldr	r3, [pc, #292]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 030c 	and.w	r3, r3, #12
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d11c      	bne.n	80014e4 <HAL_RCC_OscConfig+0x18c>
 80014aa:	4b46      	ldr	r3, [pc, #280]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d116      	bne.n	80014e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b6:	4b43      	ldr	r3, [pc, #268]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d005      	beq.n	80014ce <HAL_RCC_OscConfig+0x176>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d001      	beq.n	80014ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e1ba      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ce:	4b3d      	ldr	r3, [pc, #244]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	4939      	ldr	r1, [pc, #228]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e2:	e03a      	b.n	800155a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d020      	beq.n	800152e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ec:	4b36      	ldr	r3, [pc, #216]	; (80015c8 <HAL_RCC_OscConfig+0x270>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f2:	f7ff fb9d 	bl	8000c30 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014fa:	f7ff fb99 	bl	8000c30 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e19b      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800150c:	4b2d      	ldr	r3, [pc, #180]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001518:	4b2a      	ldr	r3, [pc, #168]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	4927      	ldr	r1, [pc, #156]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001528:	4313      	orrs	r3, r2
 800152a:	600b      	str	r3, [r1, #0]
 800152c:	e015      	b.n	800155a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800152e:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <HAL_RCC_OscConfig+0x270>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001534:	f7ff fb7c 	bl	8000c30 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800153c:	f7ff fb78 	bl	8000c30 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e17a      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154e:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	d03a      	beq.n	80015dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d019      	beq.n	80015a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <HAL_RCC_OscConfig+0x274>)
 8001570:	2201      	movs	r2, #1
 8001572:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001574:	f7ff fb5c 	bl	8000c30 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157c:	f7ff fb58 	bl	8000c30 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e15a      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800158e:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f0      	beq.n	800157c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800159a:	2001      	movs	r0, #1
 800159c:	f000 fad8 	bl	8001b50 <RCC_Delay>
 80015a0:	e01c      	b.n	80015dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_RCC_OscConfig+0x274>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a8:	f7ff fb42 	bl	8000c30 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ae:	e00f      	b.n	80015d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b0:	f7ff fb3e 	bl	8000c30 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d908      	bls.n	80015d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e140      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000
 80015c8:	42420000 	.word	0x42420000
 80015cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d0:	4b9e      	ldr	r3, [pc, #632]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1e9      	bne.n	80015b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 80a6 	beq.w	8001736 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ee:	4b97      	ldr	r3, [pc, #604]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10d      	bne.n	8001616 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015fa:	4b94      	ldr	r3, [pc, #592]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	4a93      	ldr	r2, [pc, #588]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 8001600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001604:	61d3      	str	r3, [r2, #28]
 8001606:	4b91      	ldr	r3, [pc, #580]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001612:	2301      	movs	r3, #1
 8001614:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001616:	4b8e      	ldr	r3, [pc, #568]	; (8001850 <HAL_RCC_OscConfig+0x4f8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161e:	2b00      	cmp	r3, #0
 8001620:	d118      	bne.n	8001654 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001622:	4b8b      	ldr	r3, [pc, #556]	; (8001850 <HAL_RCC_OscConfig+0x4f8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a8a      	ldr	r2, [pc, #552]	; (8001850 <HAL_RCC_OscConfig+0x4f8>)
 8001628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800162e:	f7ff faff 	bl	8000c30 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001636:	f7ff fafb 	bl	8000c30 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b64      	cmp	r3, #100	; 0x64
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e0fd      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001648:	4b81      	ldr	r3, [pc, #516]	; (8001850 <HAL_RCC_OscConfig+0x4f8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d106      	bne.n	800166a <HAL_RCC_OscConfig+0x312>
 800165c:	4b7b      	ldr	r3, [pc, #492]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	4a7a      	ldr	r2, [pc, #488]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6213      	str	r3, [r2, #32]
 8001668:	e02d      	b.n	80016c6 <HAL_RCC_OscConfig+0x36e>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d10c      	bne.n	800168c <HAL_RCC_OscConfig+0x334>
 8001672:	4b76      	ldr	r3, [pc, #472]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	4a75      	ldr	r2, [pc, #468]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 8001678:	f023 0301 	bic.w	r3, r3, #1
 800167c:	6213      	str	r3, [r2, #32]
 800167e:	4b73      	ldr	r3, [pc, #460]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	4a72      	ldr	r2, [pc, #456]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 8001684:	f023 0304 	bic.w	r3, r3, #4
 8001688:	6213      	str	r3, [r2, #32]
 800168a:	e01c      	b.n	80016c6 <HAL_RCC_OscConfig+0x36e>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	2b05      	cmp	r3, #5
 8001692:	d10c      	bne.n	80016ae <HAL_RCC_OscConfig+0x356>
 8001694:	4b6d      	ldr	r3, [pc, #436]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	4a6c      	ldr	r2, [pc, #432]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 800169a:	f043 0304 	orr.w	r3, r3, #4
 800169e:	6213      	str	r3, [r2, #32]
 80016a0:	4b6a      	ldr	r3, [pc, #424]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	4a69      	ldr	r2, [pc, #420]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6213      	str	r3, [r2, #32]
 80016ac:	e00b      	b.n	80016c6 <HAL_RCC_OscConfig+0x36e>
 80016ae:	4b67      	ldr	r3, [pc, #412]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	4a66      	ldr	r2, [pc, #408]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	6213      	str	r3, [r2, #32]
 80016ba:	4b64      	ldr	r3, [pc, #400]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	4a63      	ldr	r2, [pc, #396]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 80016c0:	f023 0304 	bic.w	r3, r3, #4
 80016c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d015      	beq.n	80016fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ce:	f7ff faaf 	bl	8000c30 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d4:	e00a      	b.n	80016ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d6:	f7ff faab 	bl	8000c30 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e0ab      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ec:	4b57      	ldr	r3, [pc, #348]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0ee      	beq.n	80016d6 <HAL_RCC_OscConfig+0x37e>
 80016f8:	e014      	b.n	8001724 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fa:	f7ff fa99 	bl	8000c30 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001700:	e00a      	b.n	8001718 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001702:	f7ff fa95 	bl	8000c30 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001710:	4293      	cmp	r3, r2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e095      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001718:	4b4c      	ldr	r3, [pc, #304]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1ee      	bne.n	8001702 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001724:	7dfb      	ldrb	r3, [r7, #23]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d105      	bne.n	8001736 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800172a:	4b48      	ldr	r3, [pc, #288]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	4a47      	ldr	r2, [pc, #284]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 8001730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001734:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 8081 	beq.w	8001842 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001740:	4b42      	ldr	r3, [pc, #264]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 030c 	and.w	r3, r3, #12
 8001748:	2b08      	cmp	r3, #8
 800174a:	d061      	beq.n	8001810 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69db      	ldr	r3, [r3, #28]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d146      	bne.n	80017e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001754:	4b3f      	ldr	r3, [pc, #252]	; (8001854 <HAL_RCC_OscConfig+0x4fc>)
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175a:	f7ff fa69 	bl	8000c30 <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001762:	f7ff fa65 	bl	8000c30 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e067      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001774:	4b35      	ldr	r3, [pc, #212]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1f0      	bne.n	8001762 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001788:	d108      	bne.n	800179c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800178a:	4b30      	ldr	r3, [pc, #192]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	492d      	ldr	r1, [pc, #180]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 8001798:	4313      	orrs	r3, r2
 800179a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800179c:	4b2b      	ldr	r3, [pc, #172]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a19      	ldr	r1, [r3, #32]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ac:	430b      	orrs	r3, r1
 80017ae:	4927      	ldr	r1, [pc, #156]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b4:	4b27      	ldr	r3, [pc, #156]	; (8001854 <HAL_RCC_OscConfig+0x4fc>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ba:	f7ff fa39 	bl	8000c30 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c2:	f7ff fa35 	bl	8000c30 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e037      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017d4:	4b1d      	ldr	r3, [pc, #116]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0f0      	beq.n	80017c2 <HAL_RCC_OscConfig+0x46a>
 80017e0:	e02f      	b.n	8001842 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e2:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <HAL_RCC_OscConfig+0x4fc>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7ff fa22 	bl	8000c30 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f0:	f7ff fa1e 	bl	8000c30 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e020      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x498>
 800180e:	e018      	b.n	8001842 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69db      	ldr	r3, [r3, #28]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d101      	bne.n	800181c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e013      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	429a      	cmp	r2, r3
 800182e:	d106      	bne.n	800183e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183a:	429a      	cmp	r2, r3
 800183c:	d001      	beq.n	8001842 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40021000 	.word	0x40021000
 8001850:	40007000 	.word	0x40007000
 8001854:	42420060 	.word	0x42420060

08001858 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0d0      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800186c:	4b6a      	ldr	r3, [pc, #424]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d910      	bls.n	800189c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187a:	4b67      	ldr	r3, [pc, #412]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f023 0207 	bic.w	r2, r3, #7
 8001882:	4965      	ldr	r1, [pc, #404]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	4313      	orrs	r3, r2
 8001888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800188a:	4b63      	ldr	r3, [pc, #396]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	429a      	cmp	r2, r3
 8001896:	d001      	beq.n	800189c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0b8      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d020      	beq.n	80018ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018b4:	4b59      	ldr	r3, [pc, #356]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	4a58      	ldr	r2, [pc, #352]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80018ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0308 	and.w	r3, r3, #8
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d005      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018cc:	4b53      	ldr	r3, [pc, #332]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	4a52      	ldr	r2, [pc, #328]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80018d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d8:	4b50      	ldr	r3, [pc, #320]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	494d      	ldr	r1, [pc, #308]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d040      	beq.n	8001978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d107      	bne.n	800190e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fe:	4b47      	ldr	r3, [pc, #284]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d115      	bne.n	8001936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e07f      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d107      	bne.n	8001926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001916:	4b41      	ldr	r3, [pc, #260]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d109      	bne.n	8001936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e073      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001926:	4b3d      	ldr	r3, [pc, #244]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e06b      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001936:	4b39      	ldr	r3, [pc, #228]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f023 0203 	bic.w	r2, r3, #3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4936      	ldr	r1, [pc, #216]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 8001944:	4313      	orrs	r3, r2
 8001946:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001948:	f7ff f972 	bl	8000c30 <HAL_GetTick>
 800194c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194e:	e00a      	b.n	8001966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001950:	f7ff f96e 	bl	8000c30 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	f241 3288 	movw	r2, #5000	; 0x1388
 800195e:	4293      	cmp	r3, r2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e053      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001966:	4b2d      	ldr	r3, [pc, #180]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 020c 	and.w	r2, r3, #12
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	429a      	cmp	r2, r3
 8001976:	d1eb      	bne.n	8001950 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001978:	4b27      	ldr	r3, [pc, #156]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d210      	bcs.n	80019a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001986:	4b24      	ldr	r3, [pc, #144]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 0207 	bic.w	r2, r3, #7
 800198e:	4922      	ldr	r1, [pc, #136]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	4313      	orrs	r3, r2
 8001994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001996:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d001      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e032      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d008      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	4916      	ldr	r1, [pc, #88]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d009      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019d2:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	490e      	ldr	r1, [pc, #56]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019e6:	f000 f821 	bl	8001a2c <HAL_RCC_GetSysClockFreq>
 80019ea:	4602      	mov	r2, r0
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	091b      	lsrs	r3, r3, #4
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	490a      	ldr	r1, [pc, #40]	; (8001a20 <HAL_RCC_ClockConfig+0x1c8>)
 80019f8:	5ccb      	ldrb	r3, [r1, r3]
 80019fa:	fa22 f303 	lsr.w	r3, r2, r3
 80019fe:	4a09      	ldr	r2, [pc, #36]	; (8001a24 <HAL_RCC_ClockConfig+0x1cc>)
 8001a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_RCC_ClockConfig+0x1d0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff f8d0 	bl	8000bac <HAL_InitTick>

  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40022000 	.word	0x40022000
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	08003cd8 	.word	0x08003cd8
 8001a24:	20000000 	.word	0x20000000
 8001a28:	20000004 	.word	0x20000004

08001a2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a2c:	b490      	push	{r4, r7}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a32:	4b2a      	ldr	r3, [pc, #168]	; (8001adc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a34:	1d3c      	adds	r4, r7, #4
 8001a36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a3c:	f240 2301 	movw	r3, #513	; 0x201
 8001a40:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
 8001a46:	2300      	movs	r3, #0
 8001a48:	61bb      	str	r3, [r7, #24]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a56:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d002      	beq.n	8001a6c <HAL_RCC_GetSysClockFreq+0x40>
 8001a66:	2b08      	cmp	r3, #8
 8001a68:	d003      	beq.n	8001a72 <HAL_RCC_GetSysClockFreq+0x46>
 8001a6a:	e02d      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a6e:	623b      	str	r3, [r7, #32]
      break;
 8001a70:	e02d      	b.n	8001ace <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	0c9b      	lsrs	r3, r3, #18
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a7e:	4413      	add	r3, r2
 8001a80:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a84:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d013      	beq.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a90:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	0c5b      	lsrs	r3, r3, #17
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001aa4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	4a0e      	ldr	r2, [pc, #56]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aaa:	fb02 f203 	mul.w	r2, r2, r3
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab6:	e004      	b.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	4a0b      	ldr	r2, [pc, #44]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001abc:	fb02 f303 	mul.w	r3, r2, r3
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	623b      	str	r3, [r7, #32]
      break;
 8001ac6:	e002      	b.n	8001ace <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aca:	623b      	str	r3, [r7, #32]
      break;
 8001acc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ace:	6a3b      	ldr	r3, [r7, #32]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3728      	adds	r7, #40	; 0x28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc90      	pop	{r4, r7}
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	08003cc8 	.word	0x08003cc8
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	007a1200 	.word	0x007a1200
 8001ae8:	003d0900 	.word	0x003d0900

08001aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af0:	4b02      	ldr	r3, [pc, #8]	; (8001afc <HAL_RCC_GetHCLKFreq+0x10>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	20000000 	.word	0x20000000

08001b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b04:	f7ff fff2 	bl	8001aec <HAL_RCC_GetHCLKFreq>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	0a1b      	lsrs	r3, r3, #8
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	4903      	ldr	r1, [pc, #12]	; (8001b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b16:	5ccb      	ldrb	r3, [r1, r3]
 8001b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40021000 	.word	0x40021000
 8001b24:	08003ce8 	.word	0x08003ce8

08001b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b2c:	f7ff ffde 	bl	8001aec <HAL_RCC_GetHCLKFreq>
 8001b30:	4602      	mov	r2, r0
 8001b32:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	0adb      	lsrs	r3, r3, #11
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	4903      	ldr	r1, [pc, #12]	; (8001b4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b3e:	5ccb      	ldrb	r3, [r1, r3]
 8001b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	08003ce8 	.word	0x08003ce8

08001b50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <RCC_Delay+0x34>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <RCC_Delay+0x38>)
 8001b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b62:	0a5b      	lsrs	r3, r3, #9
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	fb02 f303 	mul.w	r3, r2, r3
 8001b6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b6c:	bf00      	nop
  }
  while (Delay --);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	1e5a      	subs	r2, r3, #1
 8001b72:	60fa      	str	r2, [r7, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1f9      	bne.n	8001b6c <RCC_Delay+0x1c>
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	20000000 	.word	0x20000000
 8001b88:	10624dd3 	.word	0x10624dd3

08001b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e041      	b.n	8001c22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d106      	bne.n	8001bb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7fe fe88 	bl	80008c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4610      	mov	r0, r2
 8001bcc:	f000 fc8c 	bl	80024e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d001      	beq.n	8001c44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e03a      	b.n	8001cba <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0201 	orr.w	r2, r2, #1
 8001c5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a18      	ldr	r2, [pc, #96]	; (8001cc4 <HAL_TIM_Base_Start_IT+0x98>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d00e      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0x58>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c6e:	d009      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0x58>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a14      	ldr	r2, [pc, #80]	; (8001cc8 <HAL_TIM_Base_Start_IT+0x9c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d004      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0x58>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a13      	ldr	r2, [pc, #76]	; (8001ccc <HAL_TIM_Base_Start_IT+0xa0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d111      	bne.n	8001ca8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2b06      	cmp	r3, #6
 8001c94:	d010      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f042 0201 	orr.w	r2, r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ca6:	e007      	b.n	8001cb8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0201 	orr.w	r2, r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr
 8001cc4:	40012c00 	.word	0x40012c00
 8001cc8:	40000400 	.word	0x40000400
 8001ccc:	40000800 	.word	0x40000800

08001cd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e041      	b.n	8001d66 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d106      	bne.n	8001cfc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f839 	bl	8001d6e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2202      	movs	r2, #2
 8001d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3304      	adds	r3, #4
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4610      	mov	r0, r2
 8001d10:	f000 fbea 	bl	80024e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d109      	bne.n	8001da4 <HAL_TIM_PWM_Start+0x24>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	bf14      	ite	ne
 8001d9c:	2301      	movne	r3, #1
 8001d9e:	2300      	moveq	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	e022      	b.n	8001dea <HAL_TIM_PWM_Start+0x6a>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d109      	bne.n	8001dbe <HAL_TIM_PWM_Start+0x3e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	bf14      	ite	ne
 8001db6:	2301      	movne	r3, #1
 8001db8:	2300      	moveq	r3, #0
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	e015      	b.n	8001dea <HAL_TIM_PWM_Start+0x6a>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d109      	bne.n	8001dd8 <HAL_TIM_PWM_Start+0x58>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	bf14      	ite	ne
 8001dd0:	2301      	movne	r3, #1
 8001dd2:	2300      	moveq	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	e008      	b.n	8001dea <HAL_TIM_PWM_Start+0x6a>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	bf14      	ite	ne
 8001de4:	2301      	movne	r3, #1
 8001de6:	2300      	moveq	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e05e      	b.n	8001eb0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d104      	bne.n	8001e02 <HAL_TIM_PWM_Start+0x82>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e00:	e013      	b.n	8001e2a <HAL_TIM_PWM_Start+0xaa>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d104      	bne.n	8001e12 <HAL_TIM_PWM_Start+0x92>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e10:	e00b      	b.n	8001e2a <HAL_TIM_PWM_Start+0xaa>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d104      	bne.n	8001e22 <HAL_TIM_PWM_Start+0xa2>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e20:	e003      	b.n	8001e2a <HAL_TIM_PWM_Start+0xaa>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2202      	movs	r2, #2
 8001e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	6839      	ldr	r1, [r7, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 fdd8 	bl	80029e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a1e      	ldr	r2, [pc, #120]	; (8001eb8 <HAL_TIM_PWM_Start+0x138>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d107      	bne.n	8001e52 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a18      	ldr	r2, [pc, #96]	; (8001eb8 <HAL_TIM_PWM_Start+0x138>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d00e      	beq.n	8001e7a <HAL_TIM_PWM_Start+0xfa>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e64:	d009      	beq.n	8001e7a <HAL_TIM_PWM_Start+0xfa>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a14      	ldr	r2, [pc, #80]	; (8001ebc <HAL_TIM_PWM_Start+0x13c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d004      	beq.n	8001e7a <HAL_TIM_PWM_Start+0xfa>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a12      	ldr	r2, [pc, #72]	; (8001ec0 <HAL_TIM_PWM_Start+0x140>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d111      	bne.n	8001e9e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2b06      	cmp	r3, #6
 8001e8a:	d010      	beq.n	8001eae <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e9c:	e007      	b.n	8001eae <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f042 0201 	orr.w	r2, r2, #1
 8001eac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40012c00 	.word	0x40012c00
 8001ebc:	40000400 	.word	0x40000400
 8001ec0:	40000800 	.word	0x40000800

08001ec4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	6839      	ldr	r1, [r7, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 fd86 	bl	80029e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a29      	ldr	r2, [pc, #164]	; (8001f88 <HAL_TIM_PWM_Stop+0xc4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d117      	bne.n	8001f16 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6a1a      	ldr	r2, [r3, #32]
 8001eec:	f241 1311 	movw	r3, #4369	; 0x1111
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10f      	bne.n	8001f16 <HAL_TIM_PWM_Stop+0x52>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6a1a      	ldr	r2, [r3, #32]
 8001efc:	f240 4344 	movw	r3, #1092	; 0x444
 8001f00:	4013      	ands	r3, r2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d107      	bne.n	8001f16 <HAL_TIM_PWM_Stop+0x52>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6a1a      	ldr	r2, [r3, #32]
 8001f1c:	f241 1311 	movw	r3, #4369	; 0x1111
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10f      	bne.n	8001f46 <HAL_TIM_PWM_Stop+0x82>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6a1a      	ldr	r2, [r3, #32]
 8001f2c:	f240 4344 	movw	r3, #1092	; 0x444
 8001f30:	4013      	ands	r3, r2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d107      	bne.n	8001f46 <HAL_TIM_PWM_Stop+0x82>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0201 	bic.w	r2, r2, #1
 8001f44:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d104      	bne.n	8001f56 <HAL_TIM_PWM_Stop+0x92>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f54:	e013      	b.n	8001f7e <HAL_TIM_PWM_Stop+0xba>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	d104      	bne.n	8001f66 <HAL_TIM_PWM_Stop+0xa2>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f64:	e00b      	b.n	8001f7e <HAL_TIM_PWM_Stop+0xba>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d104      	bne.n	8001f76 <HAL_TIM_PWM_Stop+0xb2>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f74:	e003      	b.n	8001f7e <HAL_TIM_PWM_Stop+0xba>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40012c00 	.word	0x40012c00

08001f8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d122      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d11b      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0202 	mvn.w	r2, #2
 8001fb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 fa6f 	bl	80024b2 <HAL_TIM_IC_CaptureCallback>
 8001fd4:	e005      	b.n	8001fe2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 fa62 	bl	80024a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 fa71 	bl	80024c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d122      	bne.n	800203c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b04      	cmp	r3, #4
 8002002:	d11b      	bne.n	800203c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 0204 	mvn.w	r2, #4
 800200c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2202      	movs	r2, #2
 8002012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 fa45 	bl	80024b2 <HAL_TIM_IC_CaptureCallback>
 8002028:	e005      	b.n	8002036 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 fa38 	bl	80024a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 fa47 	bl	80024c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b08      	cmp	r3, #8
 8002048:	d122      	bne.n	8002090 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	2b08      	cmp	r3, #8
 8002056:	d11b      	bne.n	8002090 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0208 	mvn.w	r2, #8
 8002060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2204      	movs	r2, #4
 8002066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 fa1b 	bl	80024b2 <HAL_TIM_IC_CaptureCallback>
 800207c:	e005      	b.n	800208a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 fa0e 	bl	80024a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 fa1d 	bl	80024c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	2b10      	cmp	r3, #16
 800209c:	d122      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f003 0310 	and.w	r3, r3, #16
 80020a8:	2b10      	cmp	r3, #16
 80020aa:	d11b      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f06f 0210 	mvn.w	r2, #16
 80020b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2208      	movs	r2, #8
 80020ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f9f1 	bl	80024b2 <HAL_TIM_IC_CaptureCallback>
 80020d0:	e005      	b.n	80020de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f9e4 	bl	80024a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f9f3 	bl	80024c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d10e      	bne.n	8002110 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d107      	bne.n	8002110 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0201 	mvn.w	r2, #1
 8002108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7fe fa84 	bl	8000618 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211a:	2b80      	cmp	r3, #128	; 0x80
 800211c:	d10e      	bne.n	800213c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002128:	2b80      	cmp	r3, #128	; 0x80
 800212a:	d107      	bne.n	800213c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 fce1 	bl	8002afe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002146:	2b40      	cmp	r3, #64	; 0x40
 8002148:	d10e      	bne.n	8002168 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002154:	2b40      	cmp	r3, #64	; 0x40
 8002156:	d107      	bne.n	8002168 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f9b7 	bl	80024d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f003 0320 	and.w	r3, r3, #32
 8002172:	2b20      	cmp	r3, #32
 8002174:	d10e      	bne.n	8002194 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f003 0320 	and.w	r3, r3, #32
 8002180:	2b20      	cmp	r3, #32
 8002182:	d107      	bne.n	8002194 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f06f 0220 	mvn.w	r2, #32
 800218c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 fcac 	bl	8002aec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e0ac      	b.n	8002310 <HAL_TIM_PWM_ConfigChannel+0x174>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b0c      	cmp	r3, #12
 80021c2:	f200 809f 	bhi.w	8002304 <HAL_TIM_PWM_ConfigChannel+0x168>
 80021c6:	a201      	add	r2, pc, #4	; (adr r2, 80021cc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80021c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021cc:	08002201 	.word	0x08002201
 80021d0:	08002305 	.word	0x08002305
 80021d4:	08002305 	.word	0x08002305
 80021d8:	08002305 	.word	0x08002305
 80021dc:	08002241 	.word	0x08002241
 80021e0:	08002305 	.word	0x08002305
 80021e4:	08002305 	.word	0x08002305
 80021e8:	08002305 	.word	0x08002305
 80021ec:	08002283 	.word	0x08002283
 80021f0:	08002305 	.word	0x08002305
 80021f4:	08002305 	.word	0x08002305
 80021f8:	08002305 	.word	0x08002305
 80021fc:	080022c3 	.word	0x080022c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	4618      	mov	r0, r3
 8002208:	f000 f9d0 	bl	80025ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	699a      	ldr	r2, [r3, #24]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0208 	orr.w	r2, r2, #8
 800221a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	699a      	ldr	r2, [r3, #24]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0204 	bic.w	r2, r2, #4
 800222a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6999      	ldr	r1, [r3, #24]
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	691a      	ldr	r2, [r3, #16]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	619a      	str	r2, [r3, #24]
      break;
 800223e:	e062      	b.n	8002306 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68b9      	ldr	r1, [r7, #8]
 8002246:	4618      	mov	r0, r3
 8002248:	f000 fa16 	bl	8002678 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699a      	ldr	r2, [r3, #24]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800225a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699a      	ldr	r2, [r3, #24]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800226a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6999      	ldr	r1, [r3, #24]
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	021a      	lsls	r2, r3, #8
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	619a      	str	r2, [r3, #24]
      break;
 8002280:	e041      	b.n	8002306 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68b9      	ldr	r1, [r7, #8]
 8002288:	4618      	mov	r0, r3
 800228a:	f000 fa5f 	bl	800274c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	69da      	ldr	r2, [r3, #28]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f042 0208 	orr.w	r2, r2, #8
 800229c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	69da      	ldr	r2, [r3, #28]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0204 	bic.w	r2, r2, #4
 80022ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	69d9      	ldr	r1, [r3, #28]
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	61da      	str	r2, [r3, #28]
      break;
 80022c0:	e021      	b.n	8002306 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68b9      	ldr	r1, [r7, #8]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 faa9 	bl	8002820 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	69da      	ldr	r2, [r3, #28]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	69da      	ldr	r2, [r3, #28]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	69d9      	ldr	r1, [r3, #28]
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	021a      	lsls	r2, r3, #8
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	61da      	str	r2, [r3, #28]
      break;
 8002302:	e000      	b.n	8002306 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002304:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_TIM_ConfigClockSource+0x18>
 800232c:	2302      	movs	r3, #2
 800232e:	e0b3      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x180>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2202      	movs	r2, #2
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800234e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002356:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002368:	d03e      	beq.n	80023e8 <HAL_TIM_ConfigClockSource+0xd0>
 800236a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800236e:	f200 8087 	bhi.w	8002480 <HAL_TIM_ConfigClockSource+0x168>
 8002372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002376:	f000 8085 	beq.w	8002484 <HAL_TIM_ConfigClockSource+0x16c>
 800237a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800237e:	d87f      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x168>
 8002380:	2b70      	cmp	r3, #112	; 0x70
 8002382:	d01a      	beq.n	80023ba <HAL_TIM_ConfigClockSource+0xa2>
 8002384:	2b70      	cmp	r3, #112	; 0x70
 8002386:	d87b      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x168>
 8002388:	2b60      	cmp	r3, #96	; 0x60
 800238a:	d050      	beq.n	800242e <HAL_TIM_ConfigClockSource+0x116>
 800238c:	2b60      	cmp	r3, #96	; 0x60
 800238e:	d877      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x168>
 8002390:	2b50      	cmp	r3, #80	; 0x50
 8002392:	d03c      	beq.n	800240e <HAL_TIM_ConfigClockSource+0xf6>
 8002394:	2b50      	cmp	r3, #80	; 0x50
 8002396:	d873      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x168>
 8002398:	2b40      	cmp	r3, #64	; 0x40
 800239a:	d058      	beq.n	800244e <HAL_TIM_ConfigClockSource+0x136>
 800239c:	2b40      	cmp	r3, #64	; 0x40
 800239e:	d86f      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x168>
 80023a0:	2b30      	cmp	r3, #48	; 0x30
 80023a2:	d064      	beq.n	800246e <HAL_TIM_ConfigClockSource+0x156>
 80023a4:	2b30      	cmp	r3, #48	; 0x30
 80023a6:	d86b      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x168>
 80023a8:	2b20      	cmp	r3, #32
 80023aa:	d060      	beq.n	800246e <HAL_TIM_ConfigClockSource+0x156>
 80023ac:	2b20      	cmp	r3, #32
 80023ae:	d867      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x168>
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d05c      	beq.n	800246e <HAL_TIM_ConfigClockSource+0x156>
 80023b4:	2b10      	cmp	r3, #16
 80023b6:	d05a      	beq.n	800246e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80023b8:	e062      	b.n	8002480 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	6899      	ldr	r1, [r3, #8]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f000 faee 	bl	80029aa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	609a      	str	r2, [r3, #8]
      break;
 80023e6:	e04e      	b.n	8002486 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	6899      	ldr	r1, [r3, #8]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f000 fad7 	bl	80029aa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800240a:	609a      	str	r2, [r3, #8]
      break;
 800240c:	e03b      	b.n	8002486 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6859      	ldr	r1, [r3, #4]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	461a      	mov	r2, r3
 800241c:	f000 fa4e 	bl	80028bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2150      	movs	r1, #80	; 0x50
 8002426:	4618      	mov	r0, r3
 8002428:	f000 faa5 	bl	8002976 <TIM_ITRx_SetConfig>
      break;
 800242c:	e02b      	b.n	8002486 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6818      	ldr	r0, [r3, #0]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	6859      	ldr	r1, [r3, #4]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	461a      	mov	r2, r3
 800243c:	f000 fa6c 	bl	8002918 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2160      	movs	r1, #96	; 0x60
 8002446:	4618      	mov	r0, r3
 8002448:	f000 fa95 	bl	8002976 <TIM_ITRx_SetConfig>
      break;
 800244c:	e01b      	b.n	8002486 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	6859      	ldr	r1, [r3, #4]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	461a      	mov	r2, r3
 800245c:	f000 fa2e 	bl	80028bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2140      	movs	r1, #64	; 0x40
 8002466:	4618      	mov	r0, r3
 8002468:	f000 fa85 	bl	8002976 <TIM_ITRx_SetConfig>
      break;
 800246c:	e00b      	b.n	8002486 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4619      	mov	r1, r3
 8002478:	4610      	mov	r0, r2
 800247a:	f000 fa7c 	bl	8002976 <TIM_ITRx_SetConfig>
        break;
 800247e:	e002      	b.n	8002486 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002480:	bf00      	nop
 8002482:	e000      	b.n	8002486 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002484:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr

080024b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr

080024c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a29      	ldr	r2, [pc, #164]	; (80025a0 <TIM_Base_SetConfig+0xb8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d00b      	beq.n	8002518 <TIM_Base_SetConfig+0x30>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002506:	d007      	beq.n	8002518 <TIM_Base_SetConfig+0x30>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a26      	ldr	r2, [pc, #152]	; (80025a4 <TIM_Base_SetConfig+0xbc>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d003      	beq.n	8002518 <TIM_Base_SetConfig+0x30>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a25      	ldr	r2, [pc, #148]	; (80025a8 <TIM_Base_SetConfig+0xc0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d108      	bne.n	800252a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800251e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4313      	orrs	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a1c      	ldr	r2, [pc, #112]	; (80025a0 <TIM_Base_SetConfig+0xb8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00b      	beq.n	800254a <TIM_Base_SetConfig+0x62>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002538:	d007      	beq.n	800254a <TIM_Base_SetConfig+0x62>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a19      	ldr	r2, [pc, #100]	; (80025a4 <TIM_Base_SetConfig+0xbc>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d003      	beq.n	800254a <TIM_Base_SetConfig+0x62>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a18      	ldr	r2, [pc, #96]	; (80025a8 <TIM_Base_SetConfig+0xc0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d108      	bne.n	800255c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4313      	orrs	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	4313      	orrs	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a07      	ldr	r2, [pc, #28]	; (80025a0 <TIM_Base_SetConfig+0xb8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d103      	bne.n	8002590 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	615a      	str	r2, [r3, #20]
}
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	40012c00 	.word	0x40012c00
 80025a4:	40000400 	.word	0x40000400
 80025a8:	40000800 	.word	0x40000800

080025ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	f023 0201 	bic.w	r2, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f023 0303 	bic.w	r3, r3, #3
 80025e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f023 0302 	bic.w	r3, r3, #2
 80025f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a1c      	ldr	r2, [pc, #112]	; (8002674 <TIM_OC1_SetConfig+0xc8>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d10c      	bne.n	8002622 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f023 0308 	bic.w	r3, r3, #8
 800260e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	4313      	orrs	r3, r2
 8002618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f023 0304 	bic.w	r3, r3, #4
 8002620:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a13      	ldr	r2, [pc, #76]	; (8002674 <TIM_OC1_SetConfig+0xc8>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d111      	bne.n	800264e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002630:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002638:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	621a      	str	r2, [r3, #32]
}
 8002668:	bf00      	nop
 800266a:	371c      	adds	r7, #28
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40012c00 	.word	0x40012c00

08002678 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002678:	b480      	push	{r7}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	f023 0210 	bic.w	r2, r3, #16
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	021b      	lsls	r3, r3, #8
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f023 0320 	bic.w	r3, r3, #32
 80026c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a1d      	ldr	r2, [pc, #116]	; (8002748 <TIM_OC2_SetConfig+0xd0>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d10d      	bne.n	80026f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a14      	ldr	r2, [pc, #80]	; (8002748 <TIM_OC2_SetConfig+0xd0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d113      	bne.n	8002724 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002702:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800270a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	621a      	str	r2, [r3, #32]
}
 800273e:	bf00      	nop
 8002740:	371c      	adds	r7, #28
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr
 8002748:	40012c00 	.word	0x40012c00

0800274c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800274c:	b480      	push	{r7}
 800274e:	b087      	sub	sp, #28
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800277a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f023 0303 	bic.w	r3, r3, #3
 8002782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	4313      	orrs	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	021b      	lsls	r3, r3, #8
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	4313      	orrs	r3, r2
 80027a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a1d      	ldr	r2, [pc, #116]	; (800281c <TIM_OC3_SetConfig+0xd0>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d10d      	bne.n	80027c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	021b      	lsls	r3, r3, #8
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a14      	ldr	r2, [pc, #80]	; (800281c <TIM_OC3_SetConfig+0xd0>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d113      	bne.n	80027f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	621a      	str	r2, [r3, #32]
}
 8002810:	bf00      	nop
 8002812:	371c      	adds	r7, #28
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40012c00 	.word	0x40012c00

08002820 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800284e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	021b      	lsls	r3, r3, #8
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	4313      	orrs	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800286a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	031b      	lsls	r3, r3, #12
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a0f      	ldr	r2, [pc, #60]	; (80028b8 <TIM_OC4_SetConfig+0x98>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d109      	bne.n	8002894 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002886:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	019b      	lsls	r3, r3, #6
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4313      	orrs	r3, r2
 8002892:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	621a      	str	r2, [r3, #32]
}
 80028ae:	bf00      	nop
 80028b0:	371c      	adds	r7, #28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	40012c00 	.word	0x40012c00

080028bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	f023 0201 	bic.w	r2, r3, #1
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f023 030a 	bic.w	r3, r3, #10
 80028f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	4313      	orrs	r3, r2
 8002900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	621a      	str	r2, [r3, #32]
}
 800290e:	bf00      	nop
 8002910:	371c      	adds	r7, #28
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	f023 0210 	bic.w	r2, r3, #16
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002942:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	031b      	lsls	r3, r3, #12
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	4313      	orrs	r3, r2
 800294c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002954:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	621a      	str	r2, [r3, #32]
}
 800296c:	bf00      	nop
 800296e:	371c      	adds	r7, #28
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002976:	b480      	push	{r7}
 8002978:	b085      	sub	sp, #20
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800298c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4313      	orrs	r3, r2
 8002994:	f043 0307 	orr.w	r3, r3, #7
 8002998:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	609a      	str	r2, [r3, #8]
}
 80029a0:	bf00      	nop
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr

080029aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b087      	sub	sp, #28
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
 80029b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	021a      	lsls	r2, r3, #8
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	431a      	orrs	r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	609a      	str	r2, [r3, #8]
}
 80029de:	bf00      	nop
 80029e0:	371c      	adds	r7, #28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f003 031f 	and.w	r3, r3, #31
 80029fa:	2201      	movs	r2, #1
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a1a      	ldr	r2, [r3, #32]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a1a      	ldr	r2, [r3, #32]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f003 031f 	and.w	r3, r3, #31
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a20:	431a      	orrs	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	621a      	str	r2, [r3, #32]
}
 8002a26:	bf00      	nop
 8002a28:	371c      	adds	r7, #28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e046      	b.n	8002ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a16      	ldr	r2, [pc, #88]	; (8002ae0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d00e      	beq.n	8002aaa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a94:	d009      	beq.n	8002aaa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a12      	ldr	r2, [pc, #72]	; (8002ae4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d004      	beq.n	8002aaa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a10      	ldr	r2, [pc, #64]	; (8002ae8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ab0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr
 8002ae0:	40012c00 	.word	0x40012c00
 8002ae4:	40000400 	.word	0x40000400
 8002ae8:	40000800 	.word	0x40000800

08002aec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr

08002afe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr

08002b10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e03f      	b.n	8002ba2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d106      	bne.n	8002b3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7fd ff30 	bl	800099c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2224      	movs	r2, #36	; 0x24
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 fb8d 	bl	8003274 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	691a      	ldr	r2, [r3, #16]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695a      	ldr	r2, [r3, #20]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b085      	sub	sp, #20
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b20      	cmp	r3, #32
 8002bc2:	d130      	bne.n	8002c26 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <HAL_UART_Transmit_IT+0x26>
 8002bca:	88fb      	ldrh	r3, [r7, #6]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e029      	b.n	8002c28 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d101      	bne.n	8002be2 <HAL_UART_Transmit_IT+0x38>
 8002bde:	2302      	movs	r3, #2
 8002be0:	e022      	b.n	8002c28 <HAL_UART_Transmit_IT+0x7e>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	88fa      	ldrh	r2, [r7, #6]
 8002bf4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	88fa      	ldrh	r2, [r7, #6]
 8002bfa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2221      	movs	r2, #33	; 0x21
 8002c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c20:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	e000      	b.n	8002c28 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002c26:	2302      	movs	r3, #2
  }
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr
	...

08002c34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	; 0x28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10d      	bne.n	8002c86 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	f003 0320 	and.w	r3, r3, #32
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d008      	beq.n	8002c86 <HAL_UART_IRQHandler+0x52>
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	f003 0320 	and.w	r3, r3, #32
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 fa4f 	bl	8003122 <UART_Receive_IT>
      return;
 8002c84:	e17b      	b.n	8002f7e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 80b1 	beq.w	8002df0 <HAL_UART_IRQHandler+0x1bc>
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d105      	bne.n	8002ca4 <HAL_UART_IRQHandler+0x70>
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 80a6 	beq.w	8002df0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00a      	beq.n	8002cc4 <HAL_UART_IRQHandler+0x90>
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	f043 0201 	orr.w	r2, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00a      	beq.n	8002ce4 <HAL_UART_IRQHandler+0xb0>
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	f043 0202 	orr.w	r2, r3, #2
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <HAL_UART_IRQHandler+0xd0>
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d005      	beq.n	8002d04 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	f043 0204 	orr.w	r2, r3, #4
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00f      	beq.n	8002d2e <HAL_UART_IRQHandler+0xfa>
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d104      	bne.n	8002d22 <HAL_UART_IRQHandler+0xee>
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d005      	beq.n	8002d2e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f043 0208 	orr.w	r2, r3, #8
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 811e 	beq.w	8002f74 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d007      	beq.n	8002d52 <HAL_UART_IRQHandler+0x11e>
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f9e8 	bl	8003122 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	bf14      	ite	ne
 8002d60:	2301      	movne	r3, #1
 8002d62:	2300      	moveq	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d102      	bne.n	8002d7a <HAL_UART_IRQHandler+0x146>
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d031      	beq.n	8002dde <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f92a 	bl	8002fd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d023      	beq.n	8002dd6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	695a      	ldr	r2, [r3, #20]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d9c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d013      	beq.n	8002dce <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002daa:	4a76      	ldr	r2, [pc, #472]	; (8002f84 <HAL_UART_IRQHandler+0x350>)
 8002dac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fe f88e 	bl	8000ed4 <HAL_DMA_Abort_IT>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d016      	beq.n	8002dec <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002dc8:	4610      	mov	r0, r2
 8002dca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dcc:	e00e      	b.n	8002dec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f8ec 	bl	8002fac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd4:	e00a      	b.n	8002dec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f8e8 	bl	8002fac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ddc:	e006      	b.n	8002dec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f8e4 	bl	8002fac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002dea:	e0c3      	b.n	8002f74 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dec:	bf00      	nop
    return;
 8002dee:	e0c1      	b.n	8002f74 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	f040 80a1 	bne.w	8002f3c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 809b 	beq.w	8002f3c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	f003 0310 	and.w	r3, r3, #16
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 8095 	beq.w	8002f3c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d04e      	beq.n	8002ed4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002e40:	8a3b      	ldrh	r3, [r7, #16]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 8098 	beq.w	8002f78 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e4c:	8a3a      	ldrh	r2, [r7, #16]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	f080 8092 	bcs.w	8002f78 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	8a3a      	ldrh	r2, [r7, #16]
 8002e58:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	d02b      	beq.n	8002ebc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e72:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	695a      	ldr	r2, [r3, #20]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0201 	bic.w	r2, r2, #1
 8002e82:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695a      	ldr	r2, [r3, #20]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e92:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0210 	bic.w	r2, r2, #16
 8002eb0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fd ffd1 	bl	8000e5e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	4619      	mov	r1, r3
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f876 	bl	8002fbe <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002ed2:	e051      	b.n	8002f78 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d047      	beq.n	8002f7c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002eec:	8a7b      	ldrh	r3, [r7, #18]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d044      	beq.n	8002f7c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f00:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695a      	ldr	r2, [r3, #20]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0201 	bic.w	r2, r2, #1
 8002f10:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0210 	bic.w	r2, r2, #16
 8002f2e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f30:	8a7b      	ldrh	r3, [r7, #18]
 8002f32:	4619      	mov	r1, r3
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 f842 	bl	8002fbe <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002f3a:	e01f      	b.n	8002f7c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d008      	beq.n	8002f58 <HAL_UART_IRQHandler+0x324>
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f87f 	bl	8003054 <UART_Transmit_IT>
    return;
 8002f56:	e012      	b.n	8002f7e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00d      	beq.n	8002f7e <HAL_UART_IRQHandler+0x34a>
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d008      	beq.n	8002f7e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f8c0 	bl	80030f2 <UART_EndTransmit_IT>
    return;
 8002f72:	e004      	b.n	8002f7e <HAL_UART_IRQHandler+0x34a>
    return;
 8002f74:	bf00      	nop
 8002f76:	e002      	b.n	8002f7e <HAL_UART_IRQHandler+0x34a>
      return;
 8002f78:	bf00      	nop
 8002f7a:	e000      	b.n	8002f7e <HAL_UART_IRQHandler+0x34a>
      return;
 8002f7c:	bf00      	nop
  }
}
 8002f7e:	3728      	adds	r7, #40	; 0x28
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	0800302d 	.word	0x0800302d

08002f88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr

08002f9a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr

08002fac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr

08002fbe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr

08002fd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002fea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695a      	ldr	r2, [r3, #20]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0201 	bic.w	r2, r2, #1
 8002ffa:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003000:	2b01      	cmp	r3, #1
 8003002:	d107      	bne.n	8003014 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0210 	bic.w	r2, r2, #16
 8003012:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr

0800302c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f7ff ffb0 	bl	8002fac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800304c:	bf00      	nop
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b21      	cmp	r3, #33	; 0x21
 8003066:	d13e      	bne.n	80030e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003070:	d114      	bne.n	800309c <UART_Transmit_IT+0x48>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d110      	bne.n	800309c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	461a      	mov	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800308e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	1c9a      	adds	r2, r3, #2
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	621a      	str	r2, [r3, #32]
 800309a:	e008      	b.n	80030ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	1c59      	adds	r1, r3, #1
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6211      	str	r1, [r2, #32]
 80030a6:	781a      	ldrb	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	4619      	mov	r1, r3
 80030bc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10f      	bne.n	80030e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	e000      	b.n	80030e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80030e6:	2302      	movs	r3, #2
  }
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc80      	pop	{r7}
 80030f0:	4770      	bx	lr

080030f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003108:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2220      	movs	r2, #32
 800310e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7ff ff38 	bl	8002f88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b086      	sub	sp, #24
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b22      	cmp	r3, #34	; 0x22
 8003134:	f040 8099 	bne.w	800326a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003140:	d117      	bne.n	8003172 <UART_Receive_IT+0x50>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d113      	bne.n	8003172 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003152:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	b29b      	uxth	r3, r3
 800315c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003160:	b29a      	uxth	r2, r3
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316a:	1c9a      	adds	r2, r3, #2
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	629a      	str	r2, [r3, #40]	; 0x28
 8003170:	e026      	b.n	80031c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003176:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003178:	2300      	movs	r3, #0
 800317a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003184:	d007      	beq.n	8003196 <UART_Receive_IT+0x74>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10a      	bne.n	80031a4 <UART_Receive_IT+0x82>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	b2da      	uxtb	r2, r3
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	701a      	strb	r2, [r3, #0]
 80031a2:	e008      	b.n	80031b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	1c5a      	adds	r2, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	4619      	mov	r1, r3
 80031ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d148      	bne.n	8003266 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0220 	bic.w	r2, r2, #32
 80031e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695a      	ldr	r2, [r3, #20]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0201 	bic.w	r2, r2, #1
 8003202:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003210:	2b01      	cmp	r3, #1
 8003212:	d123      	bne.n	800325c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0210 	bic.w	r2, r2, #16
 8003228:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0310 	and.w	r3, r3, #16
 8003234:	2b10      	cmp	r3, #16
 8003236:	d10a      	bne.n	800324e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003238:	2300      	movs	r3, #0
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003252:	4619      	mov	r1, r3
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff feb2 	bl	8002fbe <HAL_UARTEx_RxEventCallback>
 800325a:	e002      	b.n	8003262 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7ff fe9c 	bl	8002f9a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	e002      	b.n	800326c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	e000      	b.n	800326c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800326a:	2302      	movs	r3, #2
  }
}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80032ae:	f023 030c 	bic.w	r3, r3, #12
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	68b9      	ldr	r1, [r7, #8]
 80032b8:	430b      	orrs	r3, r1
 80032ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699a      	ldr	r2, [r3, #24]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a2c      	ldr	r2, [pc, #176]	; (8003388 <UART_SetConfig+0x114>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d103      	bne.n	80032e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032dc:	f7fe fc24 	bl	8001b28 <HAL_RCC_GetPCLK2Freq>
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	e002      	b.n	80032ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032e4:	f7fe fc0c 	bl	8001b00 <HAL_RCC_GetPCLK1Freq>
 80032e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	009a      	lsls	r2, r3, #2
 80032f4:	441a      	add	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003300:	4a22      	ldr	r2, [pc, #136]	; (800338c <UART_SetConfig+0x118>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	0119      	lsls	r1, r3, #4
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	4613      	mov	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	009a      	lsls	r2, r3, #2
 8003314:	441a      	add	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003320:	4b1a      	ldr	r3, [pc, #104]	; (800338c <UART_SetConfig+0x118>)
 8003322:	fba3 0302 	umull	r0, r3, r3, r2
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	2064      	movs	r0, #100	; 0x64
 800332a:	fb00 f303 	mul.w	r3, r0, r3
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	3332      	adds	r3, #50	; 0x32
 8003334:	4a15      	ldr	r2, [pc, #84]	; (800338c <UART_SetConfig+0x118>)
 8003336:	fba2 2303 	umull	r2, r3, r2, r3
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003340:	4419      	add	r1, r3
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	009a      	lsls	r2, r3, #2
 800334c:	441a      	add	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	fbb2 f2f3 	udiv	r2, r2, r3
 8003358:	4b0c      	ldr	r3, [pc, #48]	; (800338c <UART_SetConfig+0x118>)
 800335a:	fba3 0302 	umull	r0, r3, r3, r2
 800335e:	095b      	lsrs	r3, r3, #5
 8003360:	2064      	movs	r0, #100	; 0x64
 8003362:	fb00 f303 	mul.w	r3, r0, r3
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	3332      	adds	r3, #50	; 0x32
 800336c:	4a07      	ldr	r2, [pc, #28]	; (800338c <UART_SetConfig+0x118>)
 800336e:	fba2 2303 	umull	r2, r3, r2, r3
 8003372:	095b      	lsrs	r3, r3, #5
 8003374:	f003 020f 	and.w	r2, r3, #15
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	440a      	add	r2, r1
 800337e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003380:	bf00      	nop
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40013800 	.word	0x40013800
 800338c:	51eb851f 	.word	0x51eb851f

08003390 <__errno>:
 8003390:	4b01      	ldr	r3, [pc, #4]	; (8003398 <__errno+0x8>)
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	2000000c 	.word	0x2000000c

0800339c <__libc_init_array>:
 800339c:	b570      	push	{r4, r5, r6, lr}
 800339e:	2600      	movs	r6, #0
 80033a0:	4d0c      	ldr	r5, [pc, #48]	; (80033d4 <__libc_init_array+0x38>)
 80033a2:	4c0d      	ldr	r4, [pc, #52]	; (80033d8 <__libc_init_array+0x3c>)
 80033a4:	1b64      	subs	r4, r4, r5
 80033a6:	10a4      	asrs	r4, r4, #2
 80033a8:	42a6      	cmp	r6, r4
 80033aa:	d109      	bne.n	80033c0 <__libc_init_array+0x24>
 80033ac:	f000 fc70 	bl	8003c90 <_init>
 80033b0:	2600      	movs	r6, #0
 80033b2:	4d0a      	ldr	r5, [pc, #40]	; (80033dc <__libc_init_array+0x40>)
 80033b4:	4c0a      	ldr	r4, [pc, #40]	; (80033e0 <__libc_init_array+0x44>)
 80033b6:	1b64      	subs	r4, r4, r5
 80033b8:	10a4      	asrs	r4, r4, #2
 80033ba:	42a6      	cmp	r6, r4
 80033bc:	d105      	bne.n	80033ca <__libc_init_array+0x2e>
 80033be:	bd70      	pop	{r4, r5, r6, pc}
 80033c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033c4:	4798      	blx	r3
 80033c6:	3601      	adds	r6, #1
 80033c8:	e7ee      	b.n	80033a8 <__libc_init_array+0xc>
 80033ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80033ce:	4798      	blx	r3
 80033d0:	3601      	adds	r6, #1
 80033d2:	e7f2      	b.n	80033ba <__libc_init_array+0x1e>
 80033d4:	08003d24 	.word	0x08003d24
 80033d8:	08003d24 	.word	0x08003d24
 80033dc:	08003d24 	.word	0x08003d24
 80033e0:	08003d28 	.word	0x08003d28

080033e4 <memset>:
 80033e4:	4603      	mov	r3, r0
 80033e6:	4402      	add	r2, r0
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d100      	bne.n	80033ee <memset+0xa>
 80033ec:	4770      	bx	lr
 80033ee:	f803 1b01 	strb.w	r1, [r3], #1
 80033f2:	e7f9      	b.n	80033e8 <memset+0x4>

080033f4 <sniprintf>:
 80033f4:	b40c      	push	{r2, r3}
 80033f6:	b530      	push	{r4, r5, lr}
 80033f8:	4b17      	ldr	r3, [pc, #92]	; (8003458 <sniprintf+0x64>)
 80033fa:	1e0c      	subs	r4, r1, #0
 80033fc:	681d      	ldr	r5, [r3, #0]
 80033fe:	b09d      	sub	sp, #116	; 0x74
 8003400:	da08      	bge.n	8003414 <sniprintf+0x20>
 8003402:	238b      	movs	r3, #139	; 0x8b
 8003404:	f04f 30ff 	mov.w	r0, #4294967295
 8003408:	602b      	str	r3, [r5, #0]
 800340a:	b01d      	add	sp, #116	; 0x74
 800340c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003410:	b002      	add	sp, #8
 8003412:	4770      	bx	lr
 8003414:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003418:	f8ad 3014 	strh.w	r3, [sp, #20]
 800341c:	bf0c      	ite	eq
 800341e:	4623      	moveq	r3, r4
 8003420:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003424:	9304      	str	r3, [sp, #16]
 8003426:	9307      	str	r3, [sp, #28]
 8003428:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800342c:	9002      	str	r0, [sp, #8]
 800342e:	9006      	str	r0, [sp, #24]
 8003430:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003434:	4628      	mov	r0, r5
 8003436:	ab21      	add	r3, sp, #132	; 0x84
 8003438:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800343a:	a902      	add	r1, sp, #8
 800343c:	9301      	str	r3, [sp, #4]
 800343e:	f000 f869 	bl	8003514 <_svfiprintf_r>
 8003442:	1c43      	adds	r3, r0, #1
 8003444:	bfbc      	itt	lt
 8003446:	238b      	movlt	r3, #139	; 0x8b
 8003448:	602b      	strlt	r3, [r5, #0]
 800344a:	2c00      	cmp	r4, #0
 800344c:	d0dd      	beq.n	800340a <sniprintf+0x16>
 800344e:	2200      	movs	r2, #0
 8003450:	9b02      	ldr	r3, [sp, #8]
 8003452:	701a      	strb	r2, [r3, #0]
 8003454:	e7d9      	b.n	800340a <sniprintf+0x16>
 8003456:	bf00      	nop
 8003458:	2000000c 	.word	0x2000000c

0800345c <__ssputs_r>:
 800345c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003460:	688e      	ldr	r6, [r1, #8]
 8003462:	4682      	mov	sl, r0
 8003464:	429e      	cmp	r6, r3
 8003466:	460c      	mov	r4, r1
 8003468:	4690      	mov	r8, r2
 800346a:	461f      	mov	r7, r3
 800346c:	d838      	bhi.n	80034e0 <__ssputs_r+0x84>
 800346e:	898a      	ldrh	r2, [r1, #12]
 8003470:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003474:	d032      	beq.n	80034dc <__ssputs_r+0x80>
 8003476:	6825      	ldr	r5, [r4, #0]
 8003478:	6909      	ldr	r1, [r1, #16]
 800347a:	3301      	adds	r3, #1
 800347c:	eba5 0901 	sub.w	r9, r5, r1
 8003480:	6965      	ldr	r5, [r4, #20]
 8003482:	444b      	add	r3, r9
 8003484:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003488:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800348c:	106d      	asrs	r5, r5, #1
 800348e:	429d      	cmp	r5, r3
 8003490:	bf38      	it	cc
 8003492:	461d      	movcc	r5, r3
 8003494:	0553      	lsls	r3, r2, #21
 8003496:	d531      	bpl.n	80034fc <__ssputs_r+0xa0>
 8003498:	4629      	mov	r1, r5
 800349a:	f000 fb53 	bl	8003b44 <_malloc_r>
 800349e:	4606      	mov	r6, r0
 80034a0:	b950      	cbnz	r0, 80034b8 <__ssputs_r+0x5c>
 80034a2:	230c      	movs	r3, #12
 80034a4:	f04f 30ff 	mov.w	r0, #4294967295
 80034a8:	f8ca 3000 	str.w	r3, [sl]
 80034ac:	89a3      	ldrh	r3, [r4, #12]
 80034ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034b2:	81a3      	strh	r3, [r4, #12]
 80034b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034b8:	464a      	mov	r2, r9
 80034ba:	6921      	ldr	r1, [r4, #16]
 80034bc:	f000 face 	bl	8003a5c <memcpy>
 80034c0:	89a3      	ldrh	r3, [r4, #12]
 80034c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80034c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ca:	81a3      	strh	r3, [r4, #12]
 80034cc:	6126      	str	r6, [r4, #16]
 80034ce:	444e      	add	r6, r9
 80034d0:	6026      	str	r6, [r4, #0]
 80034d2:	463e      	mov	r6, r7
 80034d4:	6165      	str	r5, [r4, #20]
 80034d6:	eba5 0509 	sub.w	r5, r5, r9
 80034da:	60a5      	str	r5, [r4, #8]
 80034dc:	42be      	cmp	r6, r7
 80034de:	d900      	bls.n	80034e2 <__ssputs_r+0x86>
 80034e0:	463e      	mov	r6, r7
 80034e2:	4632      	mov	r2, r6
 80034e4:	4641      	mov	r1, r8
 80034e6:	6820      	ldr	r0, [r4, #0]
 80034e8:	f000 fac6 	bl	8003a78 <memmove>
 80034ec:	68a3      	ldr	r3, [r4, #8]
 80034ee:	6822      	ldr	r2, [r4, #0]
 80034f0:	1b9b      	subs	r3, r3, r6
 80034f2:	4432      	add	r2, r6
 80034f4:	2000      	movs	r0, #0
 80034f6:	60a3      	str	r3, [r4, #8]
 80034f8:	6022      	str	r2, [r4, #0]
 80034fa:	e7db      	b.n	80034b4 <__ssputs_r+0x58>
 80034fc:	462a      	mov	r2, r5
 80034fe:	f000 fb7b 	bl	8003bf8 <_realloc_r>
 8003502:	4606      	mov	r6, r0
 8003504:	2800      	cmp	r0, #0
 8003506:	d1e1      	bne.n	80034cc <__ssputs_r+0x70>
 8003508:	4650      	mov	r0, sl
 800350a:	6921      	ldr	r1, [r4, #16]
 800350c:	f000 face 	bl	8003aac <_free_r>
 8003510:	e7c7      	b.n	80034a2 <__ssputs_r+0x46>
	...

08003514 <_svfiprintf_r>:
 8003514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003518:	4698      	mov	r8, r3
 800351a:	898b      	ldrh	r3, [r1, #12]
 800351c:	4607      	mov	r7, r0
 800351e:	061b      	lsls	r3, r3, #24
 8003520:	460d      	mov	r5, r1
 8003522:	4614      	mov	r4, r2
 8003524:	b09d      	sub	sp, #116	; 0x74
 8003526:	d50e      	bpl.n	8003546 <_svfiprintf_r+0x32>
 8003528:	690b      	ldr	r3, [r1, #16]
 800352a:	b963      	cbnz	r3, 8003546 <_svfiprintf_r+0x32>
 800352c:	2140      	movs	r1, #64	; 0x40
 800352e:	f000 fb09 	bl	8003b44 <_malloc_r>
 8003532:	6028      	str	r0, [r5, #0]
 8003534:	6128      	str	r0, [r5, #16]
 8003536:	b920      	cbnz	r0, 8003542 <_svfiprintf_r+0x2e>
 8003538:	230c      	movs	r3, #12
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	f04f 30ff 	mov.w	r0, #4294967295
 8003540:	e0d1      	b.n	80036e6 <_svfiprintf_r+0x1d2>
 8003542:	2340      	movs	r3, #64	; 0x40
 8003544:	616b      	str	r3, [r5, #20]
 8003546:	2300      	movs	r3, #0
 8003548:	9309      	str	r3, [sp, #36]	; 0x24
 800354a:	2320      	movs	r3, #32
 800354c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003550:	2330      	movs	r3, #48	; 0x30
 8003552:	f04f 0901 	mov.w	r9, #1
 8003556:	f8cd 800c 	str.w	r8, [sp, #12]
 800355a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003700 <_svfiprintf_r+0x1ec>
 800355e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003562:	4623      	mov	r3, r4
 8003564:	469a      	mov	sl, r3
 8003566:	f813 2b01 	ldrb.w	r2, [r3], #1
 800356a:	b10a      	cbz	r2, 8003570 <_svfiprintf_r+0x5c>
 800356c:	2a25      	cmp	r2, #37	; 0x25
 800356e:	d1f9      	bne.n	8003564 <_svfiprintf_r+0x50>
 8003570:	ebba 0b04 	subs.w	fp, sl, r4
 8003574:	d00b      	beq.n	800358e <_svfiprintf_r+0x7a>
 8003576:	465b      	mov	r3, fp
 8003578:	4622      	mov	r2, r4
 800357a:	4629      	mov	r1, r5
 800357c:	4638      	mov	r0, r7
 800357e:	f7ff ff6d 	bl	800345c <__ssputs_r>
 8003582:	3001      	adds	r0, #1
 8003584:	f000 80aa 	beq.w	80036dc <_svfiprintf_r+0x1c8>
 8003588:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800358a:	445a      	add	r2, fp
 800358c:	9209      	str	r2, [sp, #36]	; 0x24
 800358e:	f89a 3000 	ldrb.w	r3, [sl]
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 80a2 	beq.w	80036dc <_svfiprintf_r+0x1c8>
 8003598:	2300      	movs	r3, #0
 800359a:	f04f 32ff 	mov.w	r2, #4294967295
 800359e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035a2:	f10a 0a01 	add.w	sl, sl, #1
 80035a6:	9304      	str	r3, [sp, #16]
 80035a8:	9307      	str	r3, [sp, #28]
 80035aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035ae:	931a      	str	r3, [sp, #104]	; 0x68
 80035b0:	4654      	mov	r4, sl
 80035b2:	2205      	movs	r2, #5
 80035b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035b8:	4851      	ldr	r0, [pc, #324]	; (8003700 <_svfiprintf_r+0x1ec>)
 80035ba:	f000 fa41 	bl	8003a40 <memchr>
 80035be:	9a04      	ldr	r2, [sp, #16]
 80035c0:	b9d8      	cbnz	r0, 80035fa <_svfiprintf_r+0xe6>
 80035c2:	06d0      	lsls	r0, r2, #27
 80035c4:	bf44      	itt	mi
 80035c6:	2320      	movmi	r3, #32
 80035c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035cc:	0711      	lsls	r1, r2, #28
 80035ce:	bf44      	itt	mi
 80035d0:	232b      	movmi	r3, #43	; 0x2b
 80035d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035d6:	f89a 3000 	ldrb.w	r3, [sl]
 80035da:	2b2a      	cmp	r3, #42	; 0x2a
 80035dc:	d015      	beq.n	800360a <_svfiprintf_r+0xf6>
 80035de:	4654      	mov	r4, sl
 80035e0:	2000      	movs	r0, #0
 80035e2:	f04f 0c0a 	mov.w	ip, #10
 80035e6:	9a07      	ldr	r2, [sp, #28]
 80035e8:	4621      	mov	r1, r4
 80035ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035ee:	3b30      	subs	r3, #48	; 0x30
 80035f0:	2b09      	cmp	r3, #9
 80035f2:	d94e      	bls.n	8003692 <_svfiprintf_r+0x17e>
 80035f4:	b1b0      	cbz	r0, 8003624 <_svfiprintf_r+0x110>
 80035f6:	9207      	str	r2, [sp, #28]
 80035f8:	e014      	b.n	8003624 <_svfiprintf_r+0x110>
 80035fa:	eba0 0308 	sub.w	r3, r0, r8
 80035fe:	fa09 f303 	lsl.w	r3, r9, r3
 8003602:	4313      	orrs	r3, r2
 8003604:	46a2      	mov	sl, r4
 8003606:	9304      	str	r3, [sp, #16]
 8003608:	e7d2      	b.n	80035b0 <_svfiprintf_r+0x9c>
 800360a:	9b03      	ldr	r3, [sp, #12]
 800360c:	1d19      	adds	r1, r3, #4
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	9103      	str	r1, [sp, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	bfbb      	ittet	lt
 8003616:	425b      	neglt	r3, r3
 8003618:	f042 0202 	orrlt.w	r2, r2, #2
 800361c:	9307      	strge	r3, [sp, #28]
 800361e:	9307      	strlt	r3, [sp, #28]
 8003620:	bfb8      	it	lt
 8003622:	9204      	strlt	r2, [sp, #16]
 8003624:	7823      	ldrb	r3, [r4, #0]
 8003626:	2b2e      	cmp	r3, #46	; 0x2e
 8003628:	d10c      	bne.n	8003644 <_svfiprintf_r+0x130>
 800362a:	7863      	ldrb	r3, [r4, #1]
 800362c:	2b2a      	cmp	r3, #42	; 0x2a
 800362e:	d135      	bne.n	800369c <_svfiprintf_r+0x188>
 8003630:	9b03      	ldr	r3, [sp, #12]
 8003632:	3402      	adds	r4, #2
 8003634:	1d1a      	adds	r2, r3, #4
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	9203      	str	r2, [sp, #12]
 800363a:	2b00      	cmp	r3, #0
 800363c:	bfb8      	it	lt
 800363e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003642:	9305      	str	r3, [sp, #20]
 8003644:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003710 <_svfiprintf_r+0x1fc>
 8003648:	2203      	movs	r2, #3
 800364a:	4650      	mov	r0, sl
 800364c:	7821      	ldrb	r1, [r4, #0]
 800364e:	f000 f9f7 	bl	8003a40 <memchr>
 8003652:	b140      	cbz	r0, 8003666 <_svfiprintf_r+0x152>
 8003654:	2340      	movs	r3, #64	; 0x40
 8003656:	eba0 000a 	sub.w	r0, r0, sl
 800365a:	fa03 f000 	lsl.w	r0, r3, r0
 800365e:	9b04      	ldr	r3, [sp, #16]
 8003660:	3401      	adds	r4, #1
 8003662:	4303      	orrs	r3, r0
 8003664:	9304      	str	r3, [sp, #16]
 8003666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800366a:	2206      	movs	r2, #6
 800366c:	4825      	ldr	r0, [pc, #148]	; (8003704 <_svfiprintf_r+0x1f0>)
 800366e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003672:	f000 f9e5 	bl	8003a40 <memchr>
 8003676:	2800      	cmp	r0, #0
 8003678:	d038      	beq.n	80036ec <_svfiprintf_r+0x1d8>
 800367a:	4b23      	ldr	r3, [pc, #140]	; (8003708 <_svfiprintf_r+0x1f4>)
 800367c:	bb1b      	cbnz	r3, 80036c6 <_svfiprintf_r+0x1b2>
 800367e:	9b03      	ldr	r3, [sp, #12]
 8003680:	3307      	adds	r3, #7
 8003682:	f023 0307 	bic.w	r3, r3, #7
 8003686:	3308      	adds	r3, #8
 8003688:	9303      	str	r3, [sp, #12]
 800368a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800368c:	4433      	add	r3, r6
 800368e:	9309      	str	r3, [sp, #36]	; 0x24
 8003690:	e767      	b.n	8003562 <_svfiprintf_r+0x4e>
 8003692:	460c      	mov	r4, r1
 8003694:	2001      	movs	r0, #1
 8003696:	fb0c 3202 	mla	r2, ip, r2, r3
 800369a:	e7a5      	b.n	80035e8 <_svfiprintf_r+0xd4>
 800369c:	2300      	movs	r3, #0
 800369e:	f04f 0c0a 	mov.w	ip, #10
 80036a2:	4619      	mov	r1, r3
 80036a4:	3401      	adds	r4, #1
 80036a6:	9305      	str	r3, [sp, #20]
 80036a8:	4620      	mov	r0, r4
 80036aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036ae:	3a30      	subs	r2, #48	; 0x30
 80036b0:	2a09      	cmp	r2, #9
 80036b2:	d903      	bls.n	80036bc <_svfiprintf_r+0x1a8>
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0c5      	beq.n	8003644 <_svfiprintf_r+0x130>
 80036b8:	9105      	str	r1, [sp, #20]
 80036ba:	e7c3      	b.n	8003644 <_svfiprintf_r+0x130>
 80036bc:	4604      	mov	r4, r0
 80036be:	2301      	movs	r3, #1
 80036c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80036c4:	e7f0      	b.n	80036a8 <_svfiprintf_r+0x194>
 80036c6:	ab03      	add	r3, sp, #12
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	462a      	mov	r2, r5
 80036cc:	4638      	mov	r0, r7
 80036ce:	4b0f      	ldr	r3, [pc, #60]	; (800370c <_svfiprintf_r+0x1f8>)
 80036d0:	a904      	add	r1, sp, #16
 80036d2:	f3af 8000 	nop.w
 80036d6:	1c42      	adds	r2, r0, #1
 80036d8:	4606      	mov	r6, r0
 80036da:	d1d6      	bne.n	800368a <_svfiprintf_r+0x176>
 80036dc:	89ab      	ldrh	r3, [r5, #12]
 80036de:	065b      	lsls	r3, r3, #25
 80036e0:	f53f af2c 	bmi.w	800353c <_svfiprintf_r+0x28>
 80036e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036e6:	b01d      	add	sp, #116	; 0x74
 80036e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ec:	ab03      	add	r3, sp, #12
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	462a      	mov	r2, r5
 80036f2:	4638      	mov	r0, r7
 80036f4:	4b05      	ldr	r3, [pc, #20]	; (800370c <_svfiprintf_r+0x1f8>)
 80036f6:	a904      	add	r1, sp, #16
 80036f8:	f000 f87c 	bl	80037f4 <_printf_i>
 80036fc:	e7eb      	b.n	80036d6 <_svfiprintf_r+0x1c2>
 80036fe:	bf00      	nop
 8003700:	08003cf0 	.word	0x08003cf0
 8003704:	08003cfa 	.word	0x08003cfa
 8003708:	00000000 	.word	0x00000000
 800370c:	0800345d 	.word	0x0800345d
 8003710:	08003cf6 	.word	0x08003cf6

08003714 <_printf_common>:
 8003714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003718:	4616      	mov	r6, r2
 800371a:	4699      	mov	r9, r3
 800371c:	688a      	ldr	r2, [r1, #8]
 800371e:	690b      	ldr	r3, [r1, #16]
 8003720:	4607      	mov	r7, r0
 8003722:	4293      	cmp	r3, r2
 8003724:	bfb8      	it	lt
 8003726:	4613      	movlt	r3, r2
 8003728:	6033      	str	r3, [r6, #0]
 800372a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800372e:	460c      	mov	r4, r1
 8003730:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003734:	b10a      	cbz	r2, 800373a <_printf_common+0x26>
 8003736:	3301      	adds	r3, #1
 8003738:	6033      	str	r3, [r6, #0]
 800373a:	6823      	ldr	r3, [r4, #0]
 800373c:	0699      	lsls	r1, r3, #26
 800373e:	bf42      	ittt	mi
 8003740:	6833      	ldrmi	r3, [r6, #0]
 8003742:	3302      	addmi	r3, #2
 8003744:	6033      	strmi	r3, [r6, #0]
 8003746:	6825      	ldr	r5, [r4, #0]
 8003748:	f015 0506 	ands.w	r5, r5, #6
 800374c:	d106      	bne.n	800375c <_printf_common+0x48>
 800374e:	f104 0a19 	add.w	sl, r4, #25
 8003752:	68e3      	ldr	r3, [r4, #12]
 8003754:	6832      	ldr	r2, [r6, #0]
 8003756:	1a9b      	subs	r3, r3, r2
 8003758:	42ab      	cmp	r3, r5
 800375a:	dc28      	bgt.n	80037ae <_printf_common+0x9a>
 800375c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003760:	1e13      	subs	r3, r2, #0
 8003762:	6822      	ldr	r2, [r4, #0]
 8003764:	bf18      	it	ne
 8003766:	2301      	movne	r3, #1
 8003768:	0692      	lsls	r2, r2, #26
 800376a:	d42d      	bmi.n	80037c8 <_printf_common+0xb4>
 800376c:	4649      	mov	r1, r9
 800376e:	4638      	mov	r0, r7
 8003770:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003774:	47c0      	blx	r8
 8003776:	3001      	adds	r0, #1
 8003778:	d020      	beq.n	80037bc <_printf_common+0xa8>
 800377a:	6823      	ldr	r3, [r4, #0]
 800377c:	68e5      	ldr	r5, [r4, #12]
 800377e:	f003 0306 	and.w	r3, r3, #6
 8003782:	2b04      	cmp	r3, #4
 8003784:	bf18      	it	ne
 8003786:	2500      	movne	r5, #0
 8003788:	6832      	ldr	r2, [r6, #0]
 800378a:	f04f 0600 	mov.w	r6, #0
 800378e:	68a3      	ldr	r3, [r4, #8]
 8003790:	bf08      	it	eq
 8003792:	1aad      	subeq	r5, r5, r2
 8003794:	6922      	ldr	r2, [r4, #16]
 8003796:	bf08      	it	eq
 8003798:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800379c:	4293      	cmp	r3, r2
 800379e:	bfc4      	itt	gt
 80037a0:	1a9b      	subgt	r3, r3, r2
 80037a2:	18ed      	addgt	r5, r5, r3
 80037a4:	341a      	adds	r4, #26
 80037a6:	42b5      	cmp	r5, r6
 80037a8:	d11a      	bne.n	80037e0 <_printf_common+0xcc>
 80037aa:	2000      	movs	r0, #0
 80037ac:	e008      	b.n	80037c0 <_printf_common+0xac>
 80037ae:	2301      	movs	r3, #1
 80037b0:	4652      	mov	r2, sl
 80037b2:	4649      	mov	r1, r9
 80037b4:	4638      	mov	r0, r7
 80037b6:	47c0      	blx	r8
 80037b8:	3001      	adds	r0, #1
 80037ba:	d103      	bne.n	80037c4 <_printf_common+0xb0>
 80037bc:	f04f 30ff 	mov.w	r0, #4294967295
 80037c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037c4:	3501      	adds	r5, #1
 80037c6:	e7c4      	b.n	8003752 <_printf_common+0x3e>
 80037c8:	2030      	movs	r0, #48	; 0x30
 80037ca:	18e1      	adds	r1, r4, r3
 80037cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037d6:	4422      	add	r2, r4
 80037d8:	3302      	adds	r3, #2
 80037da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037de:	e7c5      	b.n	800376c <_printf_common+0x58>
 80037e0:	2301      	movs	r3, #1
 80037e2:	4622      	mov	r2, r4
 80037e4:	4649      	mov	r1, r9
 80037e6:	4638      	mov	r0, r7
 80037e8:	47c0      	blx	r8
 80037ea:	3001      	adds	r0, #1
 80037ec:	d0e6      	beq.n	80037bc <_printf_common+0xa8>
 80037ee:	3601      	adds	r6, #1
 80037f0:	e7d9      	b.n	80037a6 <_printf_common+0x92>
	...

080037f4 <_printf_i>:
 80037f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037f8:	460c      	mov	r4, r1
 80037fa:	7e27      	ldrb	r7, [r4, #24]
 80037fc:	4691      	mov	r9, r2
 80037fe:	2f78      	cmp	r7, #120	; 0x78
 8003800:	4680      	mov	r8, r0
 8003802:	469a      	mov	sl, r3
 8003804:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003806:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800380a:	d807      	bhi.n	800381c <_printf_i+0x28>
 800380c:	2f62      	cmp	r7, #98	; 0x62
 800380e:	d80a      	bhi.n	8003826 <_printf_i+0x32>
 8003810:	2f00      	cmp	r7, #0
 8003812:	f000 80d9 	beq.w	80039c8 <_printf_i+0x1d4>
 8003816:	2f58      	cmp	r7, #88	; 0x58
 8003818:	f000 80a4 	beq.w	8003964 <_printf_i+0x170>
 800381c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003820:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003824:	e03a      	b.n	800389c <_printf_i+0xa8>
 8003826:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800382a:	2b15      	cmp	r3, #21
 800382c:	d8f6      	bhi.n	800381c <_printf_i+0x28>
 800382e:	a001      	add	r0, pc, #4	; (adr r0, 8003834 <_printf_i+0x40>)
 8003830:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003834:	0800388d 	.word	0x0800388d
 8003838:	080038a1 	.word	0x080038a1
 800383c:	0800381d 	.word	0x0800381d
 8003840:	0800381d 	.word	0x0800381d
 8003844:	0800381d 	.word	0x0800381d
 8003848:	0800381d 	.word	0x0800381d
 800384c:	080038a1 	.word	0x080038a1
 8003850:	0800381d 	.word	0x0800381d
 8003854:	0800381d 	.word	0x0800381d
 8003858:	0800381d 	.word	0x0800381d
 800385c:	0800381d 	.word	0x0800381d
 8003860:	080039af 	.word	0x080039af
 8003864:	080038d1 	.word	0x080038d1
 8003868:	08003991 	.word	0x08003991
 800386c:	0800381d 	.word	0x0800381d
 8003870:	0800381d 	.word	0x0800381d
 8003874:	080039d1 	.word	0x080039d1
 8003878:	0800381d 	.word	0x0800381d
 800387c:	080038d1 	.word	0x080038d1
 8003880:	0800381d 	.word	0x0800381d
 8003884:	0800381d 	.word	0x0800381d
 8003888:	08003999 	.word	0x08003999
 800388c:	680b      	ldr	r3, [r1, #0]
 800388e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003892:	1d1a      	adds	r2, r3, #4
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	600a      	str	r2, [r1, #0]
 8003898:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800389c:	2301      	movs	r3, #1
 800389e:	e0a4      	b.n	80039ea <_printf_i+0x1f6>
 80038a0:	6825      	ldr	r5, [r4, #0]
 80038a2:	6808      	ldr	r0, [r1, #0]
 80038a4:	062e      	lsls	r6, r5, #24
 80038a6:	f100 0304 	add.w	r3, r0, #4
 80038aa:	d50a      	bpl.n	80038c2 <_printf_i+0xce>
 80038ac:	6805      	ldr	r5, [r0, #0]
 80038ae:	600b      	str	r3, [r1, #0]
 80038b0:	2d00      	cmp	r5, #0
 80038b2:	da03      	bge.n	80038bc <_printf_i+0xc8>
 80038b4:	232d      	movs	r3, #45	; 0x2d
 80038b6:	426d      	negs	r5, r5
 80038b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038bc:	230a      	movs	r3, #10
 80038be:	485e      	ldr	r0, [pc, #376]	; (8003a38 <_printf_i+0x244>)
 80038c0:	e019      	b.n	80038f6 <_printf_i+0x102>
 80038c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80038c6:	6805      	ldr	r5, [r0, #0]
 80038c8:	600b      	str	r3, [r1, #0]
 80038ca:	bf18      	it	ne
 80038cc:	b22d      	sxthne	r5, r5
 80038ce:	e7ef      	b.n	80038b0 <_printf_i+0xbc>
 80038d0:	680b      	ldr	r3, [r1, #0]
 80038d2:	6825      	ldr	r5, [r4, #0]
 80038d4:	1d18      	adds	r0, r3, #4
 80038d6:	6008      	str	r0, [r1, #0]
 80038d8:	0628      	lsls	r0, r5, #24
 80038da:	d501      	bpl.n	80038e0 <_printf_i+0xec>
 80038dc:	681d      	ldr	r5, [r3, #0]
 80038de:	e002      	b.n	80038e6 <_printf_i+0xf2>
 80038e0:	0669      	lsls	r1, r5, #25
 80038e2:	d5fb      	bpl.n	80038dc <_printf_i+0xe8>
 80038e4:	881d      	ldrh	r5, [r3, #0]
 80038e6:	2f6f      	cmp	r7, #111	; 0x6f
 80038e8:	bf0c      	ite	eq
 80038ea:	2308      	moveq	r3, #8
 80038ec:	230a      	movne	r3, #10
 80038ee:	4852      	ldr	r0, [pc, #328]	; (8003a38 <_printf_i+0x244>)
 80038f0:	2100      	movs	r1, #0
 80038f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038f6:	6866      	ldr	r6, [r4, #4]
 80038f8:	2e00      	cmp	r6, #0
 80038fa:	bfa8      	it	ge
 80038fc:	6821      	ldrge	r1, [r4, #0]
 80038fe:	60a6      	str	r6, [r4, #8]
 8003900:	bfa4      	itt	ge
 8003902:	f021 0104 	bicge.w	r1, r1, #4
 8003906:	6021      	strge	r1, [r4, #0]
 8003908:	b90d      	cbnz	r5, 800390e <_printf_i+0x11a>
 800390a:	2e00      	cmp	r6, #0
 800390c:	d04d      	beq.n	80039aa <_printf_i+0x1b6>
 800390e:	4616      	mov	r6, r2
 8003910:	fbb5 f1f3 	udiv	r1, r5, r3
 8003914:	fb03 5711 	mls	r7, r3, r1, r5
 8003918:	5dc7      	ldrb	r7, [r0, r7]
 800391a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800391e:	462f      	mov	r7, r5
 8003920:	42bb      	cmp	r3, r7
 8003922:	460d      	mov	r5, r1
 8003924:	d9f4      	bls.n	8003910 <_printf_i+0x11c>
 8003926:	2b08      	cmp	r3, #8
 8003928:	d10b      	bne.n	8003942 <_printf_i+0x14e>
 800392a:	6823      	ldr	r3, [r4, #0]
 800392c:	07df      	lsls	r7, r3, #31
 800392e:	d508      	bpl.n	8003942 <_printf_i+0x14e>
 8003930:	6923      	ldr	r3, [r4, #16]
 8003932:	6861      	ldr	r1, [r4, #4]
 8003934:	4299      	cmp	r1, r3
 8003936:	bfde      	ittt	le
 8003938:	2330      	movle	r3, #48	; 0x30
 800393a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800393e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003942:	1b92      	subs	r2, r2, r6
 8003944:	6122      	str	r2, [r4, #16]
 8003946:	464b      	mov	r3, r9
 8003948:	4621      	mov	r1, r4
 800394a:	4640      	mov	r0, r8
 800394c:	f8cd a000 	str.w	sl, [sp]
 8003950:	aa03      	add	r2, sp, #12
 8003952:	f7ff fedf 	bl	8003714 <_printf_common>
 8003956:	3001      	adds	r0, #1
 8003958:	d14c      	bne.n	80039f4 <_printf_i+0x200>
 800395a:	f04f 30ff 	mov.w	r0, #4294967295
 800395e:	b004      	add	sp, #16
 8003960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003964:	4834      	ldr	r0, [pc, #208]	; (8003a38 <_printf_i+0x244>)
 8003966:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800396a:	680e      	ldr	r6, [r1, #0]
 800396c:	6823      	ldr	r3, [r4, #0]
 800396e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003972:	061f      	lsls	r7, r3, #24
 8003974:	600e      	str	r6, [r1, #0]
 8003976:	d514      	bpl.n	80039a2 <_printf_i+0x1ae>
 8003978:	07d9      	lsls	r1, r3, #31
 800397a:	bf44      	itt	mi
 800397c:	f043 0320 	orrmi.w	r3, r3, #32
 8003980:	6023      	strmi	r3, [r4, #0]
 8003982:	b91d      	cbnz	r5, 800398c <_printf_i+0x198>
 8003984:	6823      	ldr	r3, [r4, #0]
 8003986:	f023 0320 	bic.w	r3, r3, #32
 800398a:	6023      	str	r3, [r4, #0]
 800398c:	2310      	movs	r3, #16
 800398e:	e7af      	b.n	80038f0 <_printf_i+0xfc>
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	f043 0320 	orr.w	r3, r3, #32
 8003996:	6023      	str	r3, [r4, #0]
 8003998:	2378      	movs	r3, #120	; 0x78
 800399a:	4828      	ldr	r0, [pc, #160]	; (8003a3c <_printf_i+0x248>)
 800399c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80039a0:	e7e3      	b.n	800396a <_printf_i+0x176>
 80039a2:	065e      	lsls	r6, r3, #25
 80039a4:	bf48      	it	mi
 80039a6:	b2ad      	uxthmi	r5, r5
 80039a8:	e7e6      	b.n	8003978 <_printf_i+0x184>
 80039aa:	4616      	mov	r6, r2
 80039ac:	e7bb      	b.n	8003926 <_printf_i+0x132>
 80039ae:	680b      	ldr	r3, [r1, #0]
 80039b0:	6826      	ldr	r6, [r4, #0]
 80039b2:	1d1d      	adds	r5, r3, #4
 80039b4:	6960      	ldr	r0, [r4, #20]
 80039b6:	600d      	str	r5, [r1, #0]
 80039b8:	0635      	lsls	r5, r6, #24
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	d501      	bpl.n	80039c2 <_printf_i+0x1ce>
 80039be:	6018      	str	r0, [r3, #0]
 80039c0:	e002      	b.n	80039c8 <_printf_i+0x1d4>
 80039c2:	0671      	lsls	r1, r6, #25
 80039c4:	d5fb      	bpl.n	80039be <_printf_i+0x1ca>
 80039c6:	8018      	strh	r0, [r3, #0]
 80039c8:	2300      	movs	r3, #0
 80039ca:	4616      	mov	r6, r2
 80039cc:	6123      	str	r3, [r4, #16]
 80039ce:	e7ba      	b.n	8003946 <_printf_i+0x152>
 80039d0:	680b      	ldr	r3, [r1, #0]
 80039d2:	1d1a      	adds	r2, r3, #4
 80039d4:	600a      	str	r2, [r1, #0]
 80039d6:	681e      	ldr	r6, [r3, #0]
 80039d8:	2100      	movs	r1, #0
 80039da:	4630      	mov	r0, r6
 80039dc:	6862      	ldr	r2, [r4, #4]
 80039de:	f000 f82f 	bl	8003a40 <memchr>
 80039e2:	b108      	cbz	r0, 80039e8 <_printf_i+0x1f4>
 80039e4:	1b80      	subs	r0, r0, r6
 80039e6:	6060      	str	r0, [r4, #4]
 80039e8:	6863      	ldr	r3, [r4, #4]
 80039ea:	6123      	str	r3, [r4, #16]
 80039ec:	2300      	movs	r3, #0
 80039ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039f2:	e7a8      	b.n	8003946 <_printf_i+0x152>
 80039f4:	4632      	mov	r2, r6
 80039f6:	4649      	mov	r1, r9
 80039f8:	4640      	mov	r0, r8
 80039fa:	6923      	ldr	r3, [r4, #16]
 80039fc:	47d0      	blx	sl
 80039fe:	3001      	adds	r0, #1
 8003a00:	d0ab      	beq.n	800395a <_printf_i+0x166>
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	079b      	lsls	r3, r3, #30
 8003a06:	d413      	bmi.n	8003a30 <_printf_i+0x23c>
 8003a08:	68e0      	ldr	r0, [r4, #12]
 8003a0a:	9b03      	ldr	r3, [sp, #12]
 8003a0c:	4298      	cmp	r0, r3
 8003a0e:	bfb8      	it	lt
 8003a10:	4618      	movlt	r0, r3
 8003a12:	e7a4      	b.n	800395e <_printf_i+0x16a>
 8003a14:	2301      	movs	r3, #1
 8003a16:	4632      	mov	r2, r6
 8003a18:	4649      	mov	r1, r9
 8003a1a:	4640      	mov	r0, r8
 8003a1c:	47d0      	blx	sl
 8003a1e:	3001      	adds	r0, #1
 8003a20:	d09b      	beq.n	800395a <_printf_i+0x166>
 8003a22:	3501      	adds	r5, #1
 8003a24:	68e3      	ldr	r3, [r4, #12]
 8003a26:	9903      	ldr	r1, [sp, #12]
 8003a28:	1a5b      	subs	r3, r3, r1
 8003a2a:	42ab      	cmp	r3, r5
 8003a2c:	dcf2      	bgt.n	8003a14 <_printf_i+0x220>
 8003a2e:	e7eb      	b.n	8003a08 <_printf_i+0x214>
 8003a30:	2500      	movs	r5, #0
 8003a32:	f104 0619 	add.w	r6, r4, #25
 8003a36:	e7f5      	b.n	8003a24 <_printf_i+0x230>
 8003a38:	08003d01 	.word	0x08003d01
 8003a3c:	08003d12 	.word	0x08003d12

08003a40 <memchr>:
 8003a40:	4603      	mov	r3, r0
 8003a42:	b510      	push	{r4, lr}
 8003a44:	b2c9      	uxtb	r1, r1
 8003a46:	4402      	add	r2, r0
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	d101      	bne.n	8003a52 <memchr+0x12>
 8003a4e:	2000      	movs	r0, #0
 8003a50:	e003      	b.n	8003a5a <memchr+0x1a>
 8003a52:	7804      	ldrb	r4, [r0, #0]
 8003a54:	3301      	adds	r3, #1
 8003a56:	428c      	cmp	r4, r1
 8003a58:	d1f6      	bne.n	8003a48 <memchr+0x8>
 8003a5a:	bd10      	pop	{r4, pc}

08003a5c <memcpy>:
 8003a5c:	440a      	add	r2, r1
 8003a5e:	4291      	cmp	r1, r2
 8003a60:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a64:	d100      	bne.n	8003a68 <memcpy+0xc>
 8003a66:	4770      	bx	lr
 8003a68:	b510      	push	{r4, lr}
 8003a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a6e:	4291      	cmp	r1, r2
 8003a70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a74:	d1f9      	bne.n	8003a6a <memcpy+0xe>
 8003a76:	bd10      	pop	{r4, pc}

08003a78 <memmove>:
 8003a78:	4288      	cmp	r0, r1
 8003a7a:	b510      	push	{r4, lr}
 8003a7c:	eb01 0402 	add.w	r4, r1, r2
 8003a80:	d902      	bls.n	8003a88 <memmove+0x10>
 8003a82:	4284      	cmp	r4, r0
 8003a84:	4623      	mov	r3, r4
 8003a86:	d807      	bhi.n	8003a98 <memmove+0x20>
 8003a88:	1e43      	subs	r3, r0, #1
 8003a8a:	42a1      	cmp	r1, r4
 8003a8c:	d008      	beq.n	8003aa0 <memmove+0x28>
 8003a8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a96:	e7f8      	b.n	8003a8a <memmove+0x12>
 8003a98:	4601      	mov	r1, r0
 8003a9a:	4402      	add	r2, r0
 8003a9c:	428a      	cmp	r2, r1
 8003a9e:	d100      	bne.n	8003aa2 <memmove+0x2a>
 8003aa0:	bd10      	pop	{r4, pc}
 8003aa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003aa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003aaa:	e7f7      	b.n	8003a9c <memmove+0x24>

08003aac <_free_r>:
 8003aac:	b538      	push	{r3, r4, r5, lr}
 8003aae:	4605      	mov	r5, r0
 8003ab0:	2900      	cmp	r1, #0
 8003ab2:	d043      	beq.n	8003b3c <_free_r+0x90>
 8003ab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ab8:	1f0c      	subs	r4, r1, #4
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	bfb8      	it	lt
 8003abe:	18e4      	addlt	r4, r4, r3
 8003ac0:	f000 f8d0 	bl	8003c64 <__malloc_lock>
 8003ac4:	4a1e      	ldr	r2, [pc, #120]	; (8003b40 <_free_r+0x94>)
 8003ac6:	6813      	ldr	r3, [r2, #0]
 8003ac8:	4610      	mov	r0, r2
 8003aca:	b933      	cbnz	r3, 8003ada <_free_r+0x2e>
 8003acc:	6063      	str	r3, [r4, #4]
 8003ace:	6014      	str	r4, [r2, #0]
 8003ad0:	4628      	mov	r0, r5
 8003ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ad6:	f000 b8cb 	b.w	8003c70 <__malloc_unlock>
 8003ada:	42a3      	cmp	r3, r4
 8003adc:	d90a      	bls.n	8003af4 <_free_r+0x48>
 8003ade:	6821      	ldr	r1, [r4, #0]
 8003ae0:	1862      	adds	r2, r4, r1
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	bf01      	itttt	eq
 8003ae6:	681a      	ldreq	r2, [r3, #0]
 8003ae8:	685b      	ldreq	r3, [r3, #4]
 8003aea:	1852      	addeq	r2, r2, r1
 8003aec:	6022      	streq	r2, [r4, #0]
 8003aee:	6063      	str	r3, [r4, #4]
 8003af0:	6004      	str	r4, [r0, #0]
 8003af2:	e7ed      	b.n	8003ad0 <_free_r+0x24>
 8003af4:	461a      	mov	r2, r3
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	b10b      	cbz	r3, 8003afe <_free_r+0x52>
 8003afa:	42a3      	cmp	r3, r4
 8003afc:	d9fa      	bls.n	8003af4 <_free_r+0x48>
 8003afe:	6811      	ldr	r1, [r2, #0]
 8003b00:	1850      	adds	r0, r2, r1
 8003b02:	42a0      	cmp	r0, r4
 8003b04:	d10b      	bne.n	8003b1e <_free_r+0x72>
 8003b06:	6820      	ldr	r0, [r4, #0]
 8003b08:	4401      	add	r1, r0
 8003b0a:	1850      	adds	r0, r2, r1
 8003b0c:	4283      	cmp	r3, r0
 8003b0e:	6011      	str	r1, [r2, #0]
 8003b10:	d1de      	bne.n	8003ad0 <_free_r+0x24>
 8003b12:	6818      	ldr	r0, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	4401      	add	r1, r0
 8003b18:	6011      	str	r1, [r2, #0]
 8003b1a:	6053      	str	r3, [r2, #4]
 8003b1c:	e7d8      	b.n	8003ad0 <_free_r+0x24>
 8003b1e:	d902      	bls.n	8003b26 <_free_r+0x7a>
 8003b20:	230c      	movs	r3, #12
 8003b22:	602b      	str	r3, [r5, #0]
 8003b24:	e7d4      	b.n	8003ad0 <_free_r+0x24>
 8003b26:	6820      	ldr	r0, [r4, #0]
 8003b28:	1821      	adds	r1, r4, r0
 8003b2a:	428b      	cmp	r3, r1
 8003b2c:	bf01      	itttt	eq
 8003b2e:	6819      	ldreq	r1, [r3, #0]
 8003b30:	685b      	ldreq	r3, [r3, #4]
 8003b32:	1809      	addeq	r1, r1, r0
 8003b34:	6021      	streq	r1, [r4, #0]
 8003b36:	6063      	str	r3, [r4, #4]
 8003b38:	6054      	str	r4, [r2, #4]
 8003b3a:	e7c9      	b.n	8003ad0 <_free_r+0x24>
 8003b3c:	bd38      	pop	{r3, r4, r5, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000094 	.word	0x20000094

08003b44 <_malloc_r>:
 8003b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b46:	1ccd      	adds	r5, r1, #3
 8003b48:	f025 0503 	bic.w	r5, r5, #3
 8003b4c:	3508      	adds	r5, #8
 8003b4e:	2d0c      	cmp	r5, #12
 8003b50:	bf38      	it	cc
 8003b52:	250c      	movcc	r5, #12
 8003b54:	2d00      	cmp	r5, #0
 8003b56:	4606      	mov	r6, r0
 8003b58:	db01      	blt.n	8003b5e <_malloc_r+0x1a>
 8003b5a:	42a9      	cmp	r1, r5
 8003b5c:	d903      	bls.n	8003b66 <_malloc_r+0x22>
 8003b5e:	230c      	movs	r3, #12
 8003b60:	6033      	str	r3, [r6, #0]
 8003b62:	2000      	movs	r0, #0
 8003b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b66:	f000 f87d 	bl	8003c64 <__malloc_lock>
 8003b6a:	4921      	ldr	r1, [pc, #132]	; (8003bf0 <_malloc_r+0xac>)
 8003b6c:	680a      	ldr	r2, [r1, #0]
 8003b6e:	4614      	mov	r4, r2
 8003b70:	b99c      	cbnz	r4, 8003b9a <_malloc_r+0x56>
 8003b72:	4f20      	ldr	r7, [pc, #128]	; (8003bf4 <_malloc_r+0xb0>)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	b923      	cbnz	r3, 8003b82 <_malloc_r+0x3e>
 8003b78:	4621      	mov	r1, r4
 8003b7a:	4630      	mov	r0, r6
 8003b7c:	f000 f862 	bl	8003c44 <_sbrk_r>
 8003b80:	6038      	str	r0, [r7, #0]
 8003b82:	4629      	mov	r1, r5
 8003b84:	4630      	mov	r0, r6
 8003b86:	f000 f85d 	bl	8003c44 <_sbrk_r>
 8003b8a:	1c43      	adds	r3, r0, #1
 8003b8c:	d123      	bne.n	8003bd6 <_malloc_r+0x92>
 8003b8e:	230c      	movs	r3, #12
 8003b90:	4630      	mov	r0, r6
 8003b92:	6033      	str	r3, [r6, #0]
 8003b94:	f000 f86c 	bl	8003c70 <__malloc_unlock>
 8003b98:	e7e3      	b.n	8003b62 <_malloc_r+0x1e>
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	1b5b      	subs	r3, r3, r5
 8003b9e:	d417      	bmi.n	8003bd0 <_malloc_r+0x8c>
 8003ba0:	2b0b      	cmp	r3, #11
 8003ba2:	d903      	bls.n	8003bac <_malloc_r+0x68>
 8003ba4:	6023      	str	r3, [r4, #0]
 8003ba6:	441c      	add	r4, r3
 8003ba8:	6025      	str	r5, [r4, #0]
 8003baa:	e004      	b.n	8003bb6 <_malloc_r+0x72>
 8003bac:	6863      	ldr	r3, [r4, #4]
 8003bae:	42a2      	cmp	r2, r4
 8003bb0:	bf0c      	ite	eq
 8003bb2:	600b      	streq	r3, [r1, #0]
 8003bb4:	6053      	strne	r3, [r2, #4]
 8003bb6:	4630      	mov	r0, r6
 8003bb8:	f000 f85a 	bl	8003c70 <__malloc_unlock>
 8003bbc:	f104 000b 	add.w	r0, r4, #11
 8003bc0:	1d23      	adds	r3, r4, #4
 8003bc2:	f020 0007 	bic.w	r0, r0, #7
 8003bc6:	1ac2      	subs	r2, r0, r3
 8003bc8:	d0cc      	beq.n	8003b64 <_malloc_r+0x20>
 8003bca:	1a1b      	subs	r3, r3, r0
 8003bcc:	50a3      	str	r3, [r4, r2]
 8003bce:	e7c9      	b.n	8003b64 <_malloc_r+0x20>
 8003bd0:	4622      	mov	r2, r4
 8003bd2:	6864      	ldr	r4, [r4, #4]
 8003bd4:	e7cc      	b.n	8003b70 <_malloc_r+0x2c>
 8003bd6:	1cc4      	adds	r4, r0, #3
 8003bd8:	f024 0403 	bic.w	r4, r4, #3
 8003bdc:	42a0      	cmp	r0, r4
 8003bde:	d0e3      	beq.n	8003ba8 <_malloc_r+0x64>
 8003be0:	1a21      	subs	r1, r4, r0
 8003be2:	4630      	mov	r0, r6
 8003be4:	f000 f82e 	bl	8003c44 <_sbrk_r>
 8003be8:	3001      	adds	r0, #1
 8003bea:	d1dd      	bne.n	8003ba8 <_malloc_r+0x64>
 8003bec:	e7cf      	b.n	8003b8e <_malloc_r+0x4a>
 8003bee:	bf00      	nop
 8003bf0:	20000094 	.word	0x20000094
 8003bf4:	20000098 	.word	0x20000098

08003bf8 <_realloc_r>:
 8003bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfa:	4607      	mov	r7, r0
 8003bfc:	4614      	mov	r4, r2
 8003bfe:	460e      	mov	r6, r1
 8003c00:	b921      	cbnz	r1, 8003c0c <_realloc_r+0x14>
 8003c02:	4611      	mov	r1, r2
 8003c04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c08:	f7ff bf9c 	b.w	8003b44 <_malloc_r>
 8003c0c:	b922      	cbnz	r2, 8003c18 <_realloc_r+0x20>
 8003c0e:	f7ff ff4d 	bl	8003aac <_free_r>
 8003c12:	4625      	mov	r5, r4
 8003c14:	4628      	mov	r0, r5
 8003c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c18:	f000 f830 	bl	8003c7c <_malloc_usable_size_r>
 8003c1c:	42a0      	cmp	r0, r4
 8003c1e:	d20f      	bcs.n	8003c40 <_realloc_r+0x48>
 8003c20:	4621      	mov	r1, r4
 8003c22:	4638      	mov	r0, r7
 8003c24:	f7ff ff8e 	bl	8003b44 <_malloc_r>
 8003c28:	4605      	mov	r5, r0
 8003c2a:	2800      	cmp	r0, #0
 8003c2c:	d0f2      	beq.n	8003c14 <_realloc_r+0x1c>
 8003c2e:	4631      	mov	r1, r6
 8003c30:	4622      	mov	r2, r4
 8003c32:	f7ff ff13 	bl	8003a5c <memcpy>
 8003c36:	4631      	mov	r1, r6
 8003c38:	4638      	mov	r0, r7
 8003c3a:	f7ff ff37 	bl	8003aac <_free_r>
 8003c3e:	e7e9      	b.n	8003c14 <_realloc_r+0x1c>
 8003c40:	4635      	mov	r5, r6
 8003c42:	e7e7      	b.n	8003c14 <_realloc_r+0x1c>

08003c44 <_sbrk_r>:
 8003c44:	b538      	push	{r3, r4, r5, lr}
 8003c46:	2300      	movs	r3, #0
 8003c48:	4d05      	ldr	r5, [pc, #20]	; (8003c60 <_sbrk_r+0x1c>)
 8003c4a:	4604      	mov	r4, r0
 8003c4c:	4608      	mov	r0, r1
 8003c4e:	602b      	str	r3, [r5, #0]
 8003c50:	f7fc ff34 	bl	8000abc <_sbrk>
 8003c54:	1c43      	adds	r3, r0, #1
 8003c56:	d102      	bne.n	8003c5e <_sbrk_r+0x1a>
 8003c58:	682b      	ldr	r3, [r5, #0]
 8003c5a:	b103      	cbz	r3, 8003c5e <_sbrk_r+0x1a>
 8003c5c:	6023      	str	r3, [r4, #0]
 8003c5e:	bd38      	pop	{r3, r4, r5, pc}
 8003c60:	2000023c 	.word	0x2000023c

08003c64 <__malloc_lock>:
 8003c64:	4801      	ldr	r0, [pc, #4]	; (8003c6c <__malloc_lock+0x8>)
 8003c66:	f000 b811 	b.w	8003c8c <__retarget_lock_acquire_recursive>
 8003c6a:	bf00      	nop
 8003c6c:	20000244 	.word	0x20000244

08003c70 <__malloc_unlock>:
 8003c70:	4801      	ldr	r0, [pc, #4]	; (8003c78 <__malloc_unlock+0x8>)
 8003c72:	f000 b80c 	b.w	8003c8e <__retarget_lock_release_recursive>
 8003c76:	bf00      	nop
 8003c78:	20000244 	.word	0x20000244

08003c7c <_malloc_usable_size_r>:
 8003c7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c80:	1f18      	subs	r0, r3, #4
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	bfbc      	itt	lt
 8003c86:	580b      	ldrlt	r3, [r1, r0]
 8003c88:	18c0      	addlt	r0, r0, r3
 8003c8a:	4770      	bx	lr

08003c8c <__retarget_lock_acquire_recursive>:
 8003c8c:	4770      	bx	lr

08003c8e <__retarget_lock_release_recursive>:
 8003c8e:	4770      	bx	lr

08003c90 <_init>:
 8003c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c92:	bf00      	nop
 8003c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c96:	bc08      	pop	{r3}
 8003c98:	469e      	mov	lr, r3
 8003c9a:	4770      	bx	lr

08003c9c <_fini>:
 8003c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9e:	bf00      	nop
 8003ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ca2:	bc08      	pop	{r3}
 8003ca4:	469e      	mov	lr, r3
 8003ca6:	4770      	bx	lr
