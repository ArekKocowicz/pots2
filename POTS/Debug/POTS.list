
POTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c30  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08004d3c  08004d3c  00014d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f00  08004f00  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004f00  08004f00  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f00  08004f00  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f00  08004f00  00014f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f04  08004f04  00014f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000070  08004f78  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08004f78  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca90  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eda  00000000  00000000  0002cb29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  0002ea08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  0002f660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f5e  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f146  00000000  00000000  0004814e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008af2d  00000000  00000000  00057294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e21c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036a0  00000000  00000000  000e2214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004d24 	.word	0x08004d24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004d24 	.word	0x08004d24

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fcd7 	bl	8000b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f877 	bl	8000258 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f99d 	bl	80004a8 <MX_GPIO_Init>
  MX_TIM2_Init();
 800016e:	f000 f8af 	bl	80002d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000172:	f000 f8f9 	bl	8000368 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000176:	f000 f96d 	bl	8000454 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  ///////////////////////////////////////////////////////////////
  //initialization of ringing module/////////////////////////////
  ///////////////////////////////////////////////////////////////
  myRing.callBackFrequency=40000;
 800017a:	4b2f      	ldr	r3, [pc, #188]	; (8000238 <main+0xdc>)
 800017c:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000180:	601a      	str	r2, [r3, #0]
  myRing.burstFrequency=25;
 8000182:	4b2d      	ldr	r3, [pc, #180]	; (8000238 <main+0xdc>)
 8000184:	2219      	movs	r2, #25
 8000186:	809a      	strh	r2, [r3, #4]
  myRing.state=RINGER_OFF;
 8000188:	4b2b      	ldr	r3, [pc, #172]	; (8000238 <main+0xdc>)
 800018a:	2200      	movs	r2, #0
 800018c:	779a      	strb	r2, [r3, #30]
  /*myRing.FR_GPIO_Port=POTS_LED_STAT_GPIO_Port;
  myRing.FR_Pin=POTS_LED_STAT_Pin;
  myRing.RM_GPIO_Port=LED_GPIO_Port;
  myRing.RM_Pin=LED_Pin;*/
  myRing.FR_GPIO_Port=POTS_FR_GPIO_Port;
 800018e:	4b2a      	ldr	r3, [pc, #168]	; (8000238 <main+0xdc>)
 8000190:	4a2a      	ldr	r2, [pc, #168]	; (800023c <main+0xe0>)
 8000192:	60da      	str	r2, [r3, #12]
  myRing.FR_Pin=POTS_FR_Pin;
 8000194:	4b28      	ldr	r3, [pc, #160]	; (8000238 <main+0xdc>)
 8000196:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800019a:	821a      	strh	r2, [r3, #16]
  myRing.RM_GPIO_Port=POTS_RM_GPIO_Port;
 800019c:	4b26      	ldr	r3, [pc, #152]	; (8000238 <main+0xdc>)
 800019e:	4a27      	ldr	r2, [pc, #156]	; (800023c <main+0xe0>)
 80001a0:	615a      	str	r2, [r3, #20]
  myRing.RM_Pin=POTS_RM_Pin;
 80001a2:	4b25      	ldr	r3, [pc, #148]	; (8000238 <main+0xdc>)
 80001a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80001a8:	831a      	strh	r2, [r3, #24]

  ringInit(&myRing);
 80001aa:	4823      	ldr	r0, [pc, #140]	; (8000238 <main+0xdc>)
 80001ac:	f000 fa19 	bl	80005e2 <ringInit>
  HAL_TIM_Base_Start_IT(&htim2);
 80001b0:	4823      	ldr	r0, [pc, #140]	; (8000240 <main+0xe4>)
 80001b2:	f002 f847 	bl	8002244 <HAL_TIM_Base_Start_IT>

  ///////////////////////////////////////////////////////////////
  //initialization of signaling module///////////////////////////
  ///////////////////////////////////////////////////////////////

  mySignaling.toneFrequency=450; //this is required tone frequency
 80001b6:	4b23      	ldr	r3, [pc, #140]	; (8000244 <main+0xe8>)
 80001b8:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80001bc:	811a      	strh	r2, [r3, #8]
  mySignaling.toneOnDuration=100;
 80001be:	4b21      	ldr	r3, [pc, #132]	; (8000244 <main+0xe8>)
 80001c0:	2264      	movs	r2, #100	; 0x64
 80001c2:	815a      	strh	r2, [r3, #10]
  mySignaling.toneOffDuration=100;
 80001c4:	4b1f      	ldr	r3, [pc, #124]	; (8000244 <main+0xe8>)
 80001c6:	2264      	movs	r2, #100	; 0x64
 80001c8:	819a      	strh	r2, [r3, #12]
  mySignaling.callBackFrequency=450; //currently the function is implemented that TIM3 cinterrupt frequency is equal to requested tone frequency
 80001ca:	4b1e      	ldr	r3, [pc, #120]	; (8000244 <main+0xe8>)
 80001cc:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80001d0:	601a      	str	r2, [r3, #0]
  mySignaling.fclk=8000000;
 80001d2:	4b1c      	ldr	r3, [pc, #112]	; (8000244 <main+0xe8>)
 80001d4:	4a1c      	ldr	r2, [pc, #112]	; (8000248 <main+0xec>)
 80001d6:	605a      	str	r2, [r3, #4]
  mySignaling.timer=&htim3;
 80001d8:	4b1a      	ldr	r3, [pc, #104]	; (8000244 <main+0xe8>)
 80001da:	4a1c      	ldr	r2, [pc, #112]	; (800024c <main+0xf0>)
 80001dc:	615a      	str	r2, [r3, #20]
  mySignaling.state=SIGNALING_STATE_TONE;
 80001de:	4b19      	ldr	r3, [pc, #100]	; (8000244 <main+0xe8>)
 80001e0:	2201      	movs	r2, #1
 80001e2:	741a      	strb	r2, [r3, #16]
  signalingInit(&mySignaling);
 80001e4:	4817      	ldr	r0, [pc, #92]	; (8000244 <main+0xe8>)
 80001e6:	f000 fadf 	bl	80007a8 <signalingInit>


  char buffer[16];
  snprintf(buffer, sizeof(buffer), "test %d", 45);
 80001ea:	4638      	mov	r0, r7
 80001ec:	232d      	movs	r3, #45	; 0x2d
 80001ee:	4a18      	ldr	r2, [pc, #96]	; (8000250 <main+0xf4>)
 80001f0:	2110      	movs	r1, #16
 80001f2:	f004 f949 	bl	8004488 <sniprintf>
  HAL_UART_Transmit_IT(&huart1, buffer, strlen(buffer));
 80001f6:	463b      	mov	r3, r7
 80001f8:	4618      	mov	r0, r3
 80001fa:	f7ff ffa7 	bl	800014c <strlen>
 80001fe:	4603      	mov	r3, r0
 8000200:	b29a      	uxth	r2, r3
 8000202:	463b      	mov	r3, r7
 8000204:	4619      	mov	r1, r3
 8000206:	4813      	ldr	r0, [pc, #76]	; (8000254 <main+0xf8>)
 8000208:	f003 fcda 	bl	8003bc0 <HAL_UART_Transmit_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(HAL_GPIO_ReadPin(POTS_SHK_GPIO_Port, POTS_SHK_Pin)){
 800020c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000210:	480a      	ldr	r0, [pc, #40]	; (800023c <main+0xe0>)
 8000212:	f001 f93d 	bl	8001490 <HAL_GPIO_ReadPin>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d006      	beq.n	800022a <main+0xce>
		HAL_GPIO_WritePin(POTS_LED_STAT_GPIO_Port, POTS_LED_STAT_Pin, GPIO_PIN_SET);
 800021c:	2201      	movs	r2, #1
 800021e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000222:	4806      	ldr	r0, [pc, #24]	; (800023c <main+0xe0>)
 8000224:	f001 f95a 	bl	80014dc <HAL_GPIO_WritePin>
 8000228:	e7f0      	b.n	800020c <main+0xb0>
	}
	else{
		HAL_GPIO_WritePin(POTS_LED_STAT_GPIO_Port, POTS_LED_STAT_Pin, GPIO_PIN_RESET);
 800022a:	2200      	movs	r2, #0
 800022c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000230:	4802      	ldr	r0, [pc, #8]	; (800023c <main+0xe0>)
 8000232:	f001 f953 	bl	80014dc <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(POTS_SHK_GPIO_Port, POTS_SHK_Pin)){
 8000236:	e7e9      	b.n	800020c <main+0xb0>
 8000238:	2000013c 	.word	0x2000013c
 800023c:	40010c00 	.word	0x40010c00
 8000240:	2000015c 	.word	0x2000015c
 8000244:	20000098 	.word	0x20000098
 8000248:	007a1200 	.word	0x007a1200
 800024c:	200000b0 	.word	0x200000b0
 8000250:	08004d3c 	.word	0x08004d3c
 8000254:	200000f8 	.word	0x200000f8

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b090      	sub	sp, #64	; 0x40
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 0318 	add.w	r3, r7, #24
 8000262:	2228      	movs	r2, #40	; 0x28
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f004 f906 	bl	8004478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]
 8000278:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027a:	2302      	movs	r3, #2
 800027c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027e:	2301      	movs	r3, #1
 8000280:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000282:	2310      	movs	r3, #16
 8000284:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000286:	2300      	movs	r3, #0
 8000288:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028a:	f107 0318 	add.w	r3, r7, #24
 800028e:	4618      	mov	r0, r3
 8000290:	f001 f97e 	bl	8001590 <HAL_RCC_OscConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800029a:	f000 f993 	bl	80005c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029e:	230f      	movs	r3, #15
 80002a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002a2:	2300      	movs	r3, #0
 80002a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 fcda 	bl	8001c70 <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002c2:	f000 f97f 	bl	80005c4 <Error_Handler>
  }
}
 80002c6:	bf00      	nop
 80002c8:	3740      	adds	r7, #64	; 0x40
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b086      	sub	sp, #24
 80002d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002d6:	f107 0308 	add.w	r3, r7, #8
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002e4:	463b      	mov	r3, r7
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002ec:	4b1d      	ldr	r3, [pc, #116]	; (8000364 <MX_TIM2_Init+0x94>)
 80002ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80002f4:	4b1b      	ldr	r3, [pc, #108]	; (8000364 <MX_TIM2_Init+0x94>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002fa:	4b1a      	ldr	r3, [pc, #104]	; (8000364 <MX_TIM2_Init+0x94>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 8000300:	4b18      	ldr	r3, [pc, #96]	; (8000364 <MX_TIM2_Init+0x94>)
 8000302:	22c8      	movs	r2, #200	; 0xc8
 8000304:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000306:	4b17      	ldr	r3, [pc, #92]	; (8000364 <MX_TIM2_Init+0x94>)
 8000308:	2200      	movs	r2, #0
 800030a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800030c:	4b15      	ldr	r3, [pc, #84]	; (8000364 <MX_TIM2_Init+0x94>)
 800030e:	2280      	movs	r2, #128	; 0x80
 8000310:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000312:	4814      	ldr	r0, [pc, #80]	; (8000364 <MX_TIM2_Init+0x94>)
 8000314:	f001 feec 	bl	80020f0 <HAL_TIM_Base_Init>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800031e:	f000 f951 	bl	80005c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000326:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000328:	f107 0308 	add.w	r3, r7, #8
 800032c:	4619      	mov	r1, r3
 800032e:	480d      	ldr	r0, [pc, #52]	; (8000364 <MX_TIM2_Init+0x94>)
 8000330:	f002 fcb8 	bl	8002ca4 <HAL_TIM_ConfigClockSource>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800033a:	f000 f943 	bl	80005c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800033e:	2300      	movs	r3, #0
 8000340:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000342:	2300      	movs	r3, #0
 8000344:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000346:	463b      	mov	r3, r7
 8000348:	4619      	mov	r1, r3
 800034a:	4806      	ldr	r0, [pc, #24]	; (8000364 <MX_TIM2_Init+0x94>)
 800034c:	f003 fad4 	bl	80038f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000356:	f000 f935 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800035a:	bf00      	nop
 800035c:	3718      	adds	r7, #24
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	2000015c 	.word	0x2000015c

08000368 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b08e      	sub	sp, #56	; 0x38
 800036c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800036e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	605a      	str	r2, [r3, #4]
 8000378:	609a      	str	r2, [r3, #8]
 800037a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800037c:	f107 0320 	add.w	r3, r7, #32
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	609a      	str	r2, [r3, #8]
 8000390:	60da      	str	r2, [r3, #12]
 8000392:	611a      	str	r2, [r3, #16]
 8000394:	615a      	str	r2, [r3, #20]
 8000396:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000398:	4b2c      	ldr	r3, [pc, #176]	; (800044c <MX_TIM3_Init+0xe4>)
 800039a:	4a2d      	ldr	r2, [pc, #180]	; (8000450 <MX_TIM3_Init+0xe8>)
 800039c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 18;
 800039e:	4b2b      	ldr	r3, [pc, #172]	; (800044c <MX_TIM3_Init+0xe4>)
 80003a0:	2212      	movs	r2, #18
 80003a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a4:	4b29      	ldr	r3, [pc, #164]	; (800044c <MX_TIM3_Init+0xe4>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1024;
 80003aa:	4b28      	ldr	r3, [pc, #160]	; (800044c <MX_TIM3_Init+0xe4>)
 80003ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003b2:	4b26      	ldr	r3, [pc, #152]	; (800044c <MX_TIM3_Init+0xe4>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003b8:	4b24      	ldr	r3, [pc, #144]	; (800044c <MX_TIM3_Init+0xe4>)
 80003ba:	2280      	movs	r2, #128	; 0x80
 80003bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003be:	4823      	ldr	r0, [pc, #140]	; (800044c <MX_TIM3_Init+0xe4>)
 80003c0:	f001 fe96 	bl	80020f0 <HAL_TIM_Base_Init>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80003ca:	f000 f8fb 	bl	80005c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003d8:	4619      	mov	r1, r3
 80003da:	481c      	ldr	r0, [pc, #112]	; (800044c <MX_TIM3_Init+0xe4>)
 80003dc:	f002 fc62 	bl	8002ca4 <HAL_TIM_ConfigClockSource>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80003e6:	f000 f8ed 	bl	80005c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80003ea:	4818      	ldr	r0, [pc, #96]	; (800044c <MX_TIM3_Init+0xe4>)
 80003ec:	f001 ff96 	bl	800231c <HAL_TIM_PWM_Init>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80003f6:	f000 f8e5 	bl	80005c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003fa:	2300      	movs	r3, #0
 80003fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003fe:	2300      	movs	r3, #0
 8000400:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000402:	f107 0320 	add.w	r3, r7, #32
 8000406:	4619      	mov	r1, r3
 8000408:	4810      	ldr	r0, [pc, #64]	; (800044c <MX_TIM3_Init+0xe4>)
 800040a:	f003 fa75 	bl	80038f8 <HAL_TIMEx_MasterConfigSynchronization>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000414:	f000 f8d6 	bl	80005c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000418:	2360      	movs	r3, #96	; 0x60
 800041a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800041c:	2300      	movs	r3, #0
 800041e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000420:	2300      	movs	r3, #0
 8000422:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000424:	2300      	movs	r3, #0
 8000426:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	220c      	movs	r2, #12
 800042c:	4619      	mov	r1, r3
 800042e:	4807      	ldr	r0, [pc, #28]	; (800044c <MX_TIM3_Init+0xe4>)
 8000430:	f002 fad2 	bl	80029d8 <HAL_TIM_PWM_ConfigChannel>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800043a:	f000 f8c3 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800043e:	4803      	ldr	r0, [pc, #12]	; (800044c <MX_TIM3_Init+0xe4>)
 8000440:	f000 fa44 	bl	80008cc <HAL_TIM_MspPostInit>

}
 8000444:	bf00      	nop
 8000446:	3738      	adds	r7, #56	; 0x38
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	200000b0 	.word	0x200000b0
 8000450:	40000400 	.word	0x40000400

08000454 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000458:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 800045a:	4a12      	ldr	r2, [pc, #72]	; (80004a4 <MX_USART1_UART_Init+0x50>)
 800045c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800045e:	4b10      	ldr	r3, [pc, #64]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 8000460:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000464:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000466:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 8000468:	2200      	movs	r2, #0
 800046a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800046c:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 800046e:	2200      	movs	r2, #0
 8000470:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000472:	4b0b      	ldr	r3, [pc, #44]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 8000474:	2200      	movs	r2, #0
 8000476:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000478:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 800047a:	220c      	movs	r2, #12
 800047c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800047e:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 8000480:	2200      	movs	r2, #0
 8000482:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 8000486:	2200      	movs	r2, #0
 8000488:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800048a:	4805      	ldr	r0, [pc, #20]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 800048c:	f003 faf0 	bl	8003a70 <HAL_UART_Init>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000496:	f000 f895 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800049a:	bf00      	nop
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	200000f8 	.word	0x200000f8
 80004a4:	40013800 	.word	0x40013800

080004a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ae:	f107 0310 	add.w	r3, r7, #16
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004bc:	4b2f      	ldr	r3, [pc, #188]	; (800057c <MX_GPIO_Init+0xd4>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a2e      	ldr	r2, [pc, #184]	; (800057c <MX_GPIO_Init+0xd4>)
 80004c2:	f043 0310 	orr.w	r3, r3, #16
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b2c      	ldr	r3, [pc, #176]	; (800057c <MX_GPIO_Init+0xd4>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0310 	and.w	r3, r3, #16
 80004d0:	60fb      	str	r3, [r7, #12]
 80004d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d4:	4b29      	ldr	r3, [pc, #164]	; (800057c <MX_GPIO_Init+0xd4>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a28      	ldr	r2, [pc, #160]	; (800057c <MX_GPIO_Init+0xd4>)
 80004da:	f043 0308 	orr.w	r3, r3, #8
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b26      	ldr	r3, [pc, #152]	; (800057c <MX_GPIO_Init+0xd4>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0308 	and.w	r3, r3, #8
 80004e8:	60bb      	str	r3, [r7, #8]
 80004ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ec:	4b23      	ldr	r3, [pc, #140]	; (800057c <MX_GPIO_Init+0xd4>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a22      	ldr	r2, [pc, #136]	; (800057c <MX_GPIO_Init+0xd4>)
 80004f2:	f043 0304 	orr.w	r3, r3, #4
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b20      	ldr	r3, [pc, #128]	; (800057c <MX_GPIO_Init+0xd4>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f003 0304 	and.w	r3, r3, #4
 8000500:	607b      	str	r3, [r7, #4]
 8000502:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800050a:	481d      	ldr	r0, [pc, #116]	; (8000580 <MX_GPIO_Init+0xd8>)
 800050c:	f000 ffe6 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, POTS_RM_Pin|POTS_FR_Pin|POTS_LED_STAT_Pin, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000516:	481b      	ldr	r0, [pc, #108]	; (8000584 <MX_GPIO_Init+0xdc>)
 8000518:	f000 ffe0 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800051c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000520:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000522:	2301      	movs	r3, #1
 8000524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	2300      	movs	r3, #0
 8000528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052a:	2302      	movs	r3, #2
 800052c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800052e:	f107 0310 	add.w	r3, r7, #16
 8000532:	4619      	mov	r1, r3
 8000534:	4812      	ldr	r0, [pc, #72]	; (8000580 <MX_GPIO_Init+0xd8>)
 8000536:	f000 fd3b 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : POTS_SHK_Pin */
  GPIO_InitStruct.Pin = POTS_SHK_Pin;
 800053a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800053e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(POTS_SHK_GPIO_Port, &GPIO_InitStruct);
 8000548:	f107 0310 	add.w	r3, r7, #16
 800054c:	4619      	mov	r1, r3
 800054e:	480d      	ldr	r0, [pc, #52]	; (8000584 <MX_GPIO_Init+0xdc>)
 8000550:	f000 fd2e 	bl	8000fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : POTS_RM_Pin POTS_FR_Pin POTS_LED_STAT_Pin */
  GPIO_InitStruct.Pin = POTS_RM_Pin|POTS_FR_Pin|POTS_LED_STAT_Pin;
 8000554:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000558:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055a:	2301      	movs	r3, #1
 800055c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2300      	movs	r3, #0
 8000560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000562:	2302      	movs	r3, #2
 8000564:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000566:	f107 0310 	add.w	r3, r7, #16
 800056a:	4619      	mov	r1, r3
 800056c:	4805      	ldr	r0, [pc, #20]	; (8000584 <MX_GPIO_Init+0xdc>)
 800056e:	f000 fd1f 	bl	8000fb0 <HAL_GPIO_Init>

}
 8000572:	bf00      	nop
 8000574:	3720      	adds	r7, #32
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40021000 	.word	0x40021000
 8000580:	40011000 	.word	0x40011000
 8000584:	40010c00 	.word	0x40010c00

08000588 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
	if(htim->Instance==TIM2)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000598:	d102      	bne.n	80005a0 <HAL_TIM_PeriodElapsedCallback+0x18>
		ringCallback(&myRing);
 800059a:	4807      	ldr	r0, [pc, #28]	; (80005b8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800059c:	f000 f83c 	bl	8000618 <ringCallback>
	if(htim->Instance==TIM3)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a05      	ldr	r2, [pc, #20]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d102      	bne.n	80005b0 <HAL_TIM_PeriodElapsedCallback+0x28>
		signalingCallback(&mySignaling);
 80005aa:	4805      	ldr	r0, [pc, #20]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80005ac:	f000 f8b4 	bl	8000718 <signalingCallback>
	//////////

}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	2000013c 	.word	0x2000013c
 80005bc:	40000400 	.word	0x40000400
 80005c0:	20000098 	.word	0x20000098

080005c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c8:	b672      	cpsid	i
}
 80005ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005cc:	e7fe      	b.n	80005cc <Error_Handler+0x8>

080005ce <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80005ce:	b480      	push	{r7}
 80005d0:	b083      	sub	sp, #12
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
 80005d6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	bc80      	pop	{r7}
 80005e0:	4770      	bx	lr

080005e2 <ringInit>:
  * @brief  initialize ringing module
  * @param  ring: pointer to a structure of type ringer_t. This structure contains state of the ringing module
  * @retval None
  */
void ringInit(ringer_t *ring)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b082      	sub	sp, #8
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
	ring->callBackCounterBurst=0;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2200      	movs	r2, #0
 80005ee:	835a      	strh	r2, [r3, #26]
	HAL_GPIO_WritePin(ring->FR_GPIO_Port, ring->FR_Pin, GPIO_PIN_RESET);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	68d8      	ldr	r0, [r3, #12]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	8a1b      	ldrh	r3, [r3, #16]
 80005f8:	2200      	movs	r2, #0
 80005fa:	4619      	mov	r1, r3
 80005fc:	f000 ff6e 	bl	80014dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ring->RM_GPIO_Port, ring->RM_Pin, GPIO_PIN_RESET);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	6958      	ldr	r0, [r3, #20]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	8b1b      	ldrh	r3, [r3, #24]
 8000608:	2200      	movs	r2, #0
 800060a:	4619      	mov	r1, r3
 800060c:	f000 ff66 	bl	80014dc <HAL_GPIO_WritePin>
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <ringCallback>:
  * @brief  callback for ringer module - This function must be called with frequency specified in ring->callBackFrequency
  * @param  ring: pointer to a structure of type ringer_t. This structure contains state of the ringing module
  * @retval None
  */
void ringCallback(ringer_t *ring)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	//generating ringing base frequency
	ring->callBackCounterBurst++;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	8b5b      	ldrh	r3, [r3, #26]
 8000624:	3301      	adds	r3, #1
 8000626:	b29a      	uxth	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	835a      	strh	r2, [r3, #26]
	if(ring->callBackCounterBurst>((ring->callBackFrequency)/(2*(ring->burstFrequency)))) //two times because there are two slopes in one period, this way generated frequency will be really expressed in Hz
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	8b5b      	ldrh	r3, [r3, #26]
 8000630:	4619      	mov	r1, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	8892      	ldrh	r2, [r2, #4]
 800063a:	0052      	lsls	r2, r2, #1
 800063c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000640:	4299      	cmp	r1, r3
 8000642:	d962      	bls.n	800070a <ringCallback+0xf2>
	{
		ring->callBackCounterBurst=0;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2200      	movs	r2, #0
 8000648:	835a      	strh	r2, [r3, #26]
		ring->callBackCounterDuration++;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	8b9b      	ldrh	r3, [r3, #28]
 800064e:	3301      	adds	r3, #1
 8000650:	b29a      	uxth	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	839a      	strh	r2, [r3, #28]
		switch(ring->state)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	7f9b      	ldrb	r3, [r3, #30]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d002      	beq.n	8000664 <ringCallback+0x4c>
 800065e:	2b02      	cmp	r3, #2
 8000660:	d02c      	beq.n	80006bc <ringCallback+0xa4>
 8000662:	e03e      	b.n	80006e2 <ringCallback+0xca>
			{
				case RINGER_RINGING_BURST:
					if(ring->callBackCounterDuration<40)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	8b9b      	ldrh	r3, [r3, #28]
 8000668:	2b27      	cmp	r3, #39	; 0x27
 800066a:	d810      	bhi.n	800068e <ringCallback+0x76>
					{
						HAL_GPIO_WritePin(ring->RM_GPIO_Port, ring->RM_Pin, GPIO_PIN_SET);// ringing mode should be already enabled here but let's make sure
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6958      	ldr	r0, [r3, #20]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	8b1b      	ldrh	r3, [r3, #24]
 8000674:	2201      	movs	r2, #1
 8000676:	4619      	mov	r1, r3
 8000678:	f000 ff30 	bl	80014dc <HAL_GPIO_WritePin>
						HAL_GPIO_TogglePin(ring->FR_GPIO_Port, ring->FR_Pin); //toggle FR pin - this generates a tone in the attached telephone
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	68da      	ldr	r2, [r3, #12]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	8a1b      	ldrh	r3, [r3, #16]
 8000684:	4619      	mov	r1, r3
 8000686:	4610      	mov	r0, r2
 8000688:	f000 ff5a 	bl	8001540 <HAL_GPIO_TogglePin>
						HAL_GPIO_WritePin(ring->FR_GPIO_Port, ring->FR_Pin, GPIO_PIN_RESET); //ensure FR pin goes back to its default state
						HAL_GPIO_WritePin(ring->RM_GPIO_Port, ring->RM_Pin, GPIO_PIN_RESET); //disable ringing mode in the KS0835 moduleHAL_GPIO_WritePin(ring->FR_GPIO_Port, ring->FR_Pin, GPIO_PIN_RESET);
						ring->callBackCounterDuration=0;
						ring->state=RINGER_RINGING_PAUSE;
					}
					break;
 800068c:	e040      	b.n	8000710 <ringCallback+0xf8>
						HAL_GPIO_WritePin(ring->FR_GPIO_Port, ring->FR_Pin, GPIO_PIN_RESET); //ensure FR pin goes back to its default state
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	68d8      	ldr	r0, [r3, #12]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	8a1b      	ldrh	r3, [r3, #16]
 8000696:	2200      	movs	r2, #0
 8000698:	4619      	mov	r1, r3
 800069a:	f000 ff1f 	bl	80014dc <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(ring->RM_GPIO_Port, ring->RM_Pin, GPIO_PIN_RESET); //disable ringing mode in the KS0835 moduleHAL_GPIO_WritePin(ring->FR_GPIO_Port, ring->FR_Pin, GPIO_PIN_RESET);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6958      	ldr	r0, [r3, #20]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	8b1b      	ldrh	r3, [r3, #24]
 80006a6:	2200      	movs	r2, #0
 80006a8:	4619      	mov	r1, r3
 80006aa:	f000 ff17 	bl	80014dc <HAL_GPIO_WritePin>
						ring->callBackCounterDuration=0;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2200      	movs	r2, #0
 80006b2:	839a      	strh	r2, [r3, #28]
						ring->state=RINGER_RINGING_PAUSE;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2202      	movs	r2, #2
 80006b8:	779a      	strb	r2, [r3, #30]
					break;
 80006ba:	e029      	b.n	8000710 <ringCallback+0xf8>
				case RINGER_RINGING_PAUSE:
					if(ring->callBackCounterDuration>80)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	8b9b      	ldrh	r3, [r3, #28]
 80006c0:	2b50      	cmp	r3, #80	; 0x50
 80006c2:	d924      	bls.n	800070e <ringCallback+0xf6>
						{
							ring->callBackCounterDuration=0;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2200      	movs	r2, #0
 80006c8:	839a      	strh	r2, [r3, #28]
							ring->state=RINGER_RINGING_BURST;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2201      	movs	r2, #1
 80006ce:	779a      	strb	r2, [r3, #30]
							HAL_GPIO_WritePin(ring->RM_GPIO_Port, ring->RM_Pin, GPIO_PIN_SET);// enable ringing mode
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6958      	ldr	r0, [r3, #20]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	8b1b      	ldrh	r3, [r3, #24]
 80006d8:	2201      	movs	r2, #1
 80006da:	4619      	mov	r1, r3
 80006dc:	f000 fefe 	bl	80014dc <HAL_GPIO_WritePin>
						}
					break;
 80006e0:	e015      	b.n	800070e <ringCallback+0xf6>
				case RINGER_OFF:
				default:
					HAL_GPIO_WritePin(ring->FR_GPIO_Port, ring->FR_Pin, GPIO_PIN_RESET); //ensure line goes into default polarity
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	68d8      	ldr	r0, [r3, #12]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	8a1b      	ldrh	r3, [r3, #16]
 80006ea:	2200      	movs	r2, #0
 80006ec:	4619      	mov	r1, r3
 80006ee:	f000 fef5 	bl	80014dc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(ring->RM_GPIO_Port, ring->RM_Pin, GPIO_PIN_RESET); //disable ringing mode in the KS0835 module
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	6958      	ldr	r0, [r3, #20]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	8b1b      	ldrh	r3, [r3, #24]
 80006fa:	2200      	movs	r2, #0
 80006fc:	4619      	mov	r1, r3
 80006fe:	f000 feed 	bl	80014dc <HAL_GPIO_WritePin>
					ring->callBackCounterDuration=0;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2200      	movs	r2, #0
 8000706:	839a      	strh	r2, [r3, #28]

					break;
 8000708:	e002      	b.n	8000710 <ringCallback+0xf8>
			}



	}
 800070a:	bf00      	nop
 800070c:	e000      	b.n	8000710 <ringCallback+0xf8>
					break;
 800070e:	bf00      	nop


	//generating burst duration and pause


}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <signalingCallback>:

#include "signaling.h"



void signalingCallback(signaling_t *signaling){
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	signaling->callBackCounterDuration++;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	89db      	ldrh	r3, [r3, #14]
 8000724:	3301      	adds	r3, #1
 8000726:	b29a      	uxth	r2, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	81da      	strh	r2, [r3, #14]

	switch(signaling->state)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	7c1b      	ldrb	r3, [r3, #16]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d002      	beq.n	800073a <signalingCallback+0x22>
 8000734:	2b02      	cmp	r3, #2
 8000736:	d013      	beq.n	8000760 <signalingCallback+0x48>
 8000738:	e025      	b.n	8000786 <signalingCallback+0x6e>
	{
	case SIGNALING_STATE_TONE: //in this state a tone is beeing generated
		if(signaling->callBackCounterDuration>=signaling->toneOnDuration){ //if the tone has been generated long enough
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	89da      	ldrh	r2, [r3, #14]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	895b      	ldrh	r3, [r3, #10]
 8000742:	429a      	cmp	r2, r3
 8000744:	d329      	bcc.n	800079a <signalingCallback+0x82>
			HAL_TIM_PWM_Stop(signaling->timer, TIM_CHANNEL_4); 	//stop generating tone
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	210c      	movs	r1, #12
 800074c:	4618      	mov	r0, r3
 800074e:	f001 ff87 	bl	8002660 <HAL_TIM_PWM_Stop>
			signaling->state=SIGNALING_STATE_PAUSE;				//change state to SIGNALING_STATE_PASUE
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2202      	movs	r2, #2
 8000756:	741a      	strb	r2, [r3, #16]
			signaling->callBackCounterDuration=0; 				//reset counter
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2200      	movs	r2, #0
 800075c:	81da      	strh	r2, [r3, #14]
			}

		break;
 800075e:	e01c      	b.n	800079a <signalingCallback+0x82>
	case SIGNALING_STATE_PAUSE:
		if(signaling->callBackCounterDuration>=signaling->toneOffDuration){ //if the pause has been generated long enough
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	89da      	ldrh	r2, [r3, #14]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	899b      	ldrh	r3, [r3, #12]
 8000768:	429a      	cmp	r2, r3
 800076a:	d318      	bcc.n	800079e <signalingCallback+0x86>
			HAL_TIM_PWM_Start(signaling->timer, TIM_CHANNEL_4); 	//start generating tone
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	695b      	ldr	r3, [r3, #20]
 8000770:	210c      	movs	r1, #12
 8000772:	4618      	mov	r0, r3
 8000774:	f001 fe86 	bl	8002484 <HAL_TIM_PWM_Start>
			signaling->state=SIGNALING_STATE_TONE;				//change state to SIGNALING_STATE_PASUE
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	741a      	strb	r2, [r3, #16]
			signaling->callBackCounterDuration=0; 				//reset counter
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2200      	movs	r2, #0
 8000782:	81da      	strh	r2, [r3, #14]
			}

		break;
 8000784:	e00b      	b.n	800079e <signalingCallback+0x86>
	case SIGNALING_STATE_OFF:
	default:
		HAL_TIM_PWM_Stop(signaling->timer, TIM_CHANNEL_4); 	//stop generating tone
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	210c      	movs	r1, #12
 800078c:	4618      	mov	r0, r3
 800078e:	f001 ff67 	bl	8002660 <HAL_TIM_PWM_Stop>
		signaling->callBackCounterDuration=0;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2200      	movs	r2, #0
 8000796:	81da      	strh	r2, [r3, #14]
		break;
 8000798:	e002      	b.n	80007a0 <signalingCallback+0x88>
		break;
 800079a:	bf00      	nop
 800079c:	e000      	b.n	80007a0 <signalingCallback+0x88>
		break;
 800079e:	bf00      	nop

	}

}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <signalingInit>:


//currently this function assumes that PWM channel 4 is used
//it is not reconfigurable on the fly for other PWM channels
void signalingInit(signaling_t *signaling){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

	uint32_t psc; //psc is prescaler value needed for PWM channel to generate required frequency
	uint16_t ccr; //ccr is defining duty cycle of generated PWM

	psc=(signaling->fclk)/(signaling->toneFrequency);	//calculate necessary prescaller value
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	8912      	ldrh	r2, [r2, #8]
 80007b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80007bc:	60fb      	str	r3, [r7, #12]
	if(psc<UINT16_MAX){ //timer can accept only 16 bit results
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d812      	bhi.n	80007ee <signalingInit+0x46>
		ccr=psc/2;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	085b      	lsrs	r3, r3, #1
 80007cc:	817b      	strh	r3, [r7, #10]
		signaling->timer->Instance->PSC=psc;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	68fa      	ldr	r2, [r7, #12]
 80007d6:	629a      	str	r2, [r3, #40]	; 0x28
		signaling->timer->Instance->CCR4=ccr; //50% duty cycle fo generated square signal
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	695b      	ldr	r3, [r3, #20]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	897a      	ldrh	r2, [r7, #10]
 80007e0:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_PWM_Start(signaling->timer, TIM_CHANNEL_4);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	210c      	movs	r1, #12
 80007e8:	4618      	mov	r0, r3
 80007ea:	f001 fe4b 	bl	8002484 <HAL_TIM_PWM_Start>
	}
	//return 1;



}
 80007ee:	bf00      	nop
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <HAL_MspInit+0x5c>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	4a14      	ldr	r2, [pc, #80]	; (8000854 <HAL_MspInit+0x5c>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6193      	str	r3, [r2, #24]
 800080a:	4b12      	ldr	r3, [pc, #72]	; (8000854 <HAL_MspInit+0x5c>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <HAL_MspInit+0x5c>)
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	4a0e      	ldr	r2, [pc, #56]	; (8000854 <HAL_MspInit+0x5c>)
 800081c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000820:	61d3      	str	r3, [r2, #28]
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <HAL_MspInit+0x5c>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <HAL_MspInit+0x60>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	4a04      	ldr	r2, [pc, #16]	; (8000858 <HAL_MspInit+0x60>)
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	40021000 	.word	0x40021000
 8000858:	40010000 	.word	0x40010000

0800085c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800086c:	d114      	bne.n	8000898 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <HAL_TIM_Base_MspInit+0x68>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	4a14      	ldr	r2, [pc, #80]	; (80008c4 <HAL_TIM_Base_MspInit+0x68>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	61d3      	str	r3, [r2, #28]
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <HAL_TIM_Base_MspInit+0x68>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	201c      	movs	r0, #28
 800088c:	f000 fa90 	bl	8000db0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000890:	201c      	movs	r0, #28
 8000892:	f000 fab9 	bl	8000e08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000896:	e010      	b.n	80008ba <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <HAL_TIM_Base_MspInit+0x6c>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d10b      	bne.n	80008ba <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <HAL_TIM_Base_MspInit+0x68>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	4a07      	ldr	r2, [pc, #28]	; (80008c4 <HAL_TIM_Base_MspInit+0x68>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	61d3      	str	r3, [r2, #28]
 80008ae:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <HAL_TIM_Base_MspInit+0x68>)
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
}
 80008ba:	bf00      	nop
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000
 80008c8:	40000400 	.word	0x40000400

080008cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b088      	sub	sp, #32
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a0f      	ldr	r2, [pc, #60]	; (8000924 <HAL_TIM_MspPostInit+0x58>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d117      	bne.n	800091c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ec:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <HAL_TIM_MspPostInit+0x5c>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a0d      	ldr	r2, [pc, #52]	; (8000928 <HAL_TIM_MspPostInit+0x5c>)
 80008f2:	f043 0308 	orr.w	r3, r3, #8
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <HAL_TIM_MspPostInit+0x5c>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0308 	and.w	r3, r3, #8
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = AU_PWM_Pin;
 8000904:	2302      	movs	r3, #2
 8000906:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2302      	movs	r3, #2
 800090e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AU_PWM_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 0310 	add.w	r3, r7, #16
 8000914:	4619      	mov	r1, r3
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <HAL_TIM_MspPostInit+0x60>)
 8000918:	f000 fb4a 	bl	8000fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800091c:	bf00      	nop
 800091e:	3720      	adds	r7, #32
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40000400 	.word	0x40000400
 8000928:	40021000 	.word	0x40021000
 800092c:	40010c00 	.word	0x40010c00

08000930 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 0310 	add.w	r3, r7, #16
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a20      	ldr	r2, [pc, #128]	; (80009cc <HAL_UART_MspInit+0x9c>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d139      	bne.n	80009c4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000950:	4b1f      	ldr	r3, [pc, #124]	; (80009d0 <HAL_UART_MspInit+0xa0>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	4a1e      	ldr	r2, [pc, #120]	; (80009d0 <HAL_UART_MspInit+0xa0>)
 8000956:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095a:	6193      	str	r3, [r2, #24]
 800095c:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <HAL_UART_MspInit+0xa0>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000968:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <HAL_UART_MspInit+0xa0>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	4a18      	ldr	r2, [pc, #96]	; (80009d0 <HAL_UART_MspInit+0xa0>)
 800096e:	f043 0304 	orr.w	r3, r3, #4
 8000972:	6193      	str	r3, [r2, #24]
 8000974:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <HAL_UART_MspInit+0xa0>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	f003 0304 	and.w	r3, r3, #4
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = POTS_DEBUG_TX_Pin;
 8000980:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000984:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800098a:	2303      	movs	r3, #3
 800098c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POTS_DEBUG_TX_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 0310 	add.w	r3, r7, #16
 8000992:	4619      	mov	r1, r3
 8000994:	480f      	ldr	r0, [pc, #60]	; (80009d4 <HAL_UART_MspInit+0xa4>)
 8000996:	f000 fb0b 	bl	8000fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTS_DEBUG_RX_Pin;
 800099a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800099e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(POTS_DEBUG_RX_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 0310 	add.w	r3, r7, #16
 80009ac:	4619      	mov	r1, r3
 80009ae:	4809      	ldr	r0, [pc, #36]	; (80009d4 <HAL_UART_MspInit+0xa4>)
 80009b0:	f000 fafe 	bl	8000fb0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2100      	movs	r1, #0
 80009b8:	2025      	movs	r0, #37	; 0x25
 80009ba:	f000 f9f9 	bl	8000db0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009be:	2025      	movs	r0, #37	; 0x25
 80009c0:	f000 fa22 	bl	8000e08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009c4:	bf00      	nop
 80009c6:	3720      	adds	r7, #32
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40013800 	.word	0x40013800
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40010800 	.word	0x40010800

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <NMI_Handler+0x4>

080009de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <HardFault_Handler+0x4>

080009e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <MemManage_Handler+0x4>

080009ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <BusFault_Handler+0x4>

080009f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <UsageFault_Handler+0x4>

080009f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr

08000a02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr

08000a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bc80      	pop	{r7}
 8000a18:	4770      	bx	lr

08000a1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1e:	f000 f8bf 	bl	8000ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <TIM2_IRQHandler+0x10>)
 8000a2e:	f001 fecb 	bl	80027c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	2000015c 	.word	0x2000015c

08000a3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <USART1_IRQHandler+0x10>)
 8000a42:	f003 f901 	bl	8003c48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200000f8 	.word	0x200000f8

08000a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a58:	4a14      	ldr	r2, [pc, #80]	; (8000aac <_sbrk+0x5c>)
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <_sbrk+0x60>)
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <_sbrk+0x64>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d102      	bne.n	8000a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <_sbrk+0x64>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <_sbrk+0x68>)
 8000a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <_sbrk+0x64>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4413      	add	r3, r2
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d207      	bcs.n	8000a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a80:	f003 fcd0 	bl	8004424 <__errno>
 8000a84:	4603      	mov	r3, r0
 8000a86:	220c      	movs	r2, #12
 8000a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	e009      	b.n	8000aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a96:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	4a05      	ldr	r2, [pc, #20]	; (8000ab4 <_sbrk+0x64>)
 8000aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3718      	adds	r7, #24
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20005000 	.word	0x20005000
 8000ab0:	00000400 	.word	0x00000400
 8000ab4:	2000008c 	.word	0x2000008c
 8000ab8:	200001b8 	.word	0x200001b8

08000abc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr

08000ac8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac8:	480c      	ldr	r0, [pc, #48]	; (8000afc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aca:	490d      	ldr	r1, [pc, #52]	; (8000b00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000acc:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad0:	e002      	b.n	8000ad8 <LoopCopyDataInit>

08000ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad6:	3304      	adds	r3, #4

08000ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000adc:	d3f9      	bcc.n	8000ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ae0:	4c0a      	ldr	r4, [pc, #40]	; (8000b0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae4:	e001      	b.n	8000aea <LoopFillZerobss>

08000ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae8:	3204      	adds	r2, #4

08000aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aec:	d3fb      	bcc.n	8000ae6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000aee:	f7ff ffe5 	bl	8000abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000af2:	f003 fc9d 	bl	8004430 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000af6:	f7ff fb31 	bl	800015c <main>
  bx lr
 8000afa:	4770      	bx	lr
  ldr r0, =_sdata
 8000afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b04:	08004f08 	.word	0x08004f08
  ldr r2, =_sbss
 8000b08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b0c:	200001b8 	.word	0x200001b8

08000b10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b10:	e7fe      	b.n	8000b10 <ADC1_2_IRQHandler>
	...

08000b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_Init+0x28>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <HAL_Init+0x28>)
 8000b1e:	f043 0310 	orr.w	r3, r3, #16
 8000b22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b24:	2003      	movs	r0, #3
 8000b26:	f000 f923 	bl	8000d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2a:	200f      	movs	r0, #15
 8000b2c:	f000 f808 	bl	8000b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b30:	f7ff fe62 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40022000 	.word	0x40022000

08000b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_InitTick+0x54>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_InitTick+0x58>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	4619      	mov	r1, r3
 8000b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 f96a 	bl	8000e38 <HAL_SYSTICK_Config>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00e      	b.n	8000b8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b0f      	cmp	r3, #15
 8000b72:	d80a      	bhi.n	8000b8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b74:	2200      	movs	r2, #0
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7c:	f000 f918 	bl	8000db0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b80:	4a06      	ldr	r2, [pc, #24]	; (8000b9c <HAL_InitTick+0x5c>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b86:	2300      	movs	r3, #0
 8000b88:	e000      	b.n	8000b8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000000 	.word	0x20000000
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	20000004 	.word	0x20000004

08000ba0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <HAL_IncTick+0x1c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <HAL_IncTick+0x20>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	4a03      	ldr	r2, [pc, #12]	; (8000bc0 <HAL_IncTick+0x20>)
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	200001a4 	.word	0x200001a4

08000bc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc8:	4b02      	ldr	r3, [pc, #8]	; (8000bd4 <HAL_GetTick+0x10>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	200001a4 	.word	0x200001a4

08000bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0a:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	60d3      	str	r3, [r2, #12]
}
 8000c10:	bf00      	nop
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c24:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <__NVIC_GetPriorityGrouping+0x18>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	0a1b      	lsrs	r3, r3, #8
 8000c2a:	f003 0307 	and.w	r3, r3, #7
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	db0b      	blt.n	8000c66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	f003 021f 	and.w	r2, r3, #31
 8000c54:	4906      	ldr	r1, [pc, #24]	; (8000c70 <__NVIC_EnableIRQ+0x34>)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	095b      	lsrs	r3, r3, #5
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	e000e100 	.word	0xe000e100

08000c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	db0a      	blt.n	8000c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	490c      	ldr	r1, [pc, #48]	; (8000cc0 <__NVIC_SetPriority+0x4c>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	0112      	lsls	r2, r2, #4
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	440b      	add	r3, r1
 8000c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c9c:	e00a      	b.n	8000cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4908      	ldr	r1, [pc, #32]	; (8000cc4 <__NVIC_SetPriority+0x50>)
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	3b04      	subs	r3, #4
 8000cac:	0112      	lsls	r2, r2, #4
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	440b      	add	r3, r1
 8000cb2:	761a      	strb	r2, [r3, #24]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000e100 	.word	0xe000e100
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b089      	sub	sp, #36	; 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f1c3 0307 	rsb	r3, r3, #7
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	bf28      	it	cs
 8000ce6:	2304      	movcs	r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3304      	adds	r3, #4
 8000cee:	2b06      	cmp	r3, #6
 8000cf0:	d902      	bls.n	8000cf8 <NVIC_EncodePriority+0x30>
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3b03      	subs	r3, #3
 8000cf6:	e000      	b.n	8000cfa <NVIC_EncodePriority+0x32>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43da      	mvns	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d10:	f04f 31ff 	mov.w	r1, #4294967295
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	43d9      	mvns	r1, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	4313      	orrs	r3, r2
         );
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3724      	adds	r7, #36	; 0x24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr

08000d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d3c:	d301      	bcc.n	8000d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00f      	b.n	8000d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <SysTick_Config+0x40>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4a:	210f      	movs	r1, #15
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f7ff ff90 	bl	8000c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <SysTick_Config+0x40>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <SysTick_Config+0x40>)
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	e000e010 	.word	0xe000e010

08000d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b07      	cmp	r3, #7
 8000d7c:	d00f      	beq.n	8000d9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b06      	cmp	r3, #6
 8000d82:	d00c      	beq.n	8000d9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b05      	cmp	r3, #5
 8000d88:	d009      	beq.n	8000d9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b04      	cmp	r3, #4
 8000d8e:	d006      	beq.n	8000d9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	d003      	beq.n	8000d9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d96:	2192      	movs	r1, #146	; 0x92
 8000d98:	4804      	ldr	r0, [pc, #16]	; (8000dac <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000d9a:	f7ff fc18 	bl	80005ce <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff ff1a 	bl	8000bd8 <__NVIC_SetPriorityGrouping>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	08004d44 	.word	0x08004d44

08000db0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
 8000dbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d903      	bls.n	8000dd0 <HAL_NVIC_SetPriority+0x20>
 8000dc8:	21aa      	movs	r1, #170	; 0xaa
 8000dca:	480e      	ldr	r0, [pc, #56]	; (8000e04 <HAL_NVIC_SetPriority+0x54>)
 8000dcc:	f7ff fbff 	bl	80005ce <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	2b0f      	cmp	r3, #15
 8000dd4:	d903      	bls.n	8000dde <HAL_NVIC_SetPriority+0x2e>
 8000dd6:	21ab      	movs	r1, #171	; 0xab
 8000dd8:	480a      	ldr	r0, [pc, #40]	; (8000e04 <HAL_NVIC_SetPriority+0x54>)
 8000dda:	f7ff fbf8 	bl	80005ce <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dde:	f7ff ff1f 	bl	8000c20 <__NVIC_GetPriorityGrouping>
 8000de2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	68b9      	ldr	r1, [r7, #8]
 8000de8:	6978      	ldr	r0, [r7, #20]
 8000dea:	f7ff ff6d 	bl	8000cc8 <NVIC_EncodePriority>
 8000dee:	4602      	mov	r2, r0
 8000df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df4:	4611      	mov	r1, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff3c 	bl	8000c74 <__NVIC_SetPriority>
}
 8000dfc:	bf00      	nop
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	08004d44 	.word	0x08004d44

08000e08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	da03      	bge.n	8000e22 <HAL_NVIC_EnableIRQ+0x1a>
 8000e1a:	21be      	movs	r1, #190	; 0xbe
 8000e1c:	4805      	ldr	r0, [pc, #20]	; (8000e34 <HAL_NVIC_EnableIRQ+0x2c>)
 8000e1e:	f7ff fbd6 	bl	80005ce <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ff08 	bl	8000c3c <__NVIC_EnableIRQ>
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	08004d44 	.word	0x08004d44

08000e38 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff ff73 	bl	8000d2c <SysTick_Config>
 8000e46:	4603      	mov	r3, r0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d008      	beq.n	8000e78 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2204      	movs	r2, #4
 8000e6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e020      	b.n	8000eba <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f022 020e 	bic.w	r2, r2, #14
 8000e86:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f022 0201 	bic.w	r2, r2, #1
 8000e96:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d005      	beq.n	8000ee6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2204      	movs	r2, #4
 8000ede:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	73fb      	strb	r3, [r7, #15]
 8000ee4:	e051      	b.n	8000f8a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f022 020e 	bic.w	r2, r2, #14
 8000ef4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f022 0201 	bic.w	r2, r2, #1
 8000f04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a22      	ldr	r2, [pc, #136]	; (8000f94 <HAL_DMA_Abort_IT+0xd0>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d029      	beq.n	8000f64 <HAL_DMA_Abort_IT+0xa0>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a20      	ldr	r2, [pc, #128]	; (8000f98 <HAL_DMA_Abort_IT+0xd4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d022      	beq.n	8000f60 <HAL_DMA_Abort_IT+0x9c>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a1f      	ldr	r2, [pc, #124]	; (8000f9c <HAL_DMA_Abort_IT+0xd8>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d01a      	beq.n	8000f5a <HAL_DMA_Abort_IT+0x96>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a1d      	ldr	r2, [pc, #116]	; (8000fa0 <HAL_DMA_Abort_IT+0xdc>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d012      	beq.n	8000f54 <HAL_DMA_Abort_IT+0x90>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a1c      	ldr	r2, [pc, #112]	; (8000fa4 <HAL_DMA_Abort_IT+0xe0>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d00a      	beq.n	8000f4e <HAL_DMA_Abort_IT+0x8a>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a1a      	ldr	r2, [pc, #104]	; (8000fa8 <HAL_DMA_Abort_IT+0xe4>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d102      	bne.n	8000f48 <HAL_DMA_Abort_IT+0x84>
 8000f42:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f46:	e00e      	b.n	8000f66 <HAL_DMA_Abort_IT+0xa2>
 8000f48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f4c:	e00b      	b.n	8000f66 <HAL_DMA_Abort_IT+0xa2>
 8000f4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f52:	e008      	b.n	8000f66 <HAL_DMA_Abort_IT+0xa2>
 8000f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f58:	e005      	b.n	8000f66 <HAL_DMA_Abort_IT+0xa2>
 8000f5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f5e:	e002      	b.n	8000f66 <HAL_DMA_Abort_IT+0xa2>
 8000f60:	2310      	movs	r3, #16
 8000f62:	e000      	b.n	8000f66 <HAL_DMA_Abort_IT+0xa2>
 8000f64:	2301      	movs	r3, #1
 8000f66:	4a11      	ldr	r2, [pc, #68]	; (8000fac <HAL_DMA_Abort_IT+0xe8>)
 8000f68:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	4798      	blx	r3
    } 
  }
  return status;
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40020008 	.word	0x40020008
 8000f98:	4002001c 	.word	0x4002001c
 8000f9c:	40020030 	.word	0x40020030
 8000fa0:	40020044 	.word	0x40020044
 8000fa4:	40020058 	.word	0x40020058
 8000fa8:	4002006c 	.word	0x4002006c
 8000fac:	40020000 	.word	0x40020000

08000fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4aa1      	ldr	r2, [pc, #644]	; (800124c <HAL_GPIO_Init+0x29c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d013      	beq.n	8000ff2 <HAL_GPIO_Init+0x42>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4aa0      	ldr	r2, [pc, #640]	; (8001250 <HAL_GPIO_Init+0x2a0>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d00f      	beq.n	8000ff2 <HAL_GPIO_Init+0x42>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a9f      	ldr	r2, [pc, #636]	; (8001254 <HAL_GPIO_Init+0x2a4>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d00b      	beq.n	8000ff2 <HAL_GPIO_Init+0x42>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a9e      	ldr	r2, [pc, #632]	; (8001258 <HAL_GPIO_Init+0x2a8>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d007      	beq.n	8000ff2 <HAL_GPIO_Init+0x42>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a9d      	ldr	r2, [pc, #628]	; (800125c <HAL_GPIO_Init+0x2ac>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x42>
 8000fea:	21bd      	movs	r1, #189	; 0xbd
 8000fec:	489c      	ldr	r0, [pc, #624]	; (8001260 <HAL_GPIO_Init+0x2b0>)
 8000fee:	f7ff faee 	bl	80005ce <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d005      	beq.n	8001008 <HAL_GPIO_Init+0x58>
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	0c1b      	lsrs	r3, r3, #16
 8001002:	041b      	lsls	r3, r3, #16
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x60>
 8001008:	21be      	movs	r1, #190	; 0xbe
 800100a:	4895      	ldr	r0, [pc, #596]	; (8001260 <HAL_GPIO_Init+0x2b0>)
 800100c:	f7ff fadf 	bl	80005ce <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	f000 821d 	beq.w	8001454 <HAL_GPIO_Init+0x4a4>
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2b01      	cmp	r3, #1
 8001020:	f000 8218 	beq.w	8001454 <HAL_GPIO_Init+0x4a4>
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b11      	cmp	r3, #17
 800102a:	f000 8213 	beq.w	8001454 <HAL_GPIO_Init+0x4a4>
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b02      	cmp	r3, #2
 8001034:	f000 820e 	beq.w	8001454 <HAL_GPIO_Init+0x4a4>
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b12      	cmp	r3, #18
 800103e:	f000 8209 	beq.w	8001454 <HAL_GPIO_Init+0x4a4>
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	4a87      	ldr	r2, [pc, #540]	; (8001264 <HAL_GPIO_Init+0x2b4>)
 8001048:	4293      	cmp	r3, r2
 800104a:	f000 8203 	beq.w	8001454 <HAL_GPIO_Init+0x4a4>
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	4a85      	ldr	r2, [pc, #532]	; (8001268 <HAL_GPIO_Init+0x2b8>)
 8001054:	4293      	cmp	r3, r2
 8001056:	f000 81fd 	beq.w	8001454 <HAL_GPIO_Init+0x4a4>
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	4a83      	ldr	r2, [pc, #524]	; (800126c <HAL_GPIO_Init+0x2bc>)
 8001060:	4293      	cmp	r3, r2
 8001062:	f000 81f7 	beq.w	8001454 <HAL_GPIO_Init+0x4a4>
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	4a81      	ldr	r2, [pc, #516]	; (8001270 <HAL_GPIO_Init+0x2c0>)
 800106c:	4293      	cmp	r3, r2
 800106e:	f000 81f1 	beq.w	8001454 <HAL_GPIO_Init+0x4a4>
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	4a7f      	ldr	r2, [pc, #508]	; (8001274 <HAL_GPIO_Init+0x2c4>)
 8001078:	4293      	cmp	r3, r2
 800107a:	f000 81eb 	beq.w	8001454 <HAL_GPIO_Init+0x4a4>
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	4a7d      	ldr	r2, [pc, #500]	; (8001278 <HAL_GPIO_Init+0x2c8>)
 8001084:	4293      	cmp	r3, r2
 8001086:	f000 81e5 	beq.w	8001454 <HAL_GPIO_Init+0x4a4>
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b03      	cmp	r3, #3
 8001090:	f000 81e0 	beq.w	8001454 <HAL_GPIO_Init+0x4a4>
 8001094:	21bf      	movs	r1, #191	; 0xbf
 8001096:	4872      	ldr	r0, [pc, #456]	; (8001260 <HAL_GPIO_Init+0x2b0>)
 8001098:	f7ff fa99 	bl	80005ce <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109c:	e1da      	b.n	8001454 <HAL_GPIO_Init+0x4a4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800109e:	2201      	movs	r2, #1
 80010a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	69fa      	ldr	r2, [r7, #28]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	f040 81c9 	bne.w	800144e <HAL_GPIO_Init+0x49e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a63      	ldr	r2, [pc, #396]	; (800124c <HAL_GPIO_Init+0x29c>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d013      	beq.n	80010ec <HAL_GPIO_Init+0x13c>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a62      	ldr	r2, [pc, #392]	; (8001250 <HAL_GPIO_Init+0x2a0>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d00f      	beq.n	80010ec <HAL_GPIO_Init+0x13c>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a61      	ldr	r2, [pc, #388]	; (8001254 <HAL_GPIO_Init+0x2a4>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d00b      	beq.n	80010ec <HAL_GPIO_Init+0x13c>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a60      	ldr	r2, [pc, #384]	; (8001258 <HAL_GPIO_Init+0x2a8>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d007      	beq.n	80010ec <HAL_GPIO_Init+0x13c>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a5f      	ldr	r2, [pc, #380]	; (800125c <HAL_GPIO_Init+0x2ac>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x13c>
 80010e4:	21cd      	movs	r1, #205	; 0xcd
 80010e6:	485e      	ldr	r0, [pc, #376]	; (8001260 <HAL_GPIO_Init+0x2b0>)
 80010e8:	f7ff fa71 	bl	80005ce <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	4a61      	ldr	r2, [pc, #388]	; (8001278 <HAL_GPIO_Init+0x2c8>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	f000 80c2 	beq.w	800127c <HAL_GPIO_Init+0x2cc>
 80010f8:	4a5f      	ldr	r2, [pc, #380]	; (8001278 <HAL_GPIO_Init+0x2c8>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	f200 80e8 	bhi.w	80012d0 <HAL_GPIO_Init+0x320>
 8001100:	4a5a      	ldr	r2, [pc, #360]	; (800126c <HAL_GPIO_Init+0x2bc>)
 8001102:	4293      	cmp	r3, r2
 8001104:	f000 80ba 	beq.w	800127c <HAL_GPIO_Init+0x2cc>
 8001108:	4a58      	ldr	r2, [pc, #352]	; (800126c <HAL_GPIO_Init+0x2bc>)
 800110a:	4293      	cmp	r3, r2
 800110c:	f200 80e0 	bhi.w	80012d0 <HAL_GPIO_Init+0x320>
 8001110:	4a58      	ldr	r2, [pc, #352]	; (8001274 <HAL_GPIO_Init+0x2c4>)
 8001112:	4293      	cmp	r3, r2
 8001114:	f000 80b2 	beq.w	800127c <HAL_GPIO_Init+0x2cc>
 8001118:	4a56      	ldr	r2, [pc, #344]	; (8001274 <HAL_GPIO_Init+0x2c4>)
 800111a:	4293      	cmp	r3, r2
 800111c:	f200 80d8 	bhi.w	80012d0 <HAL_GPIO_Init+0x320>
 8001120:	4a51      	ldr	r2, [pc, #324]	; (8001268 <HAL_GPIO_Init+0x2b8>)
 8001122:	4293      	cmp	r3, r2
 8001124:	f000 80aa 	beq.w	800127c <HAL_GPIO_Init+0x2cc>
 8001128:	4a4f      	ldr	r2, [pc, #316]	; (8001268 <HAL_GPIO_Init+0x2b8>)
 800112a:	4293      	cmp	r3, r2
 800112c:	f200 80d0 	bhi.w	80012d0 <HAL_GPIO_Init+0x320>
 8001130:	4a4f      	ldr	r2, [pc, #316]	; (8001270 <HAL_GPIO_Init+0x2c0>)
 8001132:	4293      	cmp	r3, r2
 8001134:	f000 80a2 	beq.w	800127c <HAL_GPIO_Init+0x2cc>
 8001138:	4a4d      	ldr	r2, [pc, #308]	; (8001270 <HAL_GPIO_Init+0x2c0>)
 800113a:	4293      	cmp	r3, r2
 800113c:	f200 80c8 	bhi.w	80012d0 <HAL_GPIO_Init+0x320>
 8001140:	2b12      	cmp	r3, #18
 8001142:	d82b      	bhi.n	800119c <HAL_GPIO_Init+0x1ec>
 8001144:	2b12      	cmp	r3, #18
 8001146:	f200 80c3 	bhi.w	80012d0 <HAL_GPIO_Init+0x320>
 800114a:	a201      	add	r2, pc, #4	; (adr r2, 8001150 <HAL_GPIO_Init+0x1a0>)
 800114c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001150:	0800127d 	.word	0x0800127d
 8001154:	080011a5 	.word	0x080011a5
 8001158:	080011f7 	.word	0x080011f7
 800115c:	080012cb 	.word	0x080012cb
 8001160:	080012d1 	.word	0x080012d1
 8001164:	080012d1 	.word	0x080012d1
 8001168:	080012d1 	.word	0x080012d1
 800116c:	080012d1 	.word	0x080012d1
 8001170:	080012d1 	.word	0x080012d1
 8001174:	080012d1 	.word	0x080012d1
 8001178:	080012d1 	.word	0x080012d1
 800117c:	080012d1 	.word	0x080012d1
 8001180:	080012d1 	.word	0x080012d1
 8001184:	080012d1 	.word	0x080012d1
 8001188:	080012d1 	.word	0x080012d1
 800118c:	080012d1 	.word	0x080012d1
 8001190:	080012d1 	.word	0x080012d1
 8001194:	080011cd 	.word	0x080011cd
 8001198:	08001221 	.word	0x08001221
 800119c:	4a31      	ldr	r2, [pc, #196]	; (8001264 <HAL_GPIO_Init+0x2b4>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d06c      	beq.n	800127c <HAL_GPIO_Init+0x2cc>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011a2:	e095      	b.n	80012d0 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d00b      	beq.n	80011c4 <HAL_GPIO_Init+0x214>
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d007      	beq.n	80011c4 <HAL_GPIO_Init+0x214>
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	2b03      	cmp	r3, #3
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x214>
 80011bc:	21d5      	movs	r1, #213	; 0xd5
 80011be:	4828      	ldr	r0, [pc, #160]	; (8001260 <HAL_GPIO_Init+0x2b0>)
 80011c0:	f7ff fa05 	bl	80005ce <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	623b      	str	r3, [r7, #32]
          break;
 80011ca:	e082      	b.n	80012d2 <HAL_GPIO_Init+0x322>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d00b      	beq.n	80011ec <HAL_GPIO_Init+0x23c>
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d007      	beq.n	80011ec <HAL_GPIO_Init+0x23c>
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	2b03      	cmp	r3, #3
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x23c>
 80011e4:	21dc      	movs	r1, #220	; 0xdc
 80011e6:	481e      	ldr	r0, [pc, #120]	; (8001260 <HAL_GPIO_Init+0x2b0>)
 80011e8:	f7ff f9f1 	bl	80005ce <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	3304      	adds	r3, #4
 80011f2:	623b      	str	r3, [r7, #32]
          break;
 80011f4:	e06d      	b.n	80012d2 <HAL_GPIO_Init+0x322>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d00b      	beq.n	8001216 <HAL_GPIO_Init+0x266>
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d007      	beq.n	8001216 <HAL_GPIO_Init+0x266>
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	2b03      	cmp	r3, #3
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x266>
 800120e:	21e3      	movs	r1, #227	; 0xe3
 8001210:	4813      	ldr	r0, [pc, #76]	; (8001260 <HAL_GPIO_Init+0x2b0>)
 8001212:	f7ff f9dc 	bl	80005ce <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	3308      	adds	r3, #8
 800121c:	623b      	str	r3, [r7, #32]
          break;
 800121e:	e058      	b.n	80012d2 <HAL_GPIO_Init+0x322>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	2b02      	cmp	r3, #2
 8001226:	d00b      	beq.n	8001240 <HAL_GPIO_Init+0x290>
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d007      	beq.n	8001240 <HAL_GPIO_Init+0x290>
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	2b03      	cmp	r3, #3
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x290>
 8001238:	21ea      	movs	r1, #234	; 0xea
 800123a:	4809      	ldr	r0, [pc, #36]	; (8001260 <HAL_GPIO_Init+0x2b0>)
 800123c:	f7ff f9c7 	bl	80005ce <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	330c      	adds	r3, #12
 8001246:	623b      	str	r3, [r7, #32]
          break;
 8001248:	e043      	b.n	80012d2 <HAL_GPIO_Init+0x322>
 800124a:	bf00      	nop
 800124c:	40010800 	.word	0x40010800
 8001250:	40010c00 	.word	0x40010c00
 8001254:	40011000 	.word	0x40011000
 8001258:	40011400 	.word	0x40011400
 800125c:	40011800 	.word	0x40011800
 8001260:	08004d80 	.word	0x08004d80
 8001264:	10110000 	.word	0x10110000
 8001268:	10210000 	.word	0x10210000
 800126c:	10310000 	.word	0x10310000
 8001270:	10120000 	.word	0x10120000
 8001274:	10220000 	.word	0x10220000
 8001278:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d00b      	beq.n	800129c <HAL_GPIO_Init+0x2ec>
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d007      	beq.n	800129c <HAL_GPIO_Init+0x2ec>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	2b02      	cmp	r3, #2
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x2ec>
 8001294:	21f7      	movs	r1, #247	; 0xf7
 8001296:	4876      	ldr	r0, [pc, #472]	; (8001470 <HAL_GPIO_Init+0x4c0>)
 8001298:	f7ff f999 	bl	80005ce <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d102      	bne.n	80012aa <HAL_GPIO_Init+0x2fa>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012a4:	2304      	movs	r3, #4
 80012a6:	623b      	str	r3, [r7, #32]
          break;
 80012a8:	e013      	b.n	80012d2 <HAL_GPIO_Init+0x322>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d105      	bne.n	80012be <HAL_GPIO_Init+0x30e>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012b2:	2308      	movs	r3, #8
 80012b4:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69fa      	ldr	r2, [r7, #28]
 80012ba:	611a      	str	r2, [r3, #16]
          break;
 80012bc:	e009      	b.n	80012d2 <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012be:	2308      	movs	r3, #8
 80012c0:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69fa      	ldr	r2, [r7, #28]
 80012c6:	615a      	str	r2, [r3, #20]
          break;
 80012c8:	e003      	b.n	80012d2 <HAL_GPIO_Init+0x322>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
          break;
 80012ce:	e000      	b.n	80012d2 <HAL_GPIO_Init+0x322>
          break;
 80012d0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	2bff      	cmp	r3, #255	; 0xff
 80012d6:	d801      	bhi.n	80012dc <HAL_GPIO_Init+0x32c>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	e001      	b.n	80012e0 <HAL_GPIO_Init+0x330>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3304      	adds	r3, #4
 80012e0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	2bff      	cmp	r3, #255	; 0xff
 80012e6:	d802      	bhi.n	80012ee <HAL_GPIO_Init+0x33e>
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	e002      	b.n	80012f4 <HAL_GPIO_Init+0x344>
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	3b08      	subs	r3, #8
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	210f      	movs	r1, #15
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	401a      	ands	r2, r3
 8001306:	6a39      	ldr	r1, [r7, #32]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	431a      	orrs	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 8096 	beq.w	800144e <HAL_GPIO_Init+0x49e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001322:	4b54      	ldr	r3, [pc, #336]	; (8001474 <HAL_GPIO_Init+0x4c4>)
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	4a53      	ldr	r2, [pc, #332]	; (8001474 <HAL_GPIO_Init+0x4c4>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6193      	str	r3, [r2, #24]
 800132e:	4b51      	ldr	r3, [pc, #324]	; (8001474 <HAL_GPIO_Init+0x4c4>)
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800133a:	4a4f      	ldr	r2, [pc, #316]	; (8001478 <HAL_GPIO_Init+0x4c8>)
 800133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133e:	089b      	lsrs	r3, r3, #2
 8001340:	3302      	adds	r3, #2
 8001342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001346:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	220f      	movs	r2, #15
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	4013      	ands	r3, r2
 800135c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a46      	ldr	r2, [pc, #280]	; (800147c <HAL_GPIO_Init+0x4cc>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d013      	beq.n	800138e <HAL_GPIO_Init+0x3de>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a45      	ldr	r2, [pc, #276]	; (8001480 <HAL_GPIO_Init+0x4d0>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d00d      	beq.n	800138a <HAL_GPIO_Init+0x3da>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a44      	ldr	r2, [pc, #272]	; (8001484 <HAL_GPIO_Init+0x4d4>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d007      	beq.n	8001386 <HAL_GPIO_Init+0x3d6>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a43      	ldr	r2, [pc, #268]	; (8001488 <HAL_GPIO_Init+0x4d8>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d101      	bne.n	8001382 <HAL_GPIO_Init+0x3d2>
 800137e:	2303      	movs	r3, #3
 8001380:	e006      	b.n	8001390 <HAL_GPIO_Init+0x3e0>
 8001382:	2304      	movs	r3, #4
 8001384:	e004      	b.n	8001390 <HAL_GPIO_Init+0x3e0>
 8001386:	2302      	movs	r3, #2
 8001388:	e002      	b.n	8001390 <HAL_GPIO_Init+0x3e0>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <HAL_GPIO_Init+0x3e0>
 800138e:	2300      	movs	r3, #0
 8001390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001392:	f002 0203 	and.w	r2, r2, #3
 8001396:	0092      	lsls	r2, r2, #2
 8001398:	4093      	lsls	r3, r2
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	4313      	orrs	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013a0:	4935      	ldr	r1, [pc, #212]	; (8001478 <HAL_GPIO_Init+0x4c8>)
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	089b      	lsrs	r3, r3, #2
 80013a6:	3302      	adds	r3, #2
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d006      	beq.n	80013c8 <HAL_GPIO_Init+0x418>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013ba:	4b34      	ldr	r3, [pc, #208]	; (800148c <HAL_GPIO_Init+0x4dc>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4933      	ldr	r1, [pc, #204]	; (800148c <HAL_GPIO_Init+0x4dc>)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	600b      	str	r3, [r1, #0]
 80013c6:	e006      	b.n	80013d6 <HAL_GPIO_Init+0x426>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013c8:	4b30      	ldr	r3, [pc, #192]	; (800148c <HAL_GPIO_Init+0x4dc>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	492e      	ldr	r1, [pc, #184]	; (800148c <HAL_GPIO_Init+0x4dc>)
 80013d2:	4013      	ands	r3, r2
 80013d4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d006      	beq.n	80013f0 <HAL_GPIO_Init+0x440>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013e2:	4b2a      	ldr	r3, [pc, #168]	; (800148c <HAL_GPIO_Init+0x4dc>)
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	4929      	ldr	r1, [pc, #164]	; (800148c <HAL_GPIO_Init+0x4dc>)
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	604b      	str	r3, [r1, #4]
 80013ee:	e006      	b.n	80013fe <HAL_GPIO_Init+0x44e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013f0:	4b26      	ldr	r3, [pc, #152]	; (800148c <HAL_GPIO_Init+0x4dc>)
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	4924      	ldr	r1, [pc, #144]	; (800148c <HAL_GPIO_Init+0x4dc>)
 80013fa:	4013      	ands	r3, r2
 80013fc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d006      	beq.n	8001418 <HAL_GPIO_Init+0x468>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800140a:	4b20      	ldr	r3, [pc, #128]	; (800148c <HAL_GPIO_Init+0x4dc>)
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	491f      	ldr	r1, [pc, #124]	; (800148c <HAL_GPIO_Init+0x4dc>)
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	4313      	orrs	r3, r2
 8001414:	608b      	str	r3, [r1, #8]
 8001416:	e006      	b.n	8001426 <HAL_GPIO_Init+0x476>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001418:	4b1c      	ldr	r3, [pc, #112]	; (800148c <HAL_GPIO_Init+0x4dc>)
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	43db      	mvns	r3, r3
 8001420:	491a      	ldr	r1, [pc, #104]	; (800148c <HAL_GPIO_Init+0x4dc>)
 8001422:	4013      	ands	r3, r2
 8001424:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d006      	beq.n	8001440 <HAL_GPIO_Init+0x490>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001432:	4b16      	ldr	r3, [pc, #88]	; (800148c <HAL_GPIO_Init+0x4dc>)
 8001434:	68da      	ldr	r2, [r3, #12]
 8001436:	4915      	ldr	r1, [pc, #84]	; (800148c <HAL_GPIO_Init+0x4dc>)
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	60cb      	str	r3, [r1, #12]
 800143e:	e006      	b.n	800144e <HAL_GPIO_Init+0x49e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_GPIO_Init+0x4dc>)
 8001442:	68da      	ldr	r2, [r3, #12]
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	43db      	mvns	r3, r3
 8001448:	4910      	ldr	r1, [pc, #64]	; (800148c <HAL_GPIO_Init+0x4dc>)
 800144a:	4013      	ands	r3, r2
 800144c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	3301      	adds	r3, #1
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	fa22 f303 	lsr.w	r3, r2, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	f47f ae1d 	bne.w	800109e <HAL_GPIO_Init+0xee>
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3728      	adds	r7, #40	; 0x28
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	08004d80 	.word	0x08004d80
 8001474:	40021000 	.word	0x40021000
 8001478:	40010000 	.word	0x40010000
 800147c:	40010800 	.word	0x40010800
 8001480:	40010c00 	.word	0x40010c00
 8001484:	40011000 	.word	0x40011000
 8001488:	40011400 	.word	0x40011400
 800148c:	40010400 	.word	0x40010400

08001490 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800149c:	887b      	ldrh	r3, [r7, #2]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d004      	beq.n	80014ac <HAL_GPIO_ReadPin+0x1c>
 80014a2:	887b      	ldrh	r3, [r7, #2]
 80014a4:	0c1b      	lsrs	r3, r3, #16
 80014a6:	041b      	lsls	r3, r3, #16
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d004      	beq.n	80014b6 <HAL_GPIO_ReadPin+0x26>
 80014ac:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 80014b0:	4809      	ldr	r0, [pc, #36]	; (80014d8 <HAL_GPIO_ReadPin+0x48>)
 80014b2:	f7ff f88c 	bl	80005ce <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689a      	ldr	r2, [r3, #8]
 80014ba:	887b      	ldrh	r3, [r7, #2]
 80014bc:	4013      	ands	r3, r2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d002      	beq.n	80014c8 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 80014c2:	2301      	movs	r3, #1
 80014c4:	73fb      	strb	r3, [r7, #15]
 80014c6:	e001      	b.n	80014cc <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014c8:	2300      	movs	r3, #0
 80014ca:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	08004d80 	.word	0x08004d80

080014dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
 80014e8:	4613      	mov	r3, r2
 80014ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80014ec:	887b      	ldrh	r3, [r7, #2]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d004      	beq.n	80014fc <HAL_GPIO_WritePin+0x20>
 80014f2:	887b      	ldrh	r3, [r7, #2]
 80014f4:	0c1b      	lsrs	r3, r3, #16
 80014f6:	041b      	lsls	r3, r3, #16
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d004      	beq.n	8001506 <HAL_GPIO_WritePin+0x2a>
 80014fc:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8001500:	480e      	ldr	r0, [pc, #56]	; (800153c <HAL_GPIO_WritePin+0x60>)
 8001502:	f7ff f864 	bl	80005ce <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001506:	787b      	ldrb	r3, [r7, #1]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d007      	beq.n	800151c <HAL_GPIO_WritePin+0x40>
 800150c:	787b      	ldrb	r3, [r7, #1]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d004      	beq.n	800151c <HAL_GPIO_WritePin+0x40>
 8001512:	f240 11d5 	movw	r1, #469	; 0x1d5
 8001516:	4809      	ldr	r0, [pc, #36]	; (800153c <HAL_GPIO_WritePin+0x60>)
 8001518:	f7ff f859 	bl	80005ce <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800151c:	787b      	ldrb	r3, [r7, #1]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001522:	887a      	ldrh	r2, [r7, #2]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001528:	e003      	b.n	8001532 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800152a:	887b      	ldrh	r3, [r7, #2]
 800152c:	041a      	lsls	r2, r3, #16
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	611a      	str	r2, [r3, #16]
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	08004d80 	.word	0x08004d80

08001540 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800154c:	887b      	ldrh	r3, [r7, #2]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d004      	beq.n	800155c <HAL_GPIO_TogglePin+0x1c>
 8001552:	887b      	ldrh	r3, [r7, #2]
 8001554:	0c1b      	lsrs	r3, r3, #16
 8001556:	041b      	lsls	r3, r3, #16
 8001558:	2b00      	cmp	r3, #0
 800155a:	d004      	beq.n	8001566 <HAL_GPIO_TogglePin+0x26>
 800155c:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8001560:	480a      	ldr	r0, [pc, #40]	; (800158c <HAL_GPIO_TogglePin+0x4c>)
 8001562:	f7ff f834 	bl	80005ce <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800156c:	887a      	ldrh	r2, [r7, #2]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4013      	ands	r3, r2
 8001572:	041a      	lsls	r2, r3, #16
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	43d9      	mvns	r1, r3
 8001578:	887b      	ldrh	r3, [r7, #2]
 800157a:	400b      	ands	r3, r1
 800157c:	431a      	orrs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	611a      	str	r2, [r3, #16]
}
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	08004d80 	.word	0x08004d80

08001590 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e35c      	b.n	8001c5c <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d01c      	beq.n	80015e4 <HAL_RCC_OscConfig+0x54>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d116      	bne.n	80015e4 <HAL_RCC_OscConfig+0x54>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d110      	bne.n	80015e4 <HAL_RCC_OscConfig+0x54>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10a      	bne.n	80015e4 <HAL_RCC_OscConfig+0x54>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d104      	bne.n	80015e4 <HAL_RCC_OscConfig+0x54>
 80015da:	f240 1167 	movw	r1, #359	; 0x167
 80015de:	48a5      	ldr	r0, [pc, #660]	; (8001874 <HAL_RCC_OscConfig+0x2e4>)
 80015e0:	f7fe fff5 	bl	80005ce <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 809a 	beq.w	8001726 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00e      	beq.n	8001618 <HAL_RCC_OscConfig+0x88>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001602:	d009      	beq.n	8001618 <HAL_RCC_OscConfig+0x88>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800160c:	d004      	beq.n	8001618 <HAL_RCC_OscConfig+0x88>
 800160e:	f240 116d 	movw	r1, #365	; 0x16d
 8001612:	4898      	ldr	r0, [pc, #608]	; (8001874 <HAL_RCC_OscConfig+0x2e4>)
 8001614:	f7fe ffdb 	bl	80005ce <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001618:	4b97      	ldr	r3, [pc, #604]	; (8001878 <HAL_RCC_OscConfig+0x2e8>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 030c 	and.w	r3, r3, #12
 8001620:	2b04      	cmp	r3, #4
 8001622:	d00c      	beq.n	800163e <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001624:	4b94      	ldr	r3, [pc, #592]	; (8001878 <HAL_RCC_OscConfig+0x2e8>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 030c 	and.w	r3, r3, #12
 800162c:	2b08      	cmp	r3, #8
 800162e:	d112      	bne.n	8001656 <HAL_RCC_OscConfig+0xc6>
 8001630:	4b91      	ldr	r3, [pc, #580]	; (8001878 <HAL_RCC_OscConfig+0x2e8>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800163c:	d10b      	bne.n	8001656 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163e:	4b8e      	ldr	r3, [pc, #568]	; (8001878 <HAL_RCC_OscConfig+0x2e8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d06c      	beq.n	8001724 <HAL_RCC_OscConfig+0x194>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d168      	bne.n	8001724 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e302      	b.n	8001c5c <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165e:	d106      	bne.n	800166e <HAL_RCC_OscConfig+0xde>
 8001660:	4b85      	ldr	r3, [pc, #532]	; (8001878 <HAL_RCC_OscConfig+0x2e8>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a84      	ldr	r2, [pc, #528]	; (8001878 <HAL_RCC_OscConfig+0x2e8>)
 8001666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	e02e      	b.n	80016cc <HAL_RCC_OscConfig+0x13c>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10c      	bne.n	8001690 <HAL_RCC_OscConfig+0x100>
 8001676:	4b80      	ldr	r3, [pc, #512]	; (8001878 <HAL_RCC_OscConfig+0x2e8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a7f      	ldr	r2, [pc, #508]	; (8001878 <HAL_RCC_OscConfig+0x2e8>)
 800167c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	4b7d      	ldr	r3, [pc, #500]	; (8001878 <HAL_RCC_OscConfig+0x2e8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a7c      	ldr	r2, [pc, #496]	; (8001878 <HAL_RCC_OscConfig+0x2e8>)
 8001688:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	e01d      	b.n	80016cc <HAL_RCC_OscConfig+0x13c>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001698:	d10c      	bne.n	80016b4 <HAL_RCC_OscConfig+0x124>
 800169a:	4b77      	ldr	r3, [pc, #476]	; (8001878 <HAL_RCC_OscConfig+0x2e8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a76      	ldr	r2, [pc, #472]	; (8001878 <HAL_RCC_OscConfig+0x2e8>)
 80016a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	4b74      	ldr	r3, [pc, #464]	; (8001878 <HAL_RCC_OscConfig+0x2e8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a73      	ldr	r2, [pc, #460]	; (8001878 <HAL_RCC_OscConfig+0x2e8>)
 80016ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	e00b      	b.n	80016cc <HAL_RCC_OscConfig+0x13c>
 80016b4:	4b70      	ldr	r3, [pc, #448]	; (8001878 <HAL_RCC_OscConfig+0x2e8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a6f      	ldr	r2, [pc, #444]	; (8001878 <HAL_RCC_OscConfig+0x2e8>)
 80016ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b6d      	ldr	r3, [pc, #436]	; (8001878 <HAL_RCC_OscConfig+0x2e8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a6c      	ldr	r2, [pc, #432]	; (8001878 <HAL_RCC_OscConfig+0x2e8>)
 80016c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d013      	beq.n	80016fc <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d4:	f7ff fa76 	bl	8000bc4 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016dc:	f7ff fa72 	bl	8000bc4 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	; 0x64
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e2b6      	b.n	8001c5c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ee:	4b62      	ldr	r3, [pc, #392]	; (8001878 <HAL_RCC_OscConfig+0x2e8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x14c>
 80016fa:	e014      	b.n	8001726 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7ff fa62 	bl	8000bc4 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001704:	f7ff fa5e 	bl	8000bc4 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b64      	cmp	r3, #100	; 0x64
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e2a2      	b.n	8001c5c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001716:	4b58      	ldr	r3, [pc, #352]	; (8001878 <HAL_RCC_OscConfig+0x2e8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x174>
 8001722:	e000      	b.n	8001726 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d079      	beq.n	8001826 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d008      	beq.n	800174c <HAL_RCC_OscConfig+0x1bc>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d004      	beq.n	800174c <HAL_RCC_OscConfig+0x1bc>
 8001742:	f240 11a1 	movw	r1, #417	; 0x1a1
 8001746:	484b      	ldr	r0, [pc, #300]	; (8001874 <HAL_RCC_OscConfig+0x2e4>)
 8001748:	f7fe ff41 	bl	80005ce <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	2b1f      	cmp	r3, #31
 8001752:	d904      	bls.n	800175e <HAL_RCC_OscConfig+0x1ce>
 8001754:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8001758:	4846      	ldr	r0, [pc, #280]	; (8001874 <HAL_RCC_OscConfig+0x2e4>)
 800175a:	f7fe ff38 	bl	80005ce <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800175e:	4b46      	ldr	r3, [pc, #280]	; (8001878 <HAL_RCC_OscConfig+0x2e8>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 030c 	and.w	r3, r3, #12
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00b      	beq.n	8001782 <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800176a:	4b43      	ldr	r3, [pc, #268]	; (8001878 <HAL_RCC_OscConfig+0x2e8>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	2b08      	cmp	r3, #8
 8001774:	d11c      	bne.n	80017b0 <HAL_RCC_OscConfig+0x220>
 8001776:	4b40      	ldr	r3, [pc, #256]	; (8001878 <HAL_RCC_OscConfig+0x2e8>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d116      	bne.n	80017b0 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001782:	4b3d      	ldr	r3, [pc, #244]	; (8001878 <HAL_RCC_OscConfig+0x2e8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d005      	beq.n	800179a <HAL_RCC_OscConfig+0x20a>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d001      	beq.n	800179a <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e260      	b.n	8001c5c <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179a:	4b37      	ldr	r3, [pc, #220]	; (8001878 <HAL_RCC_OscConfig+0x2e8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	4933      	ldr	r1, [pc, #204]	; (8001878 <HAL_RCC_OscConfig+0x2e8>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ae:	e03a      	b.n	8001826 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d020      	beq.n	80017fa <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017b8:	4b30      	ldr	r3, [pc, #192]	; (800187c <HAL_RCC_OscConfig+0x2ec>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017be:	f7ff fa01 	bl	8000bc4 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c6:	f7ff f9fd 	bl	8000bc4 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e241      	b.n	8001c5c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d8:	4b27      	ldr	r3, [pc, #156]	; (8001878 <HAL_RCC_OscConfig+0x2e8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0f0      	beq.n	80017c6 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e4:	4b24      	ldr	r3, [pc, #144]	; (8001878 <HAL_RCC_OscConfig+0x2e8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	4921      	ldr	r1, [pc, #132]	; (8001878 <HAL_RCC_OscConfig+0x2e8>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	600b      	str	r3, [r1, #0]
 80017f8:	e015      	b.n	8001826 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017fa:	4b20      	ldr	r3, [pc, #128]	; (800187c <HAL_RCC_OscConfig+0x2ec>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7ff f9e0 	bl	8000bc4 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001808:	f7ff f9dc 	bl	8000bc4 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e220      	b.n	8001c5c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800181a:	4b17      	ldr	r3, [pc, #92]	; (8001878 <HAL_RCC_OscConfig+0x2e8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d048      	beq.n	80018c4 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d008      	beq.n	800184c <HAL_RCC_OscConfig+0x2bc>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d004      	beq.n	800184c <HAL_RCC_OscConfig+0x2bc>
 8001842:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8001846:	480b      	ldr	r0, [pc, #44]	; (8001874 <HAL_RCC_OscConfig+0x2e4>)
 8001848:	f7fe fec1 	bl	80005ce <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d021      	beq.n	8001898 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001854:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <HAL_RCC_OscConfig+0x2f0>)
 8001856:	2201      	movs	r2, #1
 8001858:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185a:	f7ff f9b3 	bl	8000bc4 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001860:	e010      	b.n	8001884 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001862:	f7ff f9af 	bl	8000bc4 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d909      	bls.n	8001884 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e1f3      	b.n	8001c5c <HAL_RCC_OscConfig+0x6cc>
 8001874:	08004dbc 	.word	0x08004dbc
 8001878:	40021000 	.word	0x40021000
 800187c:	42420000 	.word	0x42420000
 8001880:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001884:	4b67      	ldr	r3, [pc, #412]	; (8001a24 <HAL_RCC_OscConfig+0x494>)
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0e8      	beq.n	8001862 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001890:	2001      	movs	r0, #1
 8001892:	f000 fc0f 	bl	80020b4 <RCC_Delay>
 8001896:	e015      	b.n	80018c4 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001898:	4b63      	ldr	r3, [pc, #396]	; (8001a28 <HAL_RCC_OscConfig+0x498>)
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189e:	f7ff f991 	bl	8000bc4 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a6:	f7ff f98d 	bl	8000bc4 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e1d1      	b.n	8001c5c <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b8:	4b5a      	ldr	r3, [pc, #360]	; (8001a24 <HAL_RCC_OscConfig+0x494>)
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1f0      	bne.n	80018a6 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 80c0 	beq.w	8001a52 <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00c      	beq.n	80018f8 <HAL_RCC_OscConfig+0x368>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d008      	beq.n	80018f8 <HAL_RCC_OscConfig+0x368>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	2b05      	cmp	r3, #5
 80018ec:	d004      	beq.n	80018f8 <HAL_RCC_OscConfig+0x368>
 80018ee:	f240 2111 	movw	r1, #529	; 0x211
 80018f2:	484e      	ldr	r0, [pc, #312]	; (8001a2c <HAL_RCC_OscConfig+0x49c>)
 80018f4:	f7fe fe6b 	bl	80005ce <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018f8:	4b4a      	ldr	r3, [pc, #296]	; (8001a24 <HAL_RCC_OscConfig+0x494>)
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10d      	bne.n	8001920 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001904:	4b47      	ldr	r3, [pc, #284]	; (8001a24 <HAL_RCC_OscConfig+0x494>)
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	4a46      	ldr	r2, [pc, #280]	; (8001a24 <HAL_RCC_OscConfig+0x494>)
 800190a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190e:	61d3      	str	r3, [r2, #28]
 8001910:	4b44      	ldr	r3, [pc, #272]	; (8001a24 <HAL_RCC_OscConfig+0x494>)
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800191c:	2301      	movs	r3, #1
 800191e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001920:	4b43      	ldr	r3, [pc, #268]	; (8001a30 <HAL_RCC_OscConfig+0x4a0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001928:	2b00      	cmp	r3, #0
 800192a:	d118      	bne.n	800195e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800192c:	4b40      	ldr	r3, [pc, #256]	; (8001a30 <HAL_RCC_OscConfig+0x4a0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a3f      	ldr	r2, [pc, #252]	; (8001a30 <HAL_RCC_OscConfig+0x4a0>)
 8001932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001936:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001938:	f7ff f944 	bl	8000bc4 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001940:	f7ff f940 	bl	8000bc4 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b64      	cmp	r3, #100	; 0x64
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e184      	b.n	8001c5c <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001952:	4b37      	ldr	r3, [pc, #220]	; (8001a30 <HAL_RCC_OscConfig+0x4a0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d106      	bne.n	8001974 <HAL_RCC_OscConfig+0x3e4>
 8001966:	4b2f      	ldr	r3, [pc, #188]	; (8001a24 <HAL_RCC_OscConfig+0x494>)
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	4a2e      	ldr	r2, [pc, #184]	; (8001a24 <HAL_RCC_OscConfig+0x494>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6213      	str	r3, [r2, #32]
 8001972:	e02d      	b.n	80019d0 <HAL_RCC_OscConfig+0x440>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10c      	bne.n	8001996 <HAL_RCC_OscConfig+0x406>
 800197c:	4b29      	ldr	r3, [pc, #164]	; (8001a24 <HAL_RCC_OscConfig+0x494>)
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	4a28      	ldr	r2, [pc, #160]	; (8001a24 <HAL_RCC_OscConfig+0x494>)
 8001982:	f023 0301 	bic.w	r3, r3, #1
 8001986:	6213      	str	r3, [r2, #32]
 8001988:	4b26      	ldr	r3, [pc, #152]	; (8001a24 <HAL_RCC_OscConfig+0x494>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	4a25      	ldr	r2, [pc, #148]	; (8001a24 <HAL_RCC_OscConfig+0x494>)
 800198e:	f023 0304 	bic.w	r3, r3, #4
 8001992:	6213      	str	r3, [r2, #32]
 8001994:	e01c      	b.n	80019d0 <HAL_RCC_OscConfig+0x440>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	2b05      	cmp	r3, #5
 800199c:	d10c      	bne.n	80019b8 <HAL_RCC_OscConfig+0x428>
 800199e:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <HAL_RCC_OscConfig+0x494>)
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	4a20      	ldr	r2, [pc, #128]	; (8001a24 <HAL_RCC_OscConfig+0x494>)
 80019a4:	f043 0304 	orr.w	r3, r3, #4
 80019a8:	6213      	str	r3, [r2, #32]
 80019aa:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <HAL_RCC_OscConfig+0x494>)
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	4a1d      	ldr	r2, [pc, #116]	; (8001a24 <HAL_RCC_OscConfig+0x494>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6213      	str	r3, [r2, #32]
 80019b6:	e00b      	b.n	80019d0 <HAL_RCC_OscConfig+0x440>
 80019b8:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <HAL_RCC_OscConfig+0x494>)
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	4a19      	ldr	r2, [pc, #100]	; (8001a24 <HAL_RCC_OscConfig+0x494>)
 80019be:	f023 0301 	bic.w	r3, r3, #1
 80019c2:	6213      	str	r3, [r2, #32]
 80019c4:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <HAL_RCC_OscConfig+0x494>)
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	4a16      	ldr	r2, [pc, #88]	; (8001a24 <HAL_RCC_OscConfig+0x494>)
 80019ca:	f023 0304 	bic.w	r3, r3, #4
 80019ce:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d015      	beq.n	8001a04 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d8:	f7ff f8f4 	bl	8000bc4 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019de:	e00a      	b.n	80019f6 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e0:	f7ff f8f0 	bl	8000bc4 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e132      	b.n	8001c5c <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_RCC_OscConfig+0x494>)
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0ee      	beq.n	80019e0 <HAL_RCC_OscConfig+0x450>
 8001a02:	e01d      	b.n	8001a40 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a04:	f7ff f8de 	bl	8000bc4 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0a:	e013      	b.n	8001a34 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a0c:	f7ff f8da 	bl	8000bc4 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d90a      	bls.n	8001a34 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e11c      	b.n	8001c5c <HAL_RCC_OscConfig+0x6cc>
 8001a22:	bf00      	nop
 8001a24:	40021000 	.word	0x40021000
 8001a28:	42420480 	.word	0x42420480
 8001a2c:	08004dbc 	.word	0x08004dbc
 8001a30:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a34:	4b8b      	ldr	r3, [pc, #556]	; (8001c64 <HAL_RCC_OscConfig+0x6d4>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1e5      	bne.n	8001a0c <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a40:	7dfb      	ldrb	r3, [r7, #23]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d105      	bne.n	8001a52 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a46:	4b87      	ldr	r3, [pc, #540]	; (8001c64 <HAL_RCC_OscConfig+0x6d4>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	4a86      	ldr	r2, [pc, #536]	; (8001c64 <HAL_RCC_OscConfig+0x6d4>)
 8001a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a50:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00c      	beq.n	8001a74 <HAL_RCC_OscConfig+0x4e4>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d008      	beq.n	8001a74 <HAL_RCC_OscConfig+0x4e4>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d004      	beq.n	8001a74 <HAL_RCC_OscConfig+0x4e4>
 8001a6a:	f240 21af 	movw	r1, #687	; 0x2af
 8001a6e:	487e      	ldr	r0, [pc, #504]	; (8001c68 <HAL_RCC_OscConfig+0x6d8>)
 8001a70:	f7fe fdad 	bl	80005ce <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 80ee 	beq.w	8001c5a <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a7e:	4b79      	ldr	r3, [pc, #484]	; (8001c64 <HAL_RCC_OscConfig+0x6d4>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	f000 80ce 	beq.w	8001c28 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	f040 80b2 	bne.w	8001bfa <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d009      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x522>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa6:	d004      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x522>
 8001aa8:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8001aac:	486e      	ldr	r0, [pc, #440]	; (8001c68 <HAL_RCC_OscConfig+0x6d8>)
 8001aae:	f7fe fd8e 	bl	80005ce <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d04a      	beq.n	8001b50 <HAL_RCC_OscConfig+0x5c0>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ac2:	d045      	beq.n	8001b50 <HAL_RCC_OscConfig+0x5c0>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001acc:	d040      	beq.n	8001b50 <HAL_RCC_OscConfig+0x5c0>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001ad6:	d03b      	beq.n	8001b50 <HAL_RCC_OscConfig+0x5c0>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ae0:	d036      	beq.n	8001b50 <HAL_RCC_OscConfig+0x5c0>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001aea:	d031      	beq.n	8001b50 <HAL_RCC_OscConfig+0x5c0>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001af4:	d02c      	beq.n	8001b50 <HAL_RCC_OscConfig+0x5c0>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001afe:	d027      	beq.n	8001b50 <HAL_RCC_OscConfig+0x5c0>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b08:	d022      	beq.n	8001b50 <HAL_RCC_OscConfig+0x5c0>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001b12:	d01d      	beq.n	8001b50 <HAL_RCC_OscConfig+0x5c0>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b18:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001b1c:	d018      	beq.n	8001b50 <HAL_RCC_OscConfig+0x5c0>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001b26:	d013      	beq.n	8001b50 <HAL_RCC_OscConfig+0x5c0>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001b30:	d00e      	beq.n	8001b50 <HAL_RCC_OscConfig+0x5c0>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8001b3a:	d009      	beq.n	8001b50 <HAL_RCC_OscConfig+0x5c0>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b40:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001b44:	d004      	beq.n	8001b50 <HAL_RCC_OscConfig+0x5c0>
 8001b46:	f240 21b9 	movw	r1, #697	; 0x2b9
 8001b4a:	4847      	ldr	r0, [pc, #284]	; (8001c68 <HAL_RCC_OscConfig+0x6d8>)
 8001b4c:	f7fe fd3f 	bl	80005ce <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b50:	4b46      	ldr	r3, [pc, #280]	; (8001c6c <HAL_RCC_OscConfig+0x6dc>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b56:	f7ff f835 	bl	8000bc4 <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b5e:	f7ff f831 	bl	8000bc4 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e075      	b.n	8001c5c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b70:	4b3c      	ldr	r3, [pc, #240]	; (8001c64 <HAL_RCC_OscConfig+0x6d4>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1f0      	bne.n	8001b5e <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b84:	d116      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d009      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x612>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b96:	d004      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x612>
 8001b98:	f240 21cf 	movw	r1, #719	; 0x2cf
 8001b9c:	4832      	ldr	r0, [pc, #200]	; (8001c68 <HAL_RCC_OscConfig+0x6d8>)
 8001b9e:	f7fe fd16 	bl	80005ce <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ba2:	4b30      	ldr	r3, [pc, #192]	; (8001c64 <HAL_RCC_OscConfig+0x6d4>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	492d      	ldr	r1, [pc, #180]	; (8001c64 <HAL_RCC_OscConfig+0x6d4>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bb4:	4b2b      	ldr	r3, [pc, #172]	; (8001c64 <HAL_RCC_OscConfig+0x6d4>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a19      	ldr	r1, [r3, #32]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	430b      	orrs	r3, r1
 8001bc6:	4927      	ldr	r1, [pc, #156]	; (8001c64 <HAL_RCC_OscConfig+0x6d4>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bcc:	4b27      	ldr	r3, [pc, #156]	; (8001c6c <HAL_RCC_OscConfig+0x6dc>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd2:	f7fe fff7 	bl	8000bc4 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bda:	f7fe fff3 	bl	8000bc4 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e037      	b.n	8001c5c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bec:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <HAL_RCC_OscConfig+0x6d4>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0x64a>
 8001bf8:	e02f      	b.n	8001c5a <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfa:	4b1c      	ldr	r3, [pc, #112]	; (8001c6c <HAL_RCC_OscConfig+0x6dc>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7fe ffe0 	bl	8000bc4 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c08:	f7fe ffdc 	bl	8000bc4 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e020      	b.n	8001c5c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1a:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_RCC_OscConfig+0x6d4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f0      	bne.n	8001c08 <HAL_RCC_OscConfig+0x678>
 8001c26:	e018      	b.n	8001c5a <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e013      	b.n	8001c5c <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_RCC_OscConfig+0x6d4>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d106      	bne.n	8001c56 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d001      	beq.n	8001c5a <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40021000 	.word	0x40021000
 8001c68:	08004dbc 	.word	0x08004dbc
 8001c6c:	42420060 	.word	0x42420060

08001c70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e176      	b.n	8001f72 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d116      	bne.n	8001cbe <HAL_RCC_ClockConfig+0x4e>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d110      	bne.n	8001cbe <HAL_RCC_ClockConfig+0x4e>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10a      	bne.n	8001cbe <HAL_RCC_ClockConfig+0x4e>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d104      	bne.n	8001cbe <HAL_RCC_ClockConfig+0x4e>
 8001cb4:	f44f 714e 	mov.w	r1, #824	; 0x338
 8001cb8:	4874      	ldr	r0, [pc, #464]	; (8001e8c <HAL_RCC_ClockConfig+0x21c>)
 8001cba:	f7fe fc88 	bl	80005ce <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00a      	beq.n	8001cda <HAL_RCC_ClockConfig+0x6a>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d007      	beq.n	8001cda <HAL_RCC_ClockConfig+0x6a>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d004      	beq.n	8001cda <HAL_RCC_ClockConfig+0x6a>
 8001cd0:	f240 3139 	movw	r1, #825	; 0x339
 8001cd4:	486d      	ldr	r0, [pc, #436]	; (8001e8c <HAL_RCC_ClockConfig+0x21c>)
 8001cd6:	f7fe fc7a 	bl	80005ce <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cda:	4b6d      	ldr	r3, [pc, #436]	; (8001e90 <HAL_RCC_ClockConfig+0x220>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d910      	bls.n	8001d0a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce8:	4b69      	ldr	r3, [pc, #420]	; (8001e90 <HAL_RCC_ClockConfig+0x220>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f023 0207 	bic.w	r2, r3, #7
 8001cf0:	4967      	ldr	r1, [pc, #412]	; (8001e90 <HAL_RCC_ClockConfig+0x220>)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf8:	4b65      	ldr	r3, [pc, #404]	; (8001e90 <HAL_RCC_ClockConfig+0x220>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d001      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e133      	b.n	8001f72 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d049      	beq.n	8001daa <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d005      	beq.n	8001d2e <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d22:	4b5c      	ldr	r3, [pc, #368]	; (8001e94 <HAL_RCC_ClockConfig+0x224>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	4a5b      	ldr	r2, [pc, #364]	; (8001e94 <HAL_RCC_ClockConfig+0x224>)
 8001d28:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d2c:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d005      	beq.n	8001d46 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d3a:	4b56      	ldr	r3, [pc, #344]	; (8001e94 <HAL_RCC_ClockConfig+0x224>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	4a55      	ldr	r2, [pc, #340]	; (8001e94 <HAL_RCC_ClockConfig+0x224>)
 8001d40:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d44:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d024      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x128>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2b80      	cmp	r3, #128	; 0x80
 8001d54:	d020      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x128>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2b90      	cmp	r3, #144	; 0x90
 8001d5c:	d01c      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x128>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2ba0      	cmp	r3, #160	; 0xa0
 8001d64:	d018      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x128>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2bb0      	cmp	r3, #176	; 0xb0
 8001d6c:	d014      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x128>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2bc0      	cmp	r3, #192	; 0xc0
 8001d74:	d010      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x128>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2bd0      	cmp	r3, #208	; 0xd0
 8001d7c:	d00c      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x128>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2be0      	cmp	r3, #224	; 0xe0
 8001d84:	d008      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x128>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	2bf0      	cmp	r3, #240	; 0xf0
 8001d8c:	d004      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x128>
 8001d8e:	f240 315f 	movw	r1, #863	; 0x35f
 8001d92:	483e      	ldr	r0, [pc, #248]	; (8001e8c <HAL_RCC_ClockConfig+0x21c>)
 8001d94:	f7fe fc1b 	bl	80005ce <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d98:	4b3e      	ldr	r3, [pc, #248]	; (8001e94 <HAL_RCC_ClockConfig+0x224>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	493b      	ldr	r1, [pc, #236]	; (8001e94 <HAL_RCC_ClockConfig+0x224>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d051      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00c      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x168>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d008      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x168>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d004      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x168>
 8001dce:	f240 3166 	movw	r1, #870	; 0x366
 8001dd2:	482e      	ldr	r0, [pc, #184]	; (8001e8c <HAL_RCC_ClockConfig+0x21c>)
 8001dd4:	f7fe fbfb 	bl	80005ce <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d107      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de0:	4b2c      	ldr	r3, [pc, #176]	; (8001e94 <HAL_RCC_ClockConfig+0x224>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d115      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e0c0      	b.n	8001f72 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d107      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df8:	4b26      	ldr	r3, [pc, #152]	; (8001e94 <HAL_RCC_ClockConfig+0x224>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d109      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0b4      	b.n	8001f72 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e08:	4b22      	ldr	r3, [pc, #136]	; (8001e94 <HAL_RCC_ClockConfig+0x224>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e0ac      	b.n	8001f72 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e18:	4b1e      	ldr	r3, [pc, #120]	; (8001e94 <HAL_RCC_ClockConfig+0x224>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f023 0203 	bic.w	r2, r3, #3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	491b      	ldr	r1, [pc, #108]	; (8001e94 <HAL_RCC_ClockConfig+0x224>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e2a:	f7fe fecb 	bl	8000bc4 <HAL_GetTick>
 8001e2e:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e30:	e00a      	b.n	8001e48 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e32:	f7fe fec7 	bl	8000bc4 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e094      	b.n	8001f72 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e48:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <HAL_RCC_ClockConfig+0x224>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 020c 	and.w	r2, r3, #12
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d1eb      	bne.n	8001e32 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e5a:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <HAL_RCC_ClockConfig+0x220>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d217      	bcs.n	8001e98 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_RCC_ClockConfig+0x220>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f023 0207 	bic.w	r2, r3, #7
 8001e70:	4907      	ldr	r1, [pc, #28]	; (8001e90 <HAL_RCC_ClockConfig+0x220>)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_RCC_ClockConfig+0x220>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d008      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e073      	b.n	8001f72 <HAL_RCC_ClockConfig+0x302>
 8001e8a:	bf00      	nop
 8001e8c:	08004dbc 	.word	0x08004dbc
 8001e90:	40022000 	.word	0x40022000
 8001e94:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d025      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d018      	beq.n	8001ede <HAL_RCC_ClockConfig+0x26e>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eb4:	d013      	beq.n	8001ede <HAL_RCC_ClockConfig+0x26e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001ebe:	d00e      	beq.n	8001ede <HAL_RCC_ClockConfig+0x26e>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001ec8:	d009      	beq.n	8001ede <HAL_RCC_ClockConfig+0x26e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001ed2:	d004      	beq.n	8001ede <HAL_RCC_ClockConfig+0x26e>
 8001ed4:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8001ed8:	4828      	ldr	r0, [pc, #160]	; (8001f7c <HAL_RCC_ClockConfig+0x30c>)
 8001eda:	f7fe fb78 	bl	80005ce <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ede:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <HAL_RCC_ClockConfig+0x310>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	4925      	ldr	r1, [pc, #148]	; (8001f80 <HAL_RCC_ClockConfig+0x310>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d026      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d018      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x2c6>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f0c:	d013      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x2c6>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001f16:	d00e      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x2c6>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001f20:	d009      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x2c6>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f2a:	d004      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x2c6>
 8001f2c:	f240 31ab 	movw	r1, #939	; 0x3ab
 8001f30:	4812      	ldr	r0, [pc, #72]	; (8001f7c <HAL_RCC_ClockConfig+0x30c>)
 8001f32:	f7fe fb4c 	bl	80005ce <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f36:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <HAL_RCC_ClockConfig+0x310>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	490e      	ldr	r1, [pc, #56]	; (8001f80 <HAL_RCC_ClockConfig+0x310>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f4a:	f000 f821 	bl	8001f90 <HAL_RCC_GetSysClockFreq>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <HAL_RCC_ClockConfig+0x310>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	091b      	lsrs	r3, r3, #4
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	490a      	ldr	r1, [pc, #40]	; (8001f84 <HAL_RCC_ClockConfig+0x314>)
 8001f5c:	5ccb      	ldrb	r3, [r1, r3]
 8001f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f62:	4a09      	ldr	r2, [pc, #36]	; (8001f88 <HAL_RCC_ClockConfig+0x318>)
 8001f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f66:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <HAL_RCC_ClockConfig+0x31c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe fde8 	bl	8000b40 <HAL_InitTick>

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	08004dbc 	.word	0x08004dbc
 8001f80:	40021000 	.word	0x40021000
 8001f84:	08004eb4 	.word	0x08004eb4
 8001f88:	20000000 	.word	0x20000000
 8001f8c:	20000004 	.word	0x20000004

08001f90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f90:	b490      	push	{r4, r7}
 8001f92:	b08a      	sub	sp, #40	; 0x28
 8001f94:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f96:	4b2a      	ldr	r3, [pc, #168]	; (8002040 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f98:	1d3c      	adds	r4, r7, #4
 8001f9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fa0:	f240 2301 	movw	r3, #513	; 0x201
 8001fa4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	2300      	movs	r3, #0
 8001fac:	61bb      	str	r3, [r7, #24]
 8001fae:	2300      	movs	r3, #0
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fba:	4b22      	ldr	r3, [pc, #136]	; (8002044 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d002      	beq.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x40>
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d003      	beq.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x46>
 8001fce:	e02d      	b.n	800202c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fd0:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fd2:	623b      	str	r3, [r7, #32]
      break;
 8001fd4:	e02d      	b.n	8002032 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	0c9b      	lsrs	r3, r3, #18
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fe8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d013      	beq.n	800201c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ff4:	4b13      	ldr	r3, [pc, #76]	; (8002044 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	0c5b      	lsrs	r3, r3, #17
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002002:	4413      	add	r3, r2
 8002004:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002008:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	4a0e      	ldr	r2, [pc, #56]	; (8002048 <HAL_RCC_GetSysClockFreq+0xb8>)
 800200e:	fb02 f203 	mul.w	r2, r2, r3
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	fbb2 f3f3 	udiv	r3, r2, r3
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
 800201a:	e004      	b.n	8002026 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	4a0b      	ldr	r2, [pc, #44]	; (800204c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002020:	fb02 f303 	mul.w	r3, r2, r3
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	623b      	str	r3, [r7, #32]
      break;
 800202a:	e002      	b.n	8002032 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <HAL_RCC_GetSysClockFreq+0xb8>)
 800202e:	623b      	str	r3, [r7, #32]
      break;
 8002030:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002032:	6a3b      	ldr	r3, [r7, #32]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3728      	adds	r7, #40	; 0x28
 8002038:	46bd      	mov	sp, r7
 800203a:	bc90      	pop	{r4, r7}
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	08004df4 	.word	0x08004df4
 8002044:	40021000 	.word	0x40021000
 8002048:	007a1200 	.word	0x007a1200
 800204c:	003d0900 	.word	0x003d0900

08002050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002054:	4b02      	ldr	r3, [pc, #8]	; (8002060 <HAL_RCC_GetHCLKFreq+0x10>)
 8002056:	681b      	ldr	r3, [r3, #0]
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr
 8002060:	20000000 	.word	0x20000000

08002064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002068:	f7ff fff2 	bl	8002050 <HAL_RCC_GetHCLKFreq>
 800206c:	4602      	mov	r2, r0
 800206e:	4b05      	ldr	r3, [pc, #20]	; (8002084 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	0a1b      	lsrs	r3, r3, #8
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	4903      	ldr	r1, [pc, #12]	; (8002088 <HAL_RCC_GetPCLK1Freq+0x24>)
 800207a:	5ccb      	ldrb	r3, [r1, r3]
 800207c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002080:	4618      	mov	r0, r3
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40021000 	.word	0x40021000
 8002088:	08004ec4 	.word	0x08004ec4

0800208c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002090:	f7ff ffde 	bl	8002050 <HAL_RCC_GetHCLKFreq>
 8002094:	4602      	mov	r2, r0
 8002096:	4b05      	ldr	r3, [pc, #20]	; (80020ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	0adb      	lsrs	r3, r3, #11
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	4903      	ldr	r1, [pc, #12]	; (80020b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020a2:	5ccb      	ldrb	r3, [r1, r3]
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40021000 	.word	0x40021000
 80020b0:	08004ec4 	.word	0x08004ec4

080020b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020bc:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <RCC_Delay+0x34>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <RCC_Delay+0x38>)
 80020c2:	fba2 2303 	umull	r2, r3, r2, r3
 80020c6:	0a5b      	lsrs	r3, r3, #9
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	fb02 f303 	mul.w	r3, r2, r3
 80020ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020d0:	bf00      	nop
  }
  while (Delay --);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1e5a      	subs	r2, r3, #1
 80020d6:	60fa      	str	r2, [r7, #12]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1f9      	bne.n	80020d0 <RCC_Delay+0x1c>
}
 80020dc:	bf00      	nop
 80020de:	bf00      	nop
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	20000000 	.word	0x20000000
 80020ec:	10624dd3 	.word	0x10624dd3

080020f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e093      	b.n	800222a <HAL_TIM_Base_Init+0x13a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a4b      	ldr	r2, [pc, #300]	; (8002234 <HAL_TIM_Base_Init+0x144>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d013      	beq.n	8002134 <HAL_TIM_Base_Init+0x44>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002114:	d00e      	beq.n	8002134 <HAL_TIM_Base_Init+0x44>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a47      	ldr	r2, [pc, #284]	; (8002238 <HAL_TIM_Base_Init+0x148>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d009      	beq.n	8002134 <HAL_TIM_Base_Init+0x44>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a45      	ldr	r2, [pc, #276]	; (800223c <HAL_TIM_Base_Init+0x14c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d004      	beq.n	8002134 <HAL_TIM_Base_Init+0x44>
 800212a:	f240 1113 	movw	r1, #275	; 0x113
 800212e:	4844      	ldr	r0, [pc, #272]	; (8002240 <HAL_TIM_Base_Init+0x150>)
 8002130:	f7fe fa4d 	bl	80005ce <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d014      	beq.n	8002166 <HAL_TIM_Base_Init+0x76>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b10      	cmp	r3, #16
 8002142:	d010      	beq.n	8002166 <HAL_TIM_Base_Init+0x76>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2b20      	cmp	r3, #32
 800214a:	d00c      	beq.n	8002166 <HAL_TIM_Base_Init+0x76>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b40      	cmp	r3, #64	; 0x40
 8002152:	d008      	beq.n	8002166 <HAL_TIM_Base_Init+0x76>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b60      	cmp	r3, #96	; 0x60
 800215a:	d004      	beq.n	8002166 <HAL_TIM_Base_Init+0x76>
 800215c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002160:	4837      	ldr	r0, [pc, #220]	; (8002240 <HAL_TIM_Base_Init+0x150>)
 8002162:	f7fe fa34 	bl	80005ce <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00e      	beq.n	800218c <HAL_TIM_Base_Init+0x9c>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002176:	d009      	beq.n	800218c <HAL_TIM_Base_Init+0x9c>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002180:	d004      	beq.n	800218c <HAL_TIM_Base_Init+0x9c>
 8002182:	f240 1115 	movw	r1, #277	; 0x115
 8002186:	482e      	ldr	r0, [pc, #184]	; (8002240 <HAL_TIM_Base_Init+0x150>)
 8002188:	f7fe fa21 	bl	80005ce <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <HAL_TIM_Base_Init+0xb6>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	2b80      	cmp	r3, #128	; 0x80
 800219a:	d004      	beq.n	80021a6 <HAL_TIM_Base_Init+0xb6>
 800219c:	f44f 718b 	mov.w	r1, #278	; 0x116
 80021a0:	4827      	ldr	r0, [pc, #156]	; (8002240 <HAL_TIM_Base_Init+0x150>)
 80021a2:	f7fe fa14 	bl	80005ce <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d106      	bne.n	80021c0 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7fe fb4e 	bl	800085c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3304      	adds	r3, #4
 80021d0:	4619      	mov	r1, r3
 80021d2:	4610      	mov	r0, r2
 80021d4:	f001 f82e 	bl	8003234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40012c00 	.word	0x40012c00
 8002238:	40000400 	.word	0x40000400
 800223c:	40000800 	.word	0x40000800
 8002240:	08004e04 	.word	0x08004e04

08002244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a2e      	ldr	r2, [pc, #184]	; (800230c <HAL_TIM_Base_Start_IT+0xc8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d013      	beq.n	800227e <HAL_TIM_Base_Start_IT+0x3a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800225e:	d00e      	beq.n	800227e <HAL_TIM_Base_Start_IT+0x3a>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a2a      	ldr	r2, [pc, #168]	; (8002310 <HAL_TIM_Base_Start_IT+0xcc>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d009      	beq.n	800227e <HAL_TIM_Base_Start_IT+0x3a>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a29      	ldr	r2, [pc, #164]	; (8002314 <HAL_TIM_Base_Start_IT+0xd0>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d004      	beq.n	800227e <HAL_TIM_Base_Start_IT+0x3a>
 8002274:	f240 11cf 	movw	r1, #463	; 0x1cf
 8002278:	4827      	ldr	r0, [pc, #156]	; (8002318 <HAL_TIM_Base_Start_IT+0xd4>)
 800227a:	f7fe f9a8 	bl	80005ce <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b01      	cmp	r3, #1
 8002288:	d001      	beq.n	800228e <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e03a      	b.n	8002304 <HAL_TIM_Base_Start_IT+0xc0>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2202      	movs	r2, #2
 8002292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f042 0201 	orr.w	r2, r2, #1
 80022a4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a18      	ldr	r2, [pc, #96]	; (800230c <HAL_TIM_Base_Start_IT+0xc8>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d00e      	beq.n	80022ce <HAL_TIM_Base_Start_IT+0x8a>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b8:	d009      	beq.n	80022ce <HAL_TIM_Base_Start_IT+0x8a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a14      	ldr	r2, [pc, #80]	; (8002310 <HAL_TIM_Base_Start_IT+0xcc>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d004      	beq.n	80022ce <HAL_TIM_Base_Start_IT+0x8a>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a12      	ldr	r2, [pc, #72]	; (8002314 <HAL_TIM_Base_Start_IT+0xd0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d111      	bne.n	80022f2 <HAL_TIM_Base_Start_IT+0xae>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2b06      	cmp	r3, #6
 80022de:	d010      	beq.n	8002302 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f0:	e007      	b.n	8002302 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f042 0201 	orr.w	r2, r2, #1
 8002300:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40012c00 	.word	0x40012c00
 8002310:	40000400 	.word	0x40000400
 8002314:	40000800 	.word	0x40000800
 8002318:	08004e04 	.word	0x08004e04

0800231c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e093      	b.n	8002456 <HAL_TIM_PWM_Init+0x13a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a4b      	ldr	r2, [pc, #300]	; (8002460 <HAL_TIM_PWM_Init+0x144>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d013      	beq.n	8002360 <HAL_TIM_PWM_Init+0x44>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002340:	d00e      	beq.n	8002360 <HAL_TIM_PWM_Init+0x44>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a47      	ldr	r2, [pc, #284]	; (8002464 <HAL_TIM_PWM_Init+0x148>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d009      	beq.n	8002360 <HAL_TIM_PWM_Init+0x44>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a45      	ldr	r2, [pc, #276]	; (8002468 <HAL_TIM_PWM_Init+0x14c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d004      	beq.n	8002360 <HAL_TIM_PWM_Init+0x44>
 8002356:	f240 5113 	movw	r1, #1299	; 0x513
 800235a:	4844      	ldr	r0, [pc, #272]	; (800246c <HAL_TIM_PWM_Init+0x150>)
 800235c:	f7fe f937 	bl	80005ce <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d014      	beq.n	8002392 <HAL_TIM_PWM_Init+0x76>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	2b10      	cmp	r3, #16
 800236e:	d010      	beq.n	8002392 <HAL_TIM_PWM_Init+0x76>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b20      	cmp	r3, #32
 8002376:	d00c      	beq.n	8002392 <HAL_TIM_PWM_Init+0x76>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2b40      	cmp	r3, #64	; 0x40
 800237e:	d008      	beq.n	8002392 <HAL_TIM_PWM_Init+0x76>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2b60      	cmp	r3, #96	; 0x60
 8002386:	d004      	beq.n	8002392 <HAL_TIM_PWM_Init+0x76>
 8002388:	f240 5114 	movw	r1, #1300	; 0x514
 800238c:	4837      	ldr	r0, [pc, #220]	; (800246c <HAL_TIM_PWM_Init+0x150>)
 800238e:	f7fe f91e 	bl	80005ce <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00e      	beq.n	80023b8 <HAL_TIM_PWM_Init+0x9c>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023a2:	d009      	beq.n	80023b8 <HAL_TIM_PWM_Init+0x9c>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023ac:	d004      	beq.n	80023b8 <HAL_TIM_PWM_Init+0x9c>
 80023ae:	f240 5115 	movw	r1, #1301	; 0x515
 80023b2:	482e      	ldr	r0, [pc, #184]	; (800246c <HAL_TIM_PWM_Init+0x150>)
 80023b4:	f7fe f90b 	bl	80005ce <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d008      	beq.n	80023d2 <HAL_TIM_PWM_Init+0xb6>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	2b80      	cmp	r3, #128	; 0x80
 80023c6:	d004      	beq.n	80023d2 <HAL_TIM_PWM_Init+0xb6>
 80023c8:	f240 5116 	movw	r1, #1302	; 0x516
 80023cc:	4827      	ldr	r0, [pc, #156]	; (800246c <HAL_TIM_PWM_Init+0x150>)
 80023ce:	f7fe f8fe 	bl	80005ce <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d106      	bne.n	80023ec <HAL_TIM_PWM_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f842 	bl	8002470 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2202      	movs	r2, #2
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3304      	adds	r3, #4
 80023fc:	4619      	mov	r1, r3
 80023fe:	4610      	mov	r0, r2
 8002400:	f000 ff18 	bl	8003234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40012c00 	.word	0x40012c00
 8002464:	40000400 	.word	0x40000400
 8002468:	40000800 	.word	0x40000800
 800246c:	08004e04 	.word	0x08004e04

08002470 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
	...

08002484 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a6f      	ldr	r2, [pc, #444]	; (8002650 <HAL_TIM_PWM_Start+0x1cc>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d10b      	bne.n	80024b0 <HAL_TIM_PWM_Start+0x2c>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d040      	beq.n	8002520 <HAL_TIM_PWM_Start+0x9c>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d03d      	beq.n	8002520 <HAL_TIM_PWM_Start+0x9c>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d03a      	beq.n	8002520 <HAL_TIM_PWM_Start+0x9c>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	2b0c      	cmp	r3, #12
 80024ae:	d037      	beq.n	8002520 <HAL_TIM_PWM_Start+0x9c>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b8:	d10b      	bne.n	80024d2 <HAL_TIM_PWM_Start+0x4e>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d02f      	beq.n	8002520 <HAL_TIM_PWM_Start+0x9c>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d02c      	beq.n	8002520 <HAL_TIM_PWM_Start+0x9c>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d029      	beq.n	8002520 <HAL_TIM_PWM_Start+0x9c>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	2b0c      	cmp	r3, #12
 80024d0:	d026      	beq.n	8002520 <HAL_TIM_PWM_Start+0x9c>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a5f      	ldr	r2, [pc, #380]	; (8002654 <HAL_TIM_PWM_Start+0x1d0>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d10b      	bne.n	80024f4 <HAL_TIM_PWM_Start+0x70>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d01e      	beq.n	8002520 <HAL_TIM_PWM_Start+0x9c>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d01b      	beq.n	8002520 <HAL_TIM_PWM_Start+0x9c>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d018      	beq.n	8002520 <HAL_TIM_PWM_Start+0x9c>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	2b0c      	cmp	r3, #12
 80024f2:	d015      	beq.n	8002520 <HAL_TIM_PWM_Start+0x9c>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a57      	ldr	r2, [pc, #348]	; (8002658 <HAL_TIM_PWM_Start+0x1d4>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d10b      	bne.n	8002516 <HAL_TIM_PWM_Start+0x92>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00d      	beq.n	8002520 <HAL_TIM_PWM_Start+0x9c>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	2b04      	cmp	r3, #4
 8002508:	d00a      	beq.n	8002520 <HAL_TIM_PWM_Start+0x9c>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2b08      	cmp	r3, #8
 800250e:	d007      	beq.n	8002520 <HAL_TIM_PWM_Start+0x9c>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	2b0c      	cmp	r3, #12
 8002514:	d004      	beq.n	8002520 <HAL_TIM_PWM_Start+0x9c>
 8002516:	f240 5199 	movw	r1, #1433	; 0x599
 800251a:	4850      	ldr	r0, [pc, #320]	; (800265c <HAL_TIM_PWM_Start+0x1d8>)
 800251c:	f7fe f857 	bl	80005ce <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d109      	bne.n	800253a <HAL_TIM_PWM_Start+0xb6>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b01      	cmp	r3, #1
 8002530:	bf14      	ite	ne
 8002532:	2301      	movne	r3, #1
 8002534:	2300      	moveq	r3, #0
 8002536:	b2db      	uxtb	r3, r3
 8002538:	e022      	b.n	8002580 <HAL_TIM_PWM_Start+0xfc>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b04      	cmp	r3, #4
 800253e:	d109      	bne.n	8002554 <HAL_TIM_PWM_Start+0xd0>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b01      	cmp	r3, #1
 800254a:	bf14      	ite	ne
 800254c:	2301      	movne	r3, #1
 800254e:	2300      	moveq	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	e015      	b.n	8002580 <HAL_TIM_PWM_Start+0xfc>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	2b08      	cmp	r3, #8
 8002558:	d109      	bne.n	800256e <HAL_TIM_PWM_Start+0xea>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b01      	cmp	r3, #1
 8002564:	bf14      	ite	ne
 8002566:	2301      	movne	r3, #1
 8002568:	2300      	moveq	r3, #0
 800256a:	b2db      	uxtb	r3, r3
 800256c:	e008      	b.n	8002580 <HAL_TIM_PWM_Start+0xfc>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b01      	cmp	r3, #1
 8002578:	bf14      	ite	ne
 800257a:	2301      	movne	r3, #1
 800257c:	2300      	moveq	r3, #0
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <HAL_TIM_PWM_Start+0x104>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e05e      	b.n	8002646 <HAL_TIM_PWM_Start+0x1c2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d104      	bne.n	8002598 <HAL_TIM_PWM_Start+0x114>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2202      	movs	r2, #2
 8002592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002596:	e013      	b.n	80025c0 <HAL_TIM_PWM_Start+0x13c>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	2b04      	cmp	r3, #4
 800259c:	d104      	bne.n	80025a8 <HAL_TIM_PWM_Start+0x124>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2202      	movs	r2, #2
 80025a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025a6:	e00b      	b.n	80025c0 <HAL_TIM_PWM_Start+0x13c>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d104      	bne.n	80025b8 <HAL_TIM_PWM_Start+0x134>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2202      	movs	r2, #2
 80025b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025b6:	e003      	b.n	80025c0 <HAL_TIM_PWM_Start+0x13c>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2201      	movs	r2, #1
 80025c6:	6839      	ldr	r1, [r7, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f001 f941 	bl	8003850 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a1f      	ldr	r2, [pc, #124]	; (8002650 <HAL_TIM_PWM_Start+0x1cc>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d107      	bne.n	80025e8 <HAL_TIM_PWM_Start+0x164>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a18      	ldr	r2, [pc, #96]	; (8002650 <HAL_TIM_PWM_Start+0x1cc>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00e      	beq.n	8002610 <HAL_TIM_PWM_Start+0x18c>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025fa:	d009      	beq.n	8002610 <HAL_TIM_PWM_Start+0x18c>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a14      	ldr	r2, [pc, #80]	; (8002654 <HAL_TIM_PWM_Start+0x1d0>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d004      	beq.n	8002610 <HAL_TIM_PWM_Start+0x18c>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a13      	ldr	r2, [pc, #76]	; (8002658 <HAL_TIM_PWM_Start+0x1d4>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d111      	bne.n	8002634 <HAL_TIM_PWM_Start+0x1b0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b06      	cmp	r3, #6
 8002620:	d010      	beq.n	8002644 <HAL_TIM_PWM_Start+0x1c0>
    {
      __HAL_TIM_ENABLE(htim);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f042 0201 	orr.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002632:	e007      	b.n	8002644 <HAL_TIM_PWM_Start+0x1c0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40012c00 	.word	0x40012c00
 8002654:	40000400 	.word	0x40000400
 8002658:	40000800 	.word	0x40000800
 800265c:	08004e04 	.word	0x08004e04

08002660 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a52      	ldr	r2, [pc, #328]	; (80027b8 <HAL_TIM_PWM_Stop+0x158>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d10b      	bne.n	800268c <HAL_TIM_PWM_Stop+0x2c>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d040      	beq.n	80026fc <HAL_TIM_PWM_Stop+0x9c>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b04      	cmp	r3, #4
 800267e:	d03d      	beq.n	80026fc <HAL_TIM_PWM_Stop+0x9c>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	2b08      	cmp	r3, #8
 8002684:	d03a      	beq.n	80026fc <HAL_TIM_PWM_Stop+0x9c>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b0c      	cmp	r3, #12
 800268a:	d037      	beq.n	80026fc <HAL_TIM_PWM_Stop+0x9c>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002694:	d10b      	bne.n	80026ae <HAL_TIM_PWM_Stop+0x4e>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d02f      	beq.n	80026fc <HAL_TIM_PWM_Stop+0x9c>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d02c      	beq.n	80026fc <HAL_TIM_PWM_Stop+0x9c>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	d029      	beq.n	80026fc <HAL_TIM_PWM_Stop+0x9c>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	2b0c      	cmp	r3, #12
 80026ac:	d026      	beq.n	80026fc <HAL_TIM_PWM_Stop+0x9c>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a42      	ldr	r2, [pc, #264]	; (80027bc <HAL_TIM_PWM_Stop+0x15c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d10b      	bne.n	80026d0 <HAL_TIM_PWM_Stop+0x70>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d01e      	beq.n	80026fc <HAL_TIM_PWM_Stop+0x9c>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	d01b      	beq.n	80026fc <HAL_TIM_PWM_Stop+0x9c>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d018      	beq.n	80026fc <HAL_TIM_PWM_Stop+0x9c>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b0c      	cmp	r3, #12
 80026ce:	d015      	beq.n	80026fc <HAL_TIM_PWM_Stop+0x9c>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a3a      	ldr	r2, [pc, #232]	; (80027c0 <HAL_TIM_PWM_Stop+0x160>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d10b      	bne.n	80026f2 <HAL_TIM_PWM_Stop+0x92>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00d      	beq.n	80026fc <HAL_TIM_PWM_Stop+0x9c>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d00a      	beq.n	80026fc <HAL_TIM_PWM_Stop+0x9c>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d007      	beq.n	80026fc <HAL_TIM_PWM_Stop+0x9c>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	2b0c      	cmp	r3, #12
 80026f0:	d004      	beq.n	80026fc <HAL_TIM_PWM_Stop+0x9c>
 80026f2:	f240 51cd 	movw	r1, #1485	; 0x5cd
 80026f6:	4833      	ldr	r0, [pc, #204]	; (80027c4 <HAL_TIM_PWM_Stop+0x164>)
 80026f8:	f7fd ff69 	bl	80005ce <assert_failed>

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2200      	movs	r2, #0
 8002702:	6839      	ldr	r1, [r7, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f001 f8a3 	bl	8003850 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a2a      	ldr	r2, [pc, #168]	; (80027b8 <HAL_TIM_PWM_Stop+0x158>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d117      	bne.n	8002744 <HAL_TIM_PWM_Stop+0xe4>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6a1a      	ldr	r2, [r3, #32]
 800271a:	f241 1311 	movw	r3, #4369	; 0x1111
 800271e:	4013      	ands	r3, r2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10f      	bne.n	8002744 <HAL_TIM_PWM_Stop+0xe4>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6a1a      	ldr	r2, [r3, #32]
 800272a:	f240 4344 	movw	r3, #1092	; 0x444
 800272e:	4013      	ands	r3, r2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d107      	bne.n	8002744 <HAL_TIM_PWM_Stop+0xe4>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002742:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6a1a      	ldr	r2, [r3, #32]
 800274a:	f241 1311 	movw	r3, #4369	; 0x1111
 800274e:	4013      	ands	r3, r2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10f      	bne.n	8002774 <HAL_TIM_PWM_Stop+0x114>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6a1a      	ldr	r2, [r3, #32]
 800275a:	f240 4344 	movw	r3, #1092	; 0x444
 800275e:	4013      	ands	r3, r2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d107      	bne.n	8002774 <HAL_TIM_PWM_Stop+0x114>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0201 	bic.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d104      	bne.n	8002784 <HAL_TIM_PWM_Stop+0x124>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002782:	e013      	b.n	80027ac <HAL_TIM_PWM_Stop+0x14c>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	2b04      	cmp	r3, #4
 8002788:	d104      	bne.n	8002794 <HAL_TIM_PWM_Stop+0x134>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002792:	e00b      	b.n	80027ac <HAL_TIM_PWM_Stop+0x14c>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	2b08      	cmp	r3, #8
 8002798:	d104      	bne.n	80027a4 <HAL_TIM_PWM_Stop+0x144>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027a2:	e003      	b.n	80027ac <HAL_TIM_PWM_Stop+0x14c>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40012c00 	.word	0x40012c00
 80027bc:	40000400 	.word	0x40000400
 80027c0:	40000800 	.word	0x40000800
 80027c4:	08004e04 	.word	0x08004e04

080027c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d122      	bne.n	8002824 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d11b      	bne.n	8002824 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f06f 0202 	mvn.w	r2, #2
 80027f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 fcf7 	bl	80031fe <HAL_TIM_IC_CaptureCallback>
 8002810:	e005      	b.n	800281e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 fcea 	bl	80031ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 fcf9 	bl	8003210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	2b04      	cmp	r3, #4
 8002830:	d122      	bne.n	8002878 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b04      	cmp	r3, #4
 800283e:	d11b      	bne.n	8002878 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f06f 0204 	mvn.w	r2, #4
 8002848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2202      	movs	r2, #2
 800284e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 fccd 	bl	80031fe <HAL_TIM_IC_CaptureCallback>
 8002864:	e005      	b.n	8002872 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 fcc0 	bl	80031ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 fccf 	bl	8003210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b08      	cmp	r3, #8
 8002884:	d122      	bne.n	80028cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b08      	cmp	r3, #8
 8002892:	d11b      	bne.n	80028cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f06f 0208 	mvn.w	r2, #8
 800289c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2204      	movs	r2, #4
 80028a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fca3 	bl	80031fe <HAL_TIM_IC_CaptureCallback>
 80028b8:	e005      	b.n	80028c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 fc96 	bl	80031ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 fca5 	bl	8003210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	2b10      	cmp	r3, #16
 80028d8:	d122      	bne.n	8002920 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f003 0310 	and.w	r3, r3, #16
 80028e4:	2b10      	cmp	r3, #16
 80028e6:	d11b      	bne.n	8002920 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f06f 0210 	mvn.w	r2, #16
 80028f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2208      	movs	r2, #8
 80028f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fc79 	bl	80031fe <HAL_TIM_IC_CaptureCallback>
 800290c:	e005      	b.n	800291a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 fc6c 	bl	80031ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 fc7b 	bl	8003210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b01      	cmp	r3, #1
 800292c:	d10e      	bne.n	800294c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b01      	cmp	r3, #1
 800293a:	d107      	bne.n	800294c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f06f 0201 	mvn.w	r2, #1
 8002944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fd fe1e 	bl	8000588 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002956:	2b80      	cmp	r3, #128	; 0x80
 8002958:	d10e      	bne.n	8002978 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002964:	2b80      	cmp	r3, #128	; 0x80
 8002966:	d107      	bne.n	8002978 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f001 f873 	bl	8003a5e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002982:	2b40      	cmp	r3, #64	; 0x40
 8002984:	d10e      	bne.n	80029a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002990:	2b40      	cmp	r3, #64	; 0x40
 8002992:	d107      	bne.n	80029a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800299c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 fc3f 	bl	8003222 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	2b20      	cmp	r3, #32
 80029b0:	d10e      	bne.n	80029d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f003 0320 	and.w	r3, r3, #32
 80029bc:	2b20      	cmp	r3, #32
 80029be:	d107      	bne.n	80029d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0220 	mvn.w	r2, #32
 80029c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f001 f83e 	bl	8003a4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029d0:	bf00      	nop
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d010      	beq.n	8002a0c <HAL_TIM_PWM_ConfigChannel+0x34>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b04      	cmp	r3, #4
 80029ee:	d00d      	beq.n	8002a0c <HAL_TIM_PWM_ConfigChannel+0x34>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d00a      	beq.n	8002a0c <HAL_TIM_PWM_ConfigChannel+0x34>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b0c      	cmp	r3, #12
 80029fa:	d007      	beq.n	8002a0c <HAL_TIM_PWM_ConfigChannel+0x34>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b3c      	cmp	r3, #60	; 0x3c
 8002a00:	d004      	beq.n	8002a0c <HAL_TIM_PWM_ConfigChannel+0x34>
 8002a02:	f241 0127 	movw	r1, #4135	; 0x1027
 8002a06:	489e      	ldr	r0, [pc, #632]	; (8002c80 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8002a08:	f7fd fde1 	bl	80005ce <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b60      	cmp	r3, #96	; 0x60
 8002a12:	d008      	beq.n	8002a26 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b70      	cmp	r3, #112	; 0x70
 8002a1a:	d004      	beq.n	8002a26 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8002a1c:	f241 0128 	movw	r1, #4136	; 0x1028
 8002a20:	4897      	ldr	r0, [pc, #604]	; (8002c80 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8002a22:	f7fd fdd4 	bl	80005ce <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d008      	beq.n	8002a40 <HAL_TIM_PWM_ConfigChannel+0x68>
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d004      	beq.n	8002a40 <HAL_TIM_PWM_ConfigChannel+0x68>
 8002a36:	f241 0129 	movw	r1, #4137	; 0x1029
 8002a3a:	4891      	ldr	r0, [pc, #580]	; (8002c80 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8002a3c:	f7fd fdc7 	bl	80005ce <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <HAL_TIM_PWM_ConfigChannel+0x82>
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d004      	beq.n	8002a5a <HAL_TIM_PWM_ConfigChannel+0x82>
 8002a50:	f241 012a 	movw	r1, #4138	; 0x102a
 8002a54:	488a      	ldr	r0, [pc, #552]	; (8002c80 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8002a56:	f7fd fdba 	bl	80005ce <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_TIM_PWM_ConfigChannel+0x90>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e119      	b.n	8002c9c <HAL_TIM_PWM_ConfigChannel+0x2c4>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b0c      	cmp	r3, #12
 8002a74:	f200 810c 	bhi.w	8002c90 <HAL_TIM_PWM_ConfigChannel+0x2b8>
 8002a78:	a201      	add	r2, pc, #4	; (adr r2, 8002a80 <HAL_TIM_PWM_ConfigChannel+0xa8>)
 8002a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7e:	bf00      	nop
 8002a80:	08002ab5 	.word	0x08002ab5
 8002a84:	08002c91 	.word	0x08002c91
 8002a88:	08002c91 	.word	0x08002c91
 8002a8c:	08002c91 	.word	0x08002c91
 8002a90:	08002b27 	.word	0x08002b27
 8002a94:	08002c91 	.word	0x08002c91
 8002a98:	08002c91 	.word	0x08002c91
 8002a9c:	08002c91 	.word	0x08002c91
 8002aa0:	08002b9b 	.word	0x08002b9b
 8002aa4:	08002c91 	.word	0x08002c91
 8002aa8:	08002c91 	.word	0x08002c91
 8002aac:	08002c91 	.word	0x08002c91
 8002ab0:	08002c0d 	.word	0x08002c0d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a72      	ldr	r2, [pc, #456]	; (8002c84 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d013      	beq.n	8002ae6 <HAL_TIM_PWM_ConfigChannel+0x10e>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac6:	d00e      	beq.n	8002ae6 <HAL_TIM_PWM_ConfigChannel+0x10e>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a6e      	ldr	r2, [pc, #440]	; (8002c88 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d009      	beq.n	8002ae6 <HAL_TIM_PWM_ConfigChannel+0x10e>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a6d      	ldr	r2, [pc, #436]	; (8002c8c <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d004      	beq.n	8002ae6 <HAL_TIM_PWM_ConfigChannel+0x10e>
 8002adc:	f241 0134 	movw	r1, #4148	; 0x1034
 8002ae0:	4867      	ldr	r0, [pc, #412]	; (8002c80 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8002ae2:	f7fd fd74 	bl	80005ce <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68b9      	ldr	r1, [r7, #8]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f000 fc03 	bl	80032f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	699a      	ldr	r2, [r3, #24]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f042 0208 	orr.w	r2, r2, #8
 8002b00:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	699a      	ldr	r2, [r3, #24]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0204 	bic.w	r2, r2, #4
 8002b10:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6999      	ldr	r1, [r3, #24]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	691a      	ldr	r2, [r3, #16]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	619a      	str	r2, [r3, #24]
      break;
 8002b24:	e0b5      	b.n	8002c92 <HAL_TIM_PWM_ConfigChannel+0x2ba>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a56      	ldr	r2, [pc, #344]	; (8002c84 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d013      	beq.n	8002b58 <HAL_TIM_PWM_ConfigChannel+0x180>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b38:	d00e      	beq.n	8002b58 <HAL_TIM_PWM_ConfigChannel+0x180>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a52      	ldr	r2, [pc, #328]	; (8002c88 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d009      	beq.n	8002b58 <HAL_TIM_PWM_ConfigChannel+0x180>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a50      	ldr	r2, [pc, #320]	; (8002c8c <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d004      	beq.n	8002b58 <HAL_TIM_PWM_ConfigChannel+0x180>
 8002b4e:	f241 0145 	movw	r1, #4165	; 0x1045
 8002b52:	484b      	ldr	r0, [pc, #300]	; (8002c80 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8002b54:	f7fd fd3b 	bl	80005ce <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68b9      	ldr	r1, [r7, #8]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f000 fc5a 	bl	8003418 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699a      	ldr	r2, [r3, #24]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699a      	ldr	r2, [r3, #24]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6999      	ldr	r1, [r3, #24]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	021a      	lsls	r2, r3, #8
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	619a      	str	r2, [r3, #24]
      break;
 8002b98:	e07b      	b.n	8002c92 <HAL_TIM_PWM_ConfigChannel+0x2ba>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a39      	ldr	r2, [pc, #228]	; (8002c84 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d013      	beq.n	8002bcc <HAL_TIM_PWM_ConfigChannel+0x1f4>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bac:	d00e      	beq.n	8002bcc <HAL_TIM_PWM_ConfigChannel+0x1f4>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a35      	ldr	r2, [pc, #212]	; (8002c88 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d009      	beq.n	8002bcc <HAL_TIM_PWM_ConfigChannel+0x1f4>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a33      	ldr	r2, [pc, #204]	; (8002c8c <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d004      	beq.n	8002bcc <HAL_TIM_PWM_ConfigChannel+0x1f4>
 8002bc2:	f241 0156 	movw	r1, #4182	; 0x1056
 8002bc6:	482e      	ldr	r0, [pc, #184]	; (8002c80 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8002bc8:	f7fd fd01 	bl	80005ce <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68b9      	ldr	r1, [r7, #8]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 fcb4 	bl	8003540 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	69da      	ldr	r2, [r3, #28]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0208 	orr.w	r2, r2, #8
 8002be6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	69da      	ldr	r2, [r3, #28]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0204 	bic.w	r2, r2, #4
 8002bf6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	69d9      	ldr	r1, [r3, #28]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	691a      	ldr	r2, [r3, #16]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	61da      	str	r2, [r3, #28]
      break;
 8002c0a:	e042      	b.n	8002c92 <HAL_TIM_PWM_ConfigChannel+0x2ba>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1c      	ldr	r2, [pc, #112]	; (8002c84 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d013      	beq.n	8002c3e <HAL_TIM_PWM_ConfigChannel+0x266>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c1e:	d00e      	beq.n	8002c3e <HAL_TIM_PWM_ConfigChannel+0x266>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a18      	ldr	r2, [pc, #96]	; (8002c88 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d009      	beq.n	8002c3e <HAL_TIM_PWM_ConfigChannel+0x266>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a17      	ldr	r2, [pc, #92]	; (8002c8c <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d004      	beq.n	8002c3e <HAL_TIM_PWM_ConfigChannel+0x266>
 8002c34:	f241 0167 	movw	r1, #4199	; 0x1067
 8002c38:	4811      	ldr	r0, [pc, #68]	; (8002c80 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8002c3a:	f7fd fcc8 	bl	80005ce <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68b9      	ldr	r1, [r7, #8]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 fd0f 	bl	8003668 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	69da      	ldr	r2, [r3, #28]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	69da      	ldr	r2, [r3, #28]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	69d9      	ldr	r1, [r3, #28]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	021a      	lsls	r2, r3, #8
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	61da      	str	r2, [r3, #28]
      break;
 8002c7e:	e008      	b.n	8002c92 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8002c80:	08004e04 	.word	0x08004e04
 8002c84:	40012c00 	.word	0x40012c00
 8002c88:	40000400 	.word	0x40000400
 8002c8c:	40000800 	.word	0x40000800
    }

    default:
      break;
 8002c90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <HAL_TIM_ConfigClockSource+0x18>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e28b      	b.n	80031d4 <HAL_TIM_ConfigClockSource+0x530>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd4:	d029      	beq.n	8002d2a <HAL_TIM_ConfigClockSource+0x86>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cde:	d024      	beq.n	8002d2a <HAL_TIM_ConfigClockSource+0x86>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d020      	beq.n	8002d2a <HAL_TIM_ConfigClockSource+0x86>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b10      	cmp	r3, #16
 8002cee:	d01c      	beq.n	8002d2a <HAL_TIM_ConfigClockSource+0x86>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b20      	cmp	r3, #32
 8002cf6:	d018      	beq.n	8002d2a <HAL_TIM_ConfigClockSource+0x86>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b30      	cmp	r3, #48	; 0x30
 8002cfe:	d014      	beq.n	8002d2a <HAL_TIM_ConfigClockSource+0x86>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b40      	cmp	r3, #64	; 0x40
 8002d06:	d010      	beq.n	8002d2a <HAL_TIM_ConfigClockSource+0x86>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b50      	cmp	r3, #80	; 0x50
 8002d0e:	d00c      	beq.n	8002d2a <HAL_TIM_ConfigClockSource+0x86>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b60      	cmp	r3, #96	; 0x60
 8002d16:	d008      	beq.n	8002d2a <HAL_TIM_ConfigClockSource+0x86>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b70      	cmp	r3, #112	; 0x70
 8002d1e:	d004      	beq.n	8002d2a <HAL_TIM_ConfigClockSource+0x86>
 8002d20:	f241 4132 	movw	r1, #5170	; 0x1432
 8002d24:	489e      	ldr	r0, [pc, #632]	; (8002fa0 <HAL_TIM_ConfigClockSource+0x2fc>)
 8002d26:	f7fd fc52 	bl	80005ce <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d38:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d40:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d52:	f000 80be 	beq.w	8002ed2 <HAL_TIM_ConfigClockSource+0x22e>
 8002d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d5a:	f200 822f 	bhi.w	80031bc <HAL_TIM_ConfigClockSource+0x518>
 8002d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d62:	d02d      	beq.n	8002dc0 <HAL_TIM_ConfigClockSource+0x11c>
 8002d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d68:	f200 8228 	bhi.w	80031bc <HAL_TIM_ConfigClockSource+0x518>
 8002d6c:	2b70      	cmp	r3, #112	; 0x70
 8002d6e:	d045      	beq.n	8002dfc <HAL_TIM_ConfigClockSource+0x158>
 8002d70:	2b70      	cmp	r3, #112	; 0x70
 8002d72:	f200 8223 	bhi.w	80031bc <HAL_TIM_ConfigClockSource+0x518>
 8002d76:	2b60      	cmp	r3, #96	; 0x60
 8002d78:	f000 8166 	beq.w	8003048 <HAL_TIM_ConfigClockSource+0x3a4>
 8002d7c:	2b60      	cmp	r3, #96	; 0x60
 8002d7e:	f200 821d 	bhi.w	80031bc <HAL_TIM_ConfigClockSource+0x518>
 8002d82:	2b50      	cmp	r3, #80	; 0x50
 8002d84:	f000 8114 	beq.w	8002fb0 <HAL_TIM_ConfigClockSource+0x30c>
 8002d88:	2b50      	cmp	r3, #80	; 0x50
 8002d8a:	f200 8217 	bhi.w	80031bc <HAL_TIM_ConfigClockSource+0x518>
 8002d8e:	2b40      	cmp	r3, #64	; 0x40
 8002d90:	f000 81a6 	beq.w	80030e0 <HAL_TIM_ConfigClockSource+0x43c>
 8002d94:	2b40      	cmp	r3, #64	; 0x40
 8002d96:	f200 8211 	bhi.w	80031bc <HAL_TIM_ConfigClockSource+0x518>
 8002d9a:	2b30      	cmp	r3, #48	; 0x30
 8002d9c:	f000 81ec 	beq.w	8003178 <HAL_TIM_ConfigClockSource+0x4d4>
 8002da0:	2b30      	cmp	r3, #48	; 0x30
 8002da2:	f200 820b 	bhi.w	80031bc <HAL_TIM_ConfigClockSource+0x518>
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	f000 81e6 	beq.w	8003178 <HAL_TIM_ConfigClockSource+0x4d4>
 8002dac:	2b20      	cmp	r3, #32
 8002dae:	f200 8205 	bhi.w	80031bc <HAL_TIM_ConfigClockSource+0x518>
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 81e0 	beq.w	8003178 <HAL_TIM_ConfigClockSource+0x4d4>
 8002db8:	2b10      	cmp	r3, #16
 8002dba:	f000 81dd 	beq.w	8003178 <HAL_TIM_ConfigClockSource+0x4d4>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002dbe:	e1fd      	b.n	80031bc <HAL_TIM_ConfigClockSource+0x518>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a77      	ldr	r2, [pc, #476]	; (8002fa4 <HAL_TIM_ConfigClockSource+0x300>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	f000 81fa 	beq.w	80031c0 <HAL_TIM_ConfigClockSource+0x51c>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd4:	f000 81f4 	beq.w	80031c0 <HAL_TIM_ConfigClockSource+0x51c>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a72      	ldr	r2, [pc, #456]	; (8002fa8 <HAL_TIM_ConfigClockSource+0x304>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	f000 81ee 	beq.w	80031c0 <HAL_TIM_ConfigClockSource+0x51c>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a70      	ldr	r2, [pc, #448]	; (8002fac <HAL_TIM_ConfigClockSource+0x308>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	f000 81e8 	beq.w	80031c0 <HAL_TIM_ConfigClockSource+0x51c>
 8002df0:	f241 413e 	movw	r1, #5182	; 0x143e
 8002df4:	486a      	ldr	r0, [pc, #424]	; (8002fa0 <HAL_TIM_ConfigClockSource+0x2fc>)
 8002df6:	f7fd fbea 	bl	80005ce <assert_failed>
      break;
 8002dfa:	e1e1      	b.n	80031c0 <HAL_TIM_ConfigClockSource+0x51c>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a68      	ldr	r2, [pc, #416]	; (8002fa4 <HAL_TIM_ConfigClockSource+0x300>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d013      	beq.n	8002e2e <HAL_TIM_ConfigClockSource+0x18a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e0e:	d00e      	beq.n	8002e2e <HAL_TIM_ConfigClockSource+0x18a>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a64      	ldr	r2, [pc, #400]	; (8002fa8 <HAL_TIM_ConfigClockSource+0x304>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d009      	beq.n	8002e2e <HAL_TIM_ConfigClockSource+0x18a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a63      	ldr	r2, [pc, #396]	; (8002fac <HAL_TIM_ConfigClockSource+0x308>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d004      	beq.n	8002e2e <HAL_TIM_ConfigClockSource+0x18a>
 8002e24:	f241 4145 	movw	r1, #5189	; 0x1445
 8002e28:	485d      	ldr	r0, [pc, #372]	; (8002fa0 <HAL_TIM_ConfigClockSource+0x2fc>)
 8002e2a:	f7fd fbd0 	bl	80005ce <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d013      	beq.n	8002e5e <HAL_TIM_ConfigClockSource+0x1ba>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e3e:	d00e      	beq.n	8002e5e <HAL_TIM_ConfigClockSource+0x1ba>
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e48:	d009      	beq.n	8002e5e <HAL_TIM_ConfigClockSource+0x1ba>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e52:	d004      	beq.n	8002e5e <HAL_TIM_ConfigClockSource+0x1ba>
 8002e54:	f241 4148 	movw	r1, #5192	; 0x1448
 8002e58:	4851      	ldr	r0, [pc, #324]	; (8002fa0 <HAL_TIM_ConfigClockSource+0x2fc>)
 8002e5a:	f7fd fbb8 	bl	80005ce <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e66:	d014      	beq.n	8002e92 <HAL_TIM_ConfigClockSource+0x1ee>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d010      	beq.n	8002e92 <HAL_TIM_ConfigClockSource+0x1ee>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00c      	beq.n	8002e92 <HAL_TIM_ConfigClockSource+0x1ee>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d008      	beq.n	8002e92 <HAL_TIM_ConfigClockSource+0x1ee>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b0a      	cmp	r3, #10
 8002e86:	d004      	beq.n	8002e92 <HAL_TIM_ConfigClockSource+0x1ee>
 8002e88:	f241 4149 	movw	r1, #5193	; 0x1449
 8002e8c:	4844      	ldr	r0, [pc, #272]	; (8002fa0 <HAL_TIM_ConfigClockSource+0x2fc>)
 8002e8e:	f7fd fb9e 	bl	80005ce <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	2b0f      	cmp	r3, #15
 8002e98:	d904      	bls.n	8002ea4 <HAL_TIM_ConfigClockSource+0x200>
 8002e9a:	f241 414a 	movw	r1, #5194	; 0x144a
 8002e9e:	4840      	ldr	r0, [pc, #256]	; (8002fa0 <HAL_TIM_ConfigClockSource+0x2fc>)
 8002ea0:	f7fd fb95 	bl	80005ce <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6818      	ldr	r0, [r3, #0]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	6899      	ldr	r1, [r3, #8]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f000 fcad 	bl	8003812 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ec6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	609a      	str	r2, [r3, #8]
      break;
 8002ed0:	e177      	b.n	80031c2 <HAL_TIM_ConfigClockSource+0x51e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a33      	ldr	r2, [pc, #204]	; (8002fa4 <HAL_TIM_ConfigClockSource+0x300>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d013      	beq.n	8002f04 <HAL_TIM_ConfigClockSource+0x260>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee4:	d00e      	beq.n	8002f04 <HAL_TIM_ConfigClockSource+0x260>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a2f      	ldr	r2, [pc, #188]	; (8002fa8 <HAL_TIM_ConfigClockSource+0x304>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d009      	beq.n	8002f04 <HAL_TIM_ConfigClockSource+0x260>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a2d      	ldr	r2, [pc, #180]	; (8002fac <HAL_TIM_ConfigClockSource+0x308>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d004      	beq.n	8002f04 <HAL_TIM_ConfigClockSource+0x260>
 8002efa:	f241 415d 	movw	r1, #5213	; 0x145d
 8002efe:	4828      	ldr	r0, [pc, #160]	; (8002fa0 <HAL_TIM_ConfigClockSource+0x2fc>)
 8002f00:	f7fd fb65 	bl	80005ce <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d013      	beq.n	8002f34 <HAL_TIM_ConfigClockSource+0x290>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f14:	d00e      	beq.n	8002f34 <HAL_TIM_ConfigClockSource+0x290>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f1e:	d009      	beq.n	8002f34 <HAL_TIM_ConfigClockSource+0x290>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f28:	d004      	beq.n	8002f34 <HAL_TIM_ConfigClockSource+0x290>
 8002f2a:	f44f 51a3 	mov.w	r1, #5216	; 0x1460
 8002f2e:	481c      	ldr	r0, [pc, #112]	; (8002fa0 <HAL_TIM_ConfigClockSource+0x2fc>)
 8002f30:	f7fd fb4d 	bl	80005ce <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f3c:	d014      	beq.n	8002f68 <HAL_TIM_ConfigClockSource+0x2c4>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d010      	beq.n	8002f68 <HAL_TIM_ConfigClockSource+0x2c4>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00c      	beq.n	8002f68 <HAL_TIM_ConfigClockSource+0x2c4>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d008      	beq.n	8002f68 <HAL_TIM_ConfigClockSource+0x2c4>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b0a      	cmp	r3, #10
 8002f5c:	d004      	beq.n	8002f68 <HAL_TIM_ConfigClockSource+0x2c4>
 8002f5e:	f241 4161 	movw	r1, #5217	; 0x1461
 8002f62:	480f      	ldr	r0, [pc, #60]	; (8002fa0 <HAL_TIM_ConfigClockSource+0x2fc>)
 8002f64:	f7fd fb33 	bl	80005ce <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	2b0f      	cmp	r3, #15
 8002f6e:	d904      	bls.n	8002f7a <HAL_TIM_ConfigClockSource+0x2d6>
 8002f70:	f241 4162 	movw	r1, #5218	; 0x1462
 8002f74:	480a      	ldr	r0, [pc, #40]	; (8002fa0 <HAL_TIM_ConfigClockSource+0x2fc>)
 8002f76:	f7fd fb2a 	bl	80005ce <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6818      	ldr	r0, [r3, #0]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6899      	ldr	r1, [r3, #8]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f000 fc42 	bl	8003812 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f9c:	609a      	str	r2, [r3, #8]
      break;
 8002f9e:	e110      	b.n	80031c2 <HAL_TIM_ConfigClockSource+0x51e>
 8002fa0:	08004e04 	.word	0x08004e04
 8002fa4:	40012c00 	.word	0x40012c00
 8002fa8:	40000400 	.word	0x40000400
 8002fac:	40000800 	.word	0x40000800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a89      	ldr	r2, [pc, #548]	; (80031dc <HAL_TIM_ConfigClockSource+0x538>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d013      	beq.n	8002fe2 <HAL_TIM_ConfigClockSource+0x33e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc2:	d00e      	beq.n	8002fe2 <HAL_TIM_ConfigClockSource+0x33e>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a85      	ldr	r2, [pc, #532]	; (80031e0 <HAL_TIM_ConfigClockSource+0x53c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d009      	beq.n	8002fe2 <HAL_TIM_ConfigClockSource+0x33e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a84      	ldr	r2, [pc, #528]	; (80031e4 <HAL_TIM_ConfigClockSource+0x540>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d004      	beq.n	8002fe2 <HAL_TIM_ConfigClockSource+0x33e>
 8002fd8:	f241 4171 	movw	r1, #5233	; 0x1471
 8002fdc:	4882      	ldr	r0, [pc, #520]	; (80031e8 <HAL_TIM_ConfigClockSource+0x544>)
 8002fde:	f7fd faf6 	bl	80005ce <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fea:	d014      	beq.n	8003016 <HAL_TIM_ConfigClockSource+0x372>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d010      	beq.n	8003016 <HAL_TIM_ConfigClockSource+0x372>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00c      	beq.n	8003016 <HAL_TIM_ConfigClockSource+0x372>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b02      	cmp	r3, #2
 8003002:	d008      	beq.n	8003016 <HAL_TIM_ConfigClockSource+0x372>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b0a      	cmp	r3, #10
 800300a:	d004      	beq.n	8003016 <HAL_TIM_ConfigClockSource+0x372>
 800300c:	f241 4174 	movw	r1, #5236	; 0x1474
 8003010:	4875      	ldr	r0, [pc, #468]	; (80031e8 <HAL_TIM_ConfigClockSource+0x544>)
 8003012:	f7fd fadc 	bl	80005ce <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	2b0f      	cmp	r3, #15
 800301c:	d904      	bls.n	8003028 <HAL_TIM_ConfigClockSource+0x384>
 800301e:	f241 4175 	movw	r1, #5237	; 0x1475
 8003022:	4871      	ldr	r0, [pc, #452]	; (80031e8 <HAL_TIM_ConfigClockSource+0x544>)
 8003024:	f7fd fad3 	bl	80005ce <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6818      	ldr	r0, [r3, #0]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	6859      	ldr	r1, [r3, #4]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	461a      	mov	r2, r3
 8003036:	f000 fb75 	bl	8003724 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2150      	movs	r1, #80	; 0x50
 8003040:	4618      	mov	r0, r3
 8003042:	f000 fbcc 	bl	80037de <TIM_ITRx_SetConfig>
      break;
 8003046:	e0bc      	b.n	80031c2 <HAL_TIM_ConfigClockSource+0x51e>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a63      	ldr	r2, [pc, #396]	; (80031dc <HAL_TIM_ConfigClockSource+0x538>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d013      	beq.n	800307a <HAL_TIM_ConfigClockSource+0x3d6>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800305a:	d00e      	beq.n	800307a <HAL_TIM_ConfigClockSource+0x3d6>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a5f      	ldr	r2, [pc, #380]	; (80031e0 <HAL_TIM_ConfigClockSource+0x53c>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d009      	beq.n	800307a <HAL_TIM_ConfigClockSource+0x3d6>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a5e      	ldr	r2, [pc, #376]	; (80031e4 <HAL_TIM_ConfigClockSource+0x540>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d004      	beq.n	800307a <HAL_TIM_ConfigClockSource+0x3d6>
 8003070:	f241 4181 	movw	r1, #5249	; 0x1481
 8003074:	485c      	ldr	r0, [pc, #368]	; (80031e8 <HAL_TIM_ConfigClockSource+0x544>)
 8003076:	f7fd faaa 	bl	80005ce <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003082:	d014      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0x40a>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d010      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0x40a>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00c      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0x40a>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b02      	cmp	r3, #2
 800309a:	d008      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0x40a>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b0a      	cmp	r3, #10
 80030a2:	d004      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0x40a>
 80030a4:	f241 4184 	movw	r1, #5252	; 0x1484
 80030a8:	484f      	ldr	r0, [pc, #316]	; (80031e8 <HAL_TIM_ConfigClockSource+0x544>)
 80030aa:	f7fd fa90 	bl	80005ce <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	2b0f      	cmp	r3, #15
 80030b4:	d904      	bls.n	80030c0 <HAL_TIM_ConfigClockSource+0x41c>
 80030b6:	f241 4185 	movw	r1, #5253	; 0x1485
 80030ba:	484b      	ldr	r0, [pc, #300]	; (80031e8 <HAL_TIM_ConfigClockSource+0x544>)
 80030bc:	f7fd fa87 	bl	80005ce <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6818      	ldr	r0, [r3, #0]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	6859      	ldr	r1, [r3, #4]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	461a      	mov	r2, r3
 80030ce:	f000 fb57 	bl	8003780 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2160      	movs	r1, #96	; 0x60
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 fb80 	bl	80037de <TIM_ITRx_SetConfig>
      break;
 80030de:	e070      	b.n	80031c2 <HAL_TIM_ConfigClockSource+0x51e>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a3d      	ldr	r2, [pc, #244]	; (80031dc <HAL_TIM_ConfigClockSource+0x538>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d013      	beq.n	8003112 <HAL_TIM_ConfigClockSource+0x46e>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f2:	d00e      	beq.n	8003112 <HAL_TIM_ConfigClockSource+0x46e>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a39      	ldr	r2, [pc, #228]	; (80031e0 <HAL_TIM_ConfigClockSource+0x53c>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d009      	beq.n	8003112 <HAL_TIM_ConfigClockSource+0x46e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a38      	ldr	r2, [pc, #224]	; (80031e4 <HAL_TIM_ConfigClockSource+0x540>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d004      	beq.n	8003112 <HAL_TIM_ConfigClockSource+0x46e>
 8003108:	f241 4191 	movw	r1, #5265	; 0x1491
 800310c:	4836      	ldr	r0, [pc, #216]	; (80031e8 <HAL_TIM_ConfigClockSource+0x544>)
 800310e:	f7fd fa5e 	bl	80005ce <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800311a:	d014      	beq.n	8003146 <HAL_TIM_ConfigClockSource+0x4a2>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d010      	beq.n	8003146 <HAL_TIM_ConfigClockSource+0x4a2>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00c      	beq.n	8003146 <HAL_TIM_ConfigClockSource+0x4a2>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b02      	cmp	r3, #2
 8003132:	d008      	beq.n	8003146 <HAL_TIM_ConfigClockSource+0x4a2>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b0a      	cmp	r3, #10
 800313a:	d004      	beq.n	8003146 <HAL_TIM_ConfigClockSource+0x4a2>
 800313c:	f241 4194 	movw	r1, #5268	; 0x1494
 8003140:	4829      	ldr	r0, [pc, #164]	; (80031e8 <HAL_TIM_ConfigClockSource+0x544>)
 8003142:	f7fd fa44 	bl	80005ce <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	2b0f      	cmp	r3, #15
 800314c:	d904      	bls.n	8003158 <HAL_TIM_ConfigClockSource+0x4b4>
 800314e:	f241 4195 	movw	r1, #5269	; 0x1495
 8003152:	4825      	ldr	r0, [pc, #148]	; (80031e8 <HAL_TIM_ConfigClockSource+0x544>)
 8003154:	f7fd fa3b 	bl	80005ce <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6818      	ldr	r0, [r3, #0]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	6859      	ldr	r1, [r3, #4]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	461a      	mov	r2, r3
 8003166:	f000 fadd 	bl	8003724 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2140      	movs	r1, #64	; 0x40
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fb34 	bl	80037de <TIM_ITRx_SetConfig>
      break;
 8003176:	e024      	b.n	80031c2 <HAL_TIM_ConfigClockSource+0x51e>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a17      	ldr	r2, [pc, #92]	; (80031dc <HAL_TIM_ConfigClockSource+0x538>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d013      	beq.n	80031aa <HAL_TIM_ConfigClockSource+0x506>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318a:	d00e      	beq.n	80031aa <HAL_TIM_ConfigClockSource+0x506>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a13      	ldr	r2, [pc, #76]	; (80031e0 <HAL_TIM_ConfigClockSource+0x53c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d009      	beq.n	80031aa <HAL_TIM_ConfigClockSource+0x506>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a12      	ldr	r2, [pc, #72]	; (80031e4 <HAL_TIM_ConfigClockSource+0x540>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d004      	beq.n	80031aa <HAL_TIM_ConfigClockSource+0x506>
 80031a0:	f241 41a4 	movw	r1, #5284	; 0x14a4
 80031a4:	4810      	ldr	r0, [pc, #64]	; (80031e8 <HAL_TIM_ConfigClockSource+0x544>)
 80031a6:	f7fd fa12 	bl	80005ce <assert_failed>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4619      	mov	r1, r3
 80031b4:	4610      	mov	r0, r2
 80031b6:	f000 fb12 	bl	80037de <TIM_ITRx_SetConfig>
        break;
 80031ba:	e002      	b.n	80031c2 <HAL_TIM_ConfigClockSource+0x51e>
      break;
 80031bc:	bf00      	nop
 80031be:	e000      	b.n	80031c2 <HAL_TIM_ConfigClockSource+0x51e>
      break;
 80031c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40012c00 	.word	0x40012c00
 80031e0:	40000400 	.word	0x40000400
 80031e4:	40000800 	.word	0x40000800
 80031e8:	08004e04 	.word	0x08004e04

080031ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr

080031fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr

08003222 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr

08003234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a29      	ldr	r2, [pc, #164]	; (80032ec <TIM_Base_SetConfig+0xb8>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00b      	beq.n	8003264 <TIM_Base_SetConfig+0x30>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003252:	d007      	beq.n	8003264 <TIM_Base_SetConfig+0x30>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a26      	ldr	r2, [pc, #152]	; (80032f0 <TIM_Base_SetConfig+0xbc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d003      	beq.n	8003264 <TIM_Base_SetConfig+0x30>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a25      	ldr	r2, [pc, #148]	; (80032f4 <TIM_Base_SetConfig+0xc0>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d108      	bne.n	8003276 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a1c      	ldr	r2, [pc, #112]	; (80032ec <TIM_Base_SetConfig+0xb8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00b      	beq.n	8003296 <TIM_Base_SetConfig+0x62>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003284:	d007      	beq.n	8003296 <TIM_Base_SetConfig+0x62>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a19      	ldr	r2, [pc, #100]	; (80032f0 <TIM_Base_SetConfig+0xbc>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d003      	beq.n	8003296 <TIM_Base_SetConfig+0x62>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a18      	ldr	r2, [pc, #96]	; (80032f4 <TIM_Base_SetConfig+0xc0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d108      	bne.n	80032a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800329c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a07      	ldr	r2, [pc, #28]	; (80032ec <TIM_Base_SetConfig+0xb8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d103      	bne.n	80032dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	615a      	str	r2, [r3, #20]
}
 80032e2:	bf00      	nop
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr
 80032ec:	40012c00 	.word	0x40012c00
 80032f0:	40000400 	.word	0x40000400
 80032f4:	40000800 	.word	0x40000800

080032f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	f023 0201 	bic.w	r2, r3, #1
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 0303 	bic.w	r3, r3, #3
 800332e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	4313      	orrs	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f023 0302 	bic.w	r3, r3, #2
 8003340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4313      	orrs	r3, r2
 800334a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a30      	ldr	r2, [pc, #192]	; (8003410 <TIM_OC1_SetConfig+0x118>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d119      	bne.n	8003388 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d008      	beq.n	800336e <TIM_OC1_SetConfig+0x76>
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	2b08      	cmp	r3, #8
 8003362:	d004      	beq.n	800336e <TIM_OC1_SetConfig+0x76>
 8003364:	f641 2141 	movw	r1, #6721	; 0x1a41
 8003368:	482a      	ldr	r0, [pc, #168]	; (8003414 <TIM_OC1_SetConfig+0x11c>)
 800336a:	f7fd f930 	bl	80005ce <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f023 0308 	bic.w	r3, r3, #8
 8003374:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	4313      	orrs	r3, r2
 800337e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f023 0304 	bic.w	r3, r3, #4
 8003386:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a21      	ldr	r2, [pc, #132]	; (8003410 <TIM_OC1_SetConfig+0x118>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d12d      	bne.n	80033ec <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003398:	d008      	beq.n	80033ac <TIM_OC1_SetConfig+0xb4>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d004      	beq.n	80033ac <TIM_OC1_SetConfig+0xb4>
 80033a2:	f641 214e 	movw	r1, #6734	; 0x1a4e
 80033a6:	481b      	ldr	r0, [pc, #108]	; (8003414 <TIM_OC1_SetConfig+0x11c>)
 80033a8:	f7fd f911 	bl	80005ce <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033b4:	d008      	beq.n	80033c8 <TIM_OC1_SetConfig+0xd0>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d004      	beq.n	80033c8 <TIM_OC1_SetConfig+0xd0>
 80033be:	f641 214f 	movw	r1, #6735	; 0x1a4f
 80033c2:	4814      	ldr	r0, [pc, #80]	; (8003414 <TIM_OC1_SetConfig+0x11c>)
 80033c4:	f7fd f903 	bl	80005ce <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	621a      	str	r2, [r3, #32]
}
 8003406:	bf00      	nop
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40012c00 	.word	0x40012c00
 8003414:	08004e04 	.word	0x08004e04

08003418 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	f023 0210 	bic.w	r2, r3, #16
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800344e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	021b      	lsls	r3, r3, #8
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	4313      	orrs	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f023 0320 	bic.w	r3, r3, #32
 8003462:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4313      	orrs	r3, r2
 800346e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a31      	ldr	r2, [pc, #196]	; (8003538 <TIM_OC2_SetConfig+0x120>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d11a      	bne.n	80034ae <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d008      	beq.n	8003492 <TIM_OC2_SetConfig+0x7a>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	2b08      	cmp	r3, #8
 8003486:	d004      	beq.n	8003492 <TIM_OC2_SetConfig+0x7a>
 8003488:	f641 218c 	movw	r1, #6796	; 0x1a8c
 800348c:	482b      	ldr	r0, [pc, #172]	; (800353c <TIM_OC2_SetConfig+0x124>)
 800348e:	f7fd f89e 	bl	80005ce <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003498:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034ac:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a21      	ldr	r2, [pc, #132]	; (8003538 <TIM_OC2_SetConfig+0x120>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d12f      	bne.n	8003516 <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034be:	d008      	beq.n	80034d2 <TIM_OC2_SetConfig+0xba>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d004      	beq.n	80034d2 <TIM_OC2_SetConfig+0xba>
 80034c8:	f641 219a 	movw	r1, #6810	; 0x1a9a
 80034cc:	481b      	ldr	r0, [pc, #108]	; (800353c <TIM_OC2_SetConfig+0x124>)
 80034ce:	f7fd f87e 	bl	80005ce <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034da:	d008      	beq.n	80034ee <TIM_OC2_SetConfig+0xd6>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d004      	beq.n	80034ee <TIM_OC2_SetConfig+0xd6>
 80034e4:	f641 219b 	movw	r1, #6811	; 0x1a9b
 80034e8:	4814      	ldr	r0, [pc, #80]	; (800353c <TIM_OC2_SetConfig+0x124>)
 80034ea:	f7fd f870 	bl	80005ce <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	4313      	orrs	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	621a      	str	r2, [r3, #32]
}
 8003530:	bf00      	nop
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40012c00 	.word	0x40012c00
 800353c:	08004e04 	.word	0x08004e04

08003540 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0303 	bic.w	r3, r3, #3
 8003576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	021b      	lsls	r3, r3, #8
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	4313      	orrs	r3, r2
 8003594:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a31      	ldr	r2, [pc, #196]	; (8003660 <TIM_OC3_SetConfig+0x120>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d11a      	bne.n	80035d4 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <TIM_OC3_SetConfig+0x78>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d004      	beq.n	80035b8 <TIM_OC3_SetConfig+0x78>
 80035ae:	f641 21d7 	movw	r1, #6871	; 0x1ad7
 80035b2:	482c      	ldr	r0, [pc, #176]	; (8003664 <TIM_OC3_SetConfig+0x124>)
 80035b4:	f7fd f80b 	bl	80005ce <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	021b      	lsls	r3, r3, #8
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a22      	ldr	r2, [pc, #136]	; (8003660 <TIM_OC3_SetConfig+0x120>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d12f      	bne.n	800363c <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035e4:	d008      	beq.n	80035f8 <TIM_OC3_SetConfig+0xb8>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d004      	beq.n	80035f8 <TIM_OC3_SetConfig+0xb8>
 80035ee:	f641 21e4 	movw	r1, #6884	; 0x1ae4
 80035f2:	481c      	ldr	r0, [pc, #112]	; (8003664 <TIM_OC3_SetConfig+0x124>)
 80035f4:	f7fc ffeb 	bl	80005ce <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003600:	d008      	beq.n	8003614 <TIM_OC3_SetConfig+0xd4>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d004      	beq.n	8003614 <TIM_OC3_SetConfig+0xd4>
 800360a:	f641 21e5 	movw	r1, #6885	; 0x1ae5
 800360e:	4815      	ldr	r0, [pc, #84]	; (8003664 <TIM_OC3_SetConfig+0x124>)
 8003610:	f7fc ffdd 	bl	80005ce <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800361a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003622:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	621a      	str	r2, [r3, #32]
}
 8003656:	bf00      	nop
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40012c00 	.word	0x40012c00
 8003664:	08004e04 	.word	0x08004e04

08003668 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800369e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	021b      	lsls	r3, r3, #8
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	031b      	lsls	r3, r3, #12
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a16      	ldr	r2, [pc, #88]	; (800371c <TIM_OC4_SetConfig+0xb4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d117      	bne.n	80036f8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036d0:	d008      	beq.n	80036e4 <TIM_OC4_SetConfig+0x7c>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d004      	beq.n	80036e4 <TIM_OC4_SetConfig+0x7c>
 80036da:	f641 3123 	movw	r1, #6947	; 0x1b23
 80036de:	4810      	ldr	r0, [pc, #64]	; (8003720 <TIM_OC4_SetConfig+0xb8>)
 80036e0:	f7fc ff75 	bl	80005ce <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	019b      	lsls	r3, r3, #6
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	621a      	str	r2, [r3, #32]
}
 8003712:	bf00      	nop
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40012c00 	.word	0x40012c00
 8003720:	08004e04 	.word	0x08004e04

08003724 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	f023 0201 	bic.w	r2, r3, #1
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800374e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f023 030a 	bic.w	r3, r3, #10
 8003760:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	4313      	orrs	r3, r2
 8003768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	621a      	str	r2, [r3, #32]
}
 8003776:	bf00      	nop
 8003778:	371c      	adds	r7, #28
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr

08003780 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	f023 0210 	bic.w	r2, r3, #16
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	031b      	lsls	r3, r3, #12
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	621a      	str	r2, [r3, #32]
}
 80037d4:	bf00      	nop
 80037d6:	371c      	adds	r7, #28
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr

080037de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037de:	b480      	push	{r7}
 80037e0:	b085      	sub	sp, #20
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	f043 0307 	orr.w	r3, r3, #7
 8003800:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	609a      	str	r2, [r3, #8]
}
 8003808:	bf00      	nop
 800380a:	3714      	adds	r7, #20
 800380c:	46bd      	mov	sp, r7
 800380e:	bc80      	pop	{r7}
 8003810:	4770      	bx	lr

08003812 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003812:	b480      	push	{r7}
 8003814:	b087      	sub	sp, #28
 8003816:	af00      	add	r7, sp, #0
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	607a      	str	r2, [r7, #4]
 800381e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800382c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	021a      	lsls	r2, r3, #8
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	431a      	orrs	r2, r3
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	4313      	orrs	r3, r2
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	4313      	orrs	r3, r2
 800383e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	609a      	str	r2, [r3, #8]
}
 8003846:	bf00      	nop
 8003848:	371c      	adds	r7, #28
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr

08003850 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4a22      	ldr	r2, [pc, #136]	; (80038e8 <TIM_CCxChannelCmd+0x98>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d010      	beq.n	8003886 <TIM_CCxChannelCmd+0x36>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386a:	d00c      	beq.n	8003886 <TIM_CCxChannelCmd+0x36>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4a1f      	ldr	r2, [pc, #124]	; (80038ec <TIM_CCxChannelCmd+0x9c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d008      	beq.n	8003886 <TIM_CCxChannelCmd+0x36>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4a1e      	ldr	r2, [pc, #120]	; (80038f0 <TIM_CCxChannelCmd+0xa0>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d004      	beq.n	8003886 <TIM_CCxChannelCmd+0x36>
 800387c:	f641 5109 	movw	r1, #7433	; 0x1d09
 8003880:	481c      	ldr	r0, [pc, #112]	; (80038f4 <TIM_CCxChannelCmd+0xa4>)
 8003882:	f7fc fea4 	bl	80005ce <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d010      	beq.n	80038ae <TIM_CCxChannelCmd+0x5e>
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b04      	cmp	r3, #4
 8003890:	d00d      	beq.n	80038ae <TIM_CCxChannelCmd+0x5e>
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	2b08      	cmp	r3, #8
 8003896:	d00a      	beq.n	80038ae <TIM_CCxChannelCmd+0x5e>
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	2b0c      	cmp	r3, #12
 800389c:	d007      	beq.n	80038ae <TIM_CCxChannelCmd+0x5e>
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b3c      	cmp	r3, #60	; 0x3c
 80038a2:	d004      	beq.n	80038ae <TIM_CCxChannelCmd+0x5e>
 80038a4:	f641 510a 	movw	r1, #7434	; 0x1d0a
 80038a8:	4812      	ldr	r0, [pc, #72]	; (80038f4 <TIM_CCxChannelCmd+0xa4>)
 80038aa:	f7fc fe90 	bl	80005ce <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f003 031f 	and.w	r3, r3, #31
 80038b4:	2201      	movs	r2, #1
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a1a      	ldr	r2, [r3, #32]
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	43db      	mvns	r3, r3
 80038c4:	401a      	ands	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a1a      	ldr	r2, [r3, #32]
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	f003 031f 	and.w	r3, r3, #31
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	fa01 f303 	lsl.w	r3, r1, r3
 80038da:	431a      	orrs	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	621a      	str	r2, [r3, #32]
}
 80038e0:	bf00      	nop
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40012c00 	.word	0x40012c00
 80038ec:	40000400 	.word	0x40000400
 80038f0:	40000800 	.word	0x40000800
 80038f4:	08004e04 	.word	0x08004e04

080038f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a4d      	ldr	r2, [pc, #308]	; (8003a3c <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d013      	beq.n	8003934 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003914:	d00e      	beq.n	8003934 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a49      	ldr	r2, [pc, #292]	; (8003a40 <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d009      	beq.n	8003934 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a47      	ldr	r2, [pc, #284]	; (8003a44 <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d004      	beq.n	8003934 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800392a:	f240 7186 	movw	r1, #1926	; 0x786
 800392e:	4846      	ldr	r0, [pc, #280]	; (8003a48 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 8003930:	f7fc fe4d 	bl	80005ce <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d020      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b10      	cmp	r3, #16
 8003942:	d01c      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b20      	cmp	r3, #32
 800394a:	d018      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b30      	cmp	r3, #48	; 0x30
 8003952:	d014      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b40      	cmp	r3, #64	; 0x40
 800395a:	d010      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b50      	cmp	r3, #80	; 0x50
 8003962:	d00c      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b60      	cmp	r3, #96	; 0x60
 800396a:	d008      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b70      	cmp	r3, #112	; 0x70
 8003972:	d004      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8003974:	f240 7187 	movw	r1, #1927	; 0x787
 8003978:	4833      	ldr	r0, [pc, #204]	; (8003a48 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 800397a:	f7fc fe28 	bl	80005ce <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b80      	cmp	r3, #128	; 0x80
 8003984:	d008      	beq.n	8003998 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d004      	beq.n	8003998 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800398e:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 8003992:	482d      	ldr	r0, [pc, #180]	; (8003a48 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 8003994:	f7fc fe1b 	bl	80005ce <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d101      	bne.n	80039a6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80039a2:	2302      	movs	r3, #2
 80039a4:	e046      	b.n	8003a34 <HAL_TIMEx_MasterConfigSynchronization+0x13c>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2202      	movs	r2, #2
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a15      	ldr	r2, [pc, #84]	; (8003a3c <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d00e      	beq.n	8003a08 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f2:	d009      	beq.n	8003a08 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a11      	ldr	r2, [pc, #68]	; (8003a40 <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d004      	beq.n	8003a08 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a10      	ldr	r2, [pc, #64]	; (8003a44 <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d10c      	bne.n	8003a22 <HAL_TIMEx_MasterConfigSynchronization+0x12a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40012c00 	.word	0x40012c00
 8003a40:	40000400 	.word	0x40000400
 8003a44:	40000800 	.word	0x40000800
 8003a48:	08004e3c 	.word	0x08004e3c

08003a4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr

08003a5e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	4770      	bx	lr

08003a70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e092      	b.n	8003ba8 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d02c      	beq.n	8003ae4 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a48      	ldr	r2, [pc, #288]	; (8003bb0 <HAL_UART_Init+0x140>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d00e      	beq.n	8003ab2 <HAL_UART_Init+0x42>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a46      	ldr	r2, [pc, #280]	; (8003bb4 <HAL_UART_Init+0x144>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d009      	beq.n	8003ab2 <HAL_UART_Init+0x42>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a45      	ldr	r2, [pc, #276]	; (8003bb8 <HAL_UART_Init+0x148>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d004      	beq.n	8003ab2 <HAL_UART_Init+0x42>
 8003aa8:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8003aac:	4843      	ldr	r0, [pc, #268]	; (8003bbc <HAL_UART_Init+0x14c>)
 8003aae:	f7fc fd8e 	bl	80005ce <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d028      	beq.n	8003b0c <HAL_UART_Init+0x9c>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ac2:	d023      	beq.n	8003b0c <HAL_UART_Init+0x9c>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003acc:	d01e      	beq.n	8003b0c <HAL_UART_Init+0x9c>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ad6:	d019      	beq.n	8003b0c <HAL_UART_Init+0x9c>
 8003ad8:	f240 116d 	movw	r1, #365	; 0x16d
 8003adc:	4837      	ldr	r0, [pc, #220]	; (8003bbc <HAL_UART_Init+0x14c>)
 8003ade:	f7fc fd76 	bl	80005ce <assert_failed>
 8003ae2:	e013      	b.n	8003b0c <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a31      	ldr	r2, [pc, #196]	; (8003bb0 <HAL_UART_Init+0x140>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00e      	beq.n	8003b0c <HAL_UART_Init+0x9c>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a30      	ldr	r2, [pc, #192]	; (8003bb4 <HAL_UART_Init+0x144>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d009      	beq.n	8003b0c <HAL_UART_Init+0x9c>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a2e      	ldr	r2, [pc, #184]	; (8003bb8 <HAL_UART_Init+0x148>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d004      	beq.n	8003b0c <HAL_UART_Init+0x9c>
 8003b02:	f240 1171 	movw	r1, #369	; 0x171
 8003b06:	482d      	ldr	r0, [pc, #180]	; (8003bbc <HAL_UART_Init+0x14c>)
 8003b08:	f7fc fd61 	bl	80005ce <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d009      	beq.n	8003b28 <HAL_UART_Init+0xb8>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b1c:	d004      	beq.n	8003b28 <HAL_UART_Init+0xb8>
 8003b1e:	f240 1173 	movw	r1, #371	; 0x173
 8003b22:	4826      	ldr	r0, [pc, #152]	; (8003bbc <HAL_UART_Init+0x14c>)
 8003b24:	f7fc fd53 	bl	80005ce <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d106      	bne.n	8003b42 <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7fc fef7 	bl	8000930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2224      	movs	r2, #36	; 0x24
 8003b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b58:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fb94 	bl	8004288 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b6e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695a      	ldr	r2, [r3, #20]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b7e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b8e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40013800 	.word	0x40013800
 8003bb4:	40004400 	.word	0x40004400
 8003bb8:	40004800 	.word	0x40004800
 8003bbc:	08004e78 	.word	0x08004e78

08003bc0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b20      	cmp	r3, #32
 8003bd8:	d130      	bne.n	8003c3c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <HAL_UART_Transmit_IT+0x26>
 8003be0:	88fb      	ldrh	r3, [r7, #6]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e029      	b.n	8003c3e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_UART_Transmit_IT+0x38>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e022      	b.n	8003c3e <HAL_UART_Transmit_IT+0x7e>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	88fa      	ldrh	r2, [r7, #6]
 8003c0a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	88fa      	ldrh	r2, [r7, #6]
 8003c10:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2221      	movs	r2, #33	; 0x21
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c36:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	e000      	b.n	8003c3e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003c3c:	2302      	movs	r3, #2
  }
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr

08003c48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08a      	sub	sp, #40	; 0x28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10d      	bne.n	8003c9a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	f003 0320 	and.w	r3, r3, #32
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_UART_IRQHandler+0x52>
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	f003 0320 	and.w	r3, r3, #32
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 fa4f 	bl	8004136 <UART_Receive_IT>
      return;
 8003c98:	e17b      	b.n	8003f92 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 80b1 	beq.w	8003e04 <HAL_UART_IRQHandler+0x1bc>
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d105      	bne.n	8003cb8 <HAL_UART_IRQHandler+0x70>
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 80a6 	beq.w	8003e04 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <HAL_UART_IRQHandler+0x90>
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	f043 0201 	orr.w	r2, r3, #1
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <HAL_UART_IRQHandler+0xb0>
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	f043 0202 	orr.w	r2, r3, #2
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <HAL_UART_IRQHandler+0xd0>
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d005      	beq.n	8003d18 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d10:	f043 0204 	orr.w	r2, r3, #4
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00f      	beq.n	8003d42 <HAL_UART_IRQHandler+0xfa>
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	f003 0320 	and.w	r3, r3, #32
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d104      	bne.n	8003d36 <HAL_UART_IRQHandler+0xee>
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d005      	beq.n	8003d42 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	f043 0208 	orr.w	r2, r3, #8
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 811e 	beq.w	8003f88 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d007      	beq.n	8003d66 <HAL_UART_IRQHandler+0x11e>
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	f003 0320 	and.w	r3, r3, #32
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 f9e8 	bl	8004136 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	bf14      	ite	ne
 8003d74:	2301      	movne	r3, #1
 8003d76:	2300      	moveq	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	f003 0308 	and.w	r3, r3, #8
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d102      	bne.n	8003d8e <HAL_UART_IRQHandler+0x146>
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d031      	beq.n	8003df2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f92a 	bl	8003fe8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d023      	beq.n	8003dea <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695a      	ldr	r2, [r3, #20]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003db0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d013      	beq.n	8003de2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbe:	4a76      	ldr	r2, [pc, #472]	; (8003f98 <HAL_UART_IRQHandler+0x350>)
 8003dc0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fd f87c 	bl	8000ec4 <HAL_DMA_Abort_IT>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d016      	beq.n	8003e00 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ddc:	4610      	mov	r0, r2
 8003dde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de0:	e00e      	b.n	8003e00 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f8ec 	bl	8003fc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de8:	e00a      	b.n	8003e00 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f8e8 	bl	8003fc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df0:	e006      	b.n	8003e00 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f8e4 	bl	8003fc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003dfe:	e0c3      	b.n	8003f88 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e00:	bf00      	nop
    return;
 8003e02:	e0c1      	b.n	8003f88 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	f040 80a1 	bne.w	8003f50 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	f003 0310 	and.w	r3, r3, #16
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 809b 	beq.w	8003f50 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	f003 0310 	and.w	r3, r3, #16
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 8095 	beq.w	8003f50 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d04e      	beq.n	8003ee8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003e54:	8a3b      	ldrh	r3, [r7, #16]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 8098 	beq.w	8003f8c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e60:	8a3a      	ldrh	r2, [r7, #16]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	f080 8092 	bcs.w	8003f8c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	8a3a      	ldrh	r2, [r7, #16]
 8003e6c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	2b20      	cmp	r3, #32
 8003e76:	d02b      	beq.n	8003ed0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e86:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695a      	ldr	r2, [r3, #20]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0201 	bic.w	r2, r2, #1
 8003e96:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695a      	ldr	r2, [r3, #20]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ea6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 0210 	bic.w	r2, r2, #16
 8003ec4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fc ffc0 	bl	8000e50 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	4619      	mov	r1, r3
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f876 	bl	8003fd2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003ee6:	e051      	b.n	8003f8c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d047      	beq.n	8003f90 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003f00:	8a7b      	ldrh	r3, [r7, #18]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d044      	beq.n	8003f90 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f14:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695a      	ldr	r2, [r3, #20]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0201 	bic.w	r2, r2, #1
 8003f24:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0210 	bic.w	r2, r2, #16
 8003f42:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f44:	8a7b      	ldrh	r3, [r7, #18]
 8003f46:	4619      	mov	r1, r3
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f842 	bl	8003fd2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003f4e:	e01f      	b.n	8003f90 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d008      	beq.n	8003f6c <HAL_UART_IRQHandler+0x324>
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f87f 	bl	8004068 <UART_Transmit_IT>
    return;
 8003f6a:	e012      	b.n	8003f92 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00d      	beq.n	8003f92 <HAL_UART_IRQHandler+0x34a>
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d008      	beq.n	8003f92 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f8c0 	bl	8004106 <UART_EndTransmit_IT>
    return;
 8003f86:	e004      	b.n	8003f92 <HAL_UART_IRQHandler+0x34a>
    return;
 8003f88:	bf00      	nop
 8003f8a:	e002      	b.n	8003f92 <HAL_UART_IRQHandler+0x34a>
      return;
 8003f8c:	bf00      	nop
 8003f8e:	e000      	b.n	8003f92 <HAL_UART_IRQHandler+0x34a>
      return;
 8003f90:	bf00      	nop
  }
}
 8003f92:	3728      	adds	r7, #40	; 0x28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	08004041 	.word	0x08004041

08003f9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bc80      	pop	{r7}
 8003fac:	4770      	bx	lr

08003fae <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bc80      	pop	{r7}
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bc80      	pop	{r7}
 8003fd0:	4770      	bx	lr

08003fd2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
 8003fda:	460b      	mov	r3, r1
 8003fdc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr

08003fe8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ffe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695a      	ldr	r2, [r3, #20]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0201 	bic.w	r2, r2, #1
 800400e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004014:	2b01      	cmp	r3, #1
 8004016:	d107      	bne.n	8004028 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0210 	bic.w	r2, r2, #16
 8004026:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004036:	bf00      	nop
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr

08004040 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f7ff ffb0 	bl	8003fc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004060:	bf00      	nop
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b21      	cmp	r3, #33	; 0x21
 800407a:	d13e      	bne.n	80040fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004084:	d114      	bne.n	80040b0 <UART_Transmit_IT+0x48>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d110      	bne.n	80040b0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	461a      	mov	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	1c9a      	adds	r2, r3, #2
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	621a      	str	r2, [r3, #32]
 80040ae:	e008      	b.n	80040c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	1c59      	adds	r1, r3, #1
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6211      	str	r1, [r2, #32]
 80040ba:	781a      	ldrb	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	3b01      	subs	r3, #1
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	4619      	mov	r1, r3
 80040d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10f      	bne.n	80040f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68da      	ldr	r2, [r3, #12]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	e000      	b.n	80040fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040fa:	2302      	movs	r3, #2
  }
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	bc80      	pop	{r7}
 8004104:	4770      	bx	lr

08004106 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b082      	sub	sp, #8
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800411c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2220      	movs	r2, #32
 8004122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7ff ff38 	bl	8003f9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b086      	sub	sp, #24
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b22      	cmp	r3, #34	; 0x22
 8004148:	f040 8099 	bne.w	800427e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004154:	d117      	bne.n	8004186 <UART_Receive_IT+0x50>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d113      	bne.n	8004186 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800415e:	2300      	movs	r3, #0
 8004160:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004166:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	b29b      	uxth	r3, r3
 8004170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004174:	b29a      	uxth	r2, r3
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417e:	1c9a      	adds	r2, r3, #2
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	629a      	str	r2, [r3, #40]	; 0x28
 8004184:	e026      	b.n	80041d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800418c:	2300      	movs	r3, #0
 800418e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004198:	d007      	beq.n	80041aa <UART_Receive_IT+0x74>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10a      	bne.n	80041b8 <UART_Receive_IT+0x82>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d106      	bne.n	80041b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	701a      	strb	r2, [r3, #0]
 80041b6:	e008      	b.n	80041ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ce:	1c5a      	adds	r2, r3, #1
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29b      	uxth	r3, r3
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	4619      	mov	r1, r3
 80041e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d148      	bne.n	800427a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0220 	bic.w	r2, r2, #32
 80041f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004206:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695a      	ldr	r2, [r3, #20]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0201 	bic.w	r2, r2, #1
 8004216:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2220      	movs	r2, #32
 800421c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004224:	2b01      	cmp	r3, #1
 8004226:	d123      	bne.n	8004270 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0210 	bic.w	r2, r2, #16
 800423c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0310 	and.w	r3, r3, #16
 8004248:	2b10      	cmp	r3, #16
 800424a:	d10a      	bne.n	8004262 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800424c:	2300      	movs	r3, #0
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004266:	4619      	mov	r1, r3
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7ff feb2 	bl	8003fd2 <HAL_UARTEx_RxEventCallback>
 800426e:	e002      	b.n	8004276 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff fe9c 	bl	8003fae <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004276:	2300      	movs	r3, #0
 8004278:	e002      	b.n	8004280 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	e000      	b.n	8004280 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800427e:	2302      	movs	r3, #2
  }
}
 8004280:	4618      	mov	r0, r3
 8004282:	3718      	adds	r7, #24
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	4a5f      	ldr	r2, [pc, #380]	; (8004414 <UART_SetConfig+0x18c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d904      	bls.n	80042a4 <UART_SetConfig+0x1c>
 800429a:	f640 6153 	movw	r1, #3667	; 0xe53
 800429e:	485e      	ldr	r0, [pc, #376]	; (8004418 <UART_SetConfig+0x190>)
 80042a0:	f7fc f995 	bl	80005ce <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d009      	beq.n	80042c0 <UART_SetConfig+0x38>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042b4:	d004      	beq.n	80042c0 <UART_SetConfig+0x38>
 80042b6:	f640 6154 	movw	r1, #3668	; 0xe54
 80042ba:	4857      	ldr	r0, [pc, #348]	; (8004418 <UART_SetConfig+0x190>)
 80042bc:	f7fc f987 	bl	80005ce <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00e      	beq.n	80042e6 <UART_SetConfig+0x5e>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d0:	d009      	beq.n	80042e6 <UART_SetConfig+0x5e>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80042da:	d004      	beq.n	80042e6 <UART_SetConfig+0x5e>
 80042dc:	f640 6155 	movw	r1, #3669	; 0xe55
 80042e0:	484d      	ldr	r0, [pc, #308]	; (8004418 <UART_SetConfig+0x190>)
 80042e2:	f7fc f974 	bl	80005ce <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	695a      	ldr	r2, [r3, #20]
 80042ea:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80042ee:	4013      	ands	r3, r2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d103      	bne.n	80042fc <UART_SetConfig+0x74>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d104      	bne.n	8004306 <UART_SetConfig+0x7e>
 80042fc:	f640 6156 	movw	r1, #3670	; 0xe56
 8004300:	4845      	ldr	r0, [pc, #276]	; (8004418 <UART_SetConfig+0x190>)
 8004302:	f7fc f964 	bl	80005ce <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	431a      	orrs	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	4313      	orrs	r3, r2
 800432c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004338:	f023 030c 	bic.w	r3, r3, #12
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6812      	ldr	r2, [r2, #0]
 8004340:	68b9      	ldr	r1, [r7, #8]
 8004342:	430b      	orrs	r3, r1
 8004344:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	699a      	ldr	r2, [r3, #24]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a2e      	ldr	r2, [pc, #184]	; (800441c <UART_SetConfig+0x194>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d103      	bne.n	800436e <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004366:	f7fd fe91 	bl	800208c <HAL_RCC_GetPCLK2Freq>
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	e002      	b.n	8004374 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800436e:	f7fd fe79 	bl	8002064 <HAL_RCC_GetPCLK1Freq>
 8004372:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4613      	mov	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	009a      	lsls	r2, r3, #2
 800437e:	441a      	add	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	fbb2 f3f3 	udiv	r3, r2, r3
 800438a:	4a25      	ldr	r2, [pc, #148]	; (8004420 <UART_SetConfig+0x198>)
 800438c:	fba2 2303 	umull	r2, r3, r2, r3
 8004390:	095b      	lsrs	r3, r3, #5
 8004392:	0119      	lsls	r1, r3, #4
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	4613      	mov	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	009a      	lsls	r2, r3, #2
 800439e:	441a      	add	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80043aa:	4b1d      	ldr	r3, [pc, #116]	; (8004420 <UART_SetConfig+0x198>)
 80043ac:	fba3 0302 	umull	r0, r3, r3, r2
 80043b0:	095b      	lsrs	r3, r3, #5
 80043b2:	2064      	movs	r0, #100	; 0x64
 80043b4:	fb00 f303 	mul.w	r3, r0, r3
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	3332      	adds	r3, #50	; 0x32
 80043be:	4a18      	ldr	r2, [pc, #96]	; (8004420 <UART_SetConfig+0x198>)
 80043c0:	fba2 2303 	umull	r2, r3, r2, r3
 80043c4:	095b      	lsrs	r3, r3, #5
 80043c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043ca:	4419      	add	r1, r3
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	4613      	mov	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	009a      	lsls	r2, r3, #2
 80043d6:	441a      	add	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	fbb2 f2f3 	udiv	r2, r2, r3
 80043e2:	4b0f      	ldr	r3, [pc, #60]	; (8004420 <UART_SetConfig+0x198>)
 80043e4:	fba3 0302 	umull	r0, r3, r3, r2
 80043e8:	095b      	lsrs	r3, r3, #5
 80043ea:	2064      	movs	r0, #100	; 0x64
 80043ec:	fb00 f303 	mul.w	r3, r0, r3
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	3332      	adds	r3, #50	; 0x32
 80043f6:	4a0a      	ldr	r2, [pc, #40]	; (8004420 <UART_SetConfig+0x198>)
 80043f8:	fba2 2303 	umull	r2, r3, r2, r3
 80043fc:	095b      	lsrs	r3, r3, #5
 80043fe:	f003 020f 	and.w	r2, r3, #15
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	440a      	add	r2, r1
 8004408:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800440a:	bf00      	nop
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	0044aa20 	.word	0x0044aa20
 8004418:	08004e78 	.word	0x08004e78
 800441c:	40013800 	.word	0x40013800
 8004420:	51eb851f 	.word	0x51eb851f

08004424 <__errno>:
 8004424:	4b01      	ldr	r3, [pc, #4]	; (800442c <__errno+0x8>)
 8004426:	6818      	ldr	r0, [r3, #0]
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	2000000c 	.word	0x2000000c

08004430 <__libc_init_array>:
 8004430:	b570      	push	{r4, r5, r6, lr}
 8004432:	2600      	movs	r6, #0
 8004434:	4d0c      	ldr	r5, [pc, #48]	; (8004468 <__libc_init_array+0x38>)
 8004436:	4c0d      	ldr	r4, [pc, #52]	; (800446c <__libc_init_array+0x3c>)
 8004438:	1b64      	subs	r4, r4, r5
 800443a:	10a4      	asrs	r4, r4, #2
 800443c:	42a6      	cmp	r6, r4
 800443e:	d109      	bne.n	8004454 <__libc_init_array+0x24>
 8004440:	f000 fc70 	bl	8004d24 <_init>
 8004444:	2600      	movs	r6, #0
 8004446:	4d0a      	ldr	r5, [pc, #40]	; (8004470 <__libc_init_array+0x40>)
 8004448:	4c0a      	ldr	r4, [pc, #40]	; (8004474 <__libc_init_array+0x44>)
 800444a:	1b64      	subs	r4, r4, r5
 800444c:	10a4      	asrs	r4, r4, #2
 800444e:	42a6      	cmp	r6, r4
 8004450:	d105      	bne.n	800445e <__libc_init_array+0x2e>
 8004452:	bd70      	pop	{r4, r5, r6, pc}
 8004454:	f855 3b04 	ldr.w	r3, [r5], #4
 8004458:	4798      	blx	r3
 800445a:	3601      	adds	r6, #1
 800445c:	e7ee      	b.n	800443c <__libc_init_array+0xc>
 800445e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004462:	4798      	blx	r3
 8004464:	3601      	adds	r6, #1
 8004466:	e7f2      	b.n	800444e <__libc_init_array+0x1e>
 8004468:	08004f00 	.word	0x08004f00
 800446c:	08004f00 	.word	0x08004f00
 8004470:	08004f00 	.word	0x08004f00
 8004474:	08004f04 	.word	0x08004f04

08004478 <memset>:
 8004478:	4603      	mov	r3, r0
 800447a:	4402      	add	r2, r0
 800447c:	4293      	cmp	r3, r2
 800447e:	d100      	bne.n	8004482 <memset+0xa>
 8004480:	4770      	bx	lr
 8004482:	f803 1b01 	strb.w	r1, [r3], #1
 8004486:	e7f9      	b.n	800447c <memset+0x4>

08004488 <sniprintf>:
 8004488:	b40c      	push	{r2, r3}
 800448a:	b530      	push	{r4, r5, lr}
 800448c:	4b17      	ldr	r3, [pc, #92]	; (80044ec <sniprintf+0x64>)
 800448e:	1e0c      	subs	r4, r1, #0
 8004490:	681d      	ldr	r5, [r3, #0]
 8004492:	b09d      	sub	sp, #116	; 0x74
 8004494:	da08      	bge.n	80044a8 <sniprintf+0x20>
 8004496:	238b      	movs	r3, #139	; 0x8b
 8004498:	f04f 30ff 	mov.w	r0, #4294967295
 800449c:	602b      	str	r3, [r5, #0]
 800449e:	b01d      	add	sp, #116	; 0x74
 80044a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044a4:	b002      	add	sp, #8
 80044a6:	4770      	bx	lr
 80044a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80044ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80044b0:	bf0c      	ite	eq
 80044b2:	4623      	moveq	r3, r4
 80044b4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80044b8:	9304      	str	r3, [sp, #16]
 80044ba:	9307      	str	r3, [sp, #28]
 80044bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044c0:	9002      	str	r0, [sp, #8]
 80044c2:	9006      	str	r0, [sp, #24]
 80044c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80044c8:	4628      	mov	r0, r5
 80044ca:	ab21      	add	r3, sp, #132	; 0x84
 80044cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80044ce:	a902      	add	r1, sp, #8
 80044d0:	9301      	str	r3, [sp, #4]
 80044d2:	f000 f869 	bl	80045a8 <_svfiprintf_r>
 80044d6:	1c43      	adds	r3, r0, #1
 80044d8:	bfbc      	itt	lt
 80044da:	238b      	movlt	r3, #139	; 0x8b
 80044dc:	602b      	strlt	r3, [r5, #0]
 80044de:	2c00      	cmp	r4, #0
 80044e0:	d0dd      	beq.n	800449e <sniprintf+0x16>
 80044e2:	2200      	movs	r2, #0
 80044e4:	9b02      	ldr	r3, [sp, #8]
 80044e6:	701a      	strb	r2, [r3, #0]
 80044e8:	e7d9      	b.n	800449e <sniprintf+0x16>
 80044ea:	bf00      	nop
 80044ec:	2000000c 	.word	0x2000000c

080044f0 <__ssputs_r>:
 80044f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044f4:	688e      	ldr	r6, [r1, #8]
 80044f6:	4682      	mov	sl, r0
 80044f8:	429e      	cmp	r6, r3
 80044fa:	460c      	mov	r4, r1
 80044fc:	4690      	mov	r8, r2
 80044fe:	461f      	mov	r7, r3
 8004500:	d838      	bhi.n	8004574 <__ssputs_r+0x84>
 8004502:	898a      	ldrh	r2, [r1, #12]
 8004504:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004508:	d032      	beq.n	8004570 <__ssputs_r+0x80>
 800450a:	6825      	ldr	r5, [r4, #0]
 800450c:	6909      	ldr	r1, [r1, #16]
 800450e:	3301      	adds	r3, #1
 8004510:	eba5 0901 	sub.w	r9, r5, r1
 8004514:	6965      	ldr	r5, [r4, #20]
 8004516:	444b      	add	r3, r9
 8004518:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800451c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004520:	106d      	asrs	r5, r5, #1
 8004522:	429d      	cmp	r5, r3
 8004524:	bf38      	it	cc
 8004526:	461d      	movcc	r5, r3
 8004528:	0553      	lsls	r3, r2, #21
 800452a:	d531      	bpl.n	8004590 <__ssputs_r+0xa0>
 800452c:	4629      	mov	r1, r5
 800452e:	f000 fb53 	bl	8004bd8 <_malloc_r>
 8004532:	4606      	mov	r6, r0
 8004534:	b950      	cbnz	r0, 800454c <__ssputs_r+0x5c>
 8004536:	230c      	movs	r3, #12
 8004538:	f04f 30ff 	mov.w	r0, #4294967295
 800453c:	f8ca 3000 	str.w	r3, [sl]
 8004540:	89a3      	ldrh	r3, [r4, #12]
 8004542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004546:	81a3      	strh	r3, [r4, #12]
 8004548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800454c:	464a      	mov	r2, r9
 800454e:	6921      	ldr	r1, [r4, #16]
 8004550:	f000 face 	bl	8004af0 <memcpy>
 8004554:	89a3      	ldrh	r3, [r4, #12]
 8004556:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800455a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800455e:	81a3      	strh	r3, [r4, #12]
 8004560:	6126      	str	r6, [r4, #16]
 8004562:	444e      	add	r6, r9
 8004564:	6026      	str	r6, [r4, #0]
 8004566:	463e      	mov	r6, r7
 8004568:	6165      	str	r5, [r4, #20]
 800456a:	eba5 0509 	sub.w	r5, r5, r9
 800456e:	60a5      	str	r5, [r4, #8]
 8004570:	42be      	cmp	r6, r7
 8004572:	d900      	bls.n	8004576 <__ssputs_r+0x86>
 8004574:	463e      	mov	r6, r7
 8004576:	4632      	mov	r2, r6
 8004578:	4641      	mov	r1, r8
 800457a:	6820      	ldr	r0, [r4, #0]
 800457c:	f000 fac6 	bl	8004b0c <memmove>
 8004580:	68a3      	ldr	r3, [r4, #8]
 8004582:	6822      	ldr	r2, [r4, #0]
 8004584:	1b9b      	subs	r3, r3, r6
 8004586:	4432      	add	r2, r6
 8004588:	2000      	movs	r0, #0
 800458a:	60a3      	str	r3, [r4, #8]
 800458c:	6022      	str	r2, [r4, #0]
 800458e:	e7db      	b.n	8004548 <__ssputs_r+0x58>
 8004590:	462a      	mov	r2, r5
 8004592:	f000 fb7b 	bl	8004c8c <_realloc_r>
 8004596:	4606      	mov	r6, r0
 8004598:	2800      	cmp	r0, #0
 800459a:	d1e1      	bne.n	8004560 <__ssputs_r+0x70>
 800459c:	4650      	mov	r0, sl
 800459e:	6921      	ldr	r1, [r4, #16]
 80045a0:	f000 face 	bl	8004b40 <_free_r>
 80045a4:	e7c7      	b.n	8004536 <__ssputs_r+0x46>
	...

080045a8 <_svfiprintf_r>:
 80045a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ac:	4698      	mov	r8, r3
 80045ae:	898b      	ldrh	r3, [r1, #12]
 80045b0:	4607      	mov	r7, r0
 80045b2:	061b      	lsls	r3, r3, #24
 80045b4:	460d      	mov	r5, r1
 80045b6:	4614      	mov	r4, r2
 80045b8:	b09d      	sub	sp, #116	; 0x74
 80045ba:	d50e      	bpl.n	80045da <_svfiprintf_r+0x32>
 80045bc:	690b      	ldr	r3, [r1, #16]
 80045be:	b963      	cbnz	r3, 80045da <_svfiprintf_r+0x32>
 80045c0:	2140      	movs	r1, #64	; 0x40
 80045c2:	f000 fb09 	bl	8004bd8 <_malloc_r>
 80045c6:	6028      	str	r0, [r5, #0]
 80045c8:	6128      	str	r0, [r5, #16]
 80045ca:	b920      	cbnz	r0, 80045d6 <_svfiprintf_r+0x2e>
 80045cc:	230c      	movs	r3, #12
 80045ce:	603b      	str	r3, [r7, #0]
 80045d0:	f04f 30ff 	mov.w	r0, #4294967295
 80045d4:	e0d1      	b.n	800477a <_svfiprintf_r+0x1d2>
 80045d6:	2340      	movs	r3, #64	; 0x40
 80045d8:	616b      	str	r3, [r5, #20]
 80045da:	2300      	movs	r3, #0
 80045dc:	9309      	str	r3, [sp, #36]	; 0x24
 80045de:	2320      	movs	r3, #32
 80045e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045e4:	2330      	movs	r3, #48	; 0x30
 80045e6:	f04f 0901 	mov.w	r9, #1
 80045ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80045ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004794 <_svfiprintf_r+0x1ec>
 80045f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045f6:	4623      	mov	r3, r4
 80045f8:	469a      	mov	sl, r3
 80045fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045fe:	b10a      	cbz	r2, 8004604 <_svfiprintf_r+0x5c>
 8004600:	2a25      	cmp	r2, #37	; 0x25
 8004602:	d1f9      	bne.n	80045f8 <_svfiprintf_r+0x50>
 8004604:	ebba 0b04 	subs.w	fp, sl, r4
 8004608:	d00b      	beq.n	8004622 <_svfiprintf_r+0x7a>
 800460a:	465b      	mov	r3, fp
 800460c:	4622      	mov	r2, r4
 800460e:	4629      	mov	r1, r5
 8004610:	4638      	mov	r0, r7
 8004612:	f7ff ff6d 	bl	80044f0 <__ssputs_r>
 8004616:	3001      	adds	r0, #1
 8004618:	f000 80aa 	beq.w	8004770 <_svfiprintf_r+0x1c8>
 800461c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800461e:	445a      	add	r2, fp
 8004620:	9209      	str	r2, [sp, #36]	; 0x24
 8004622:	f89a 3000 	ldrb.w	r3, [sl]
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 80a2 	beq.w	8004770 <_svfiprintf_r+0x1c8>
 800462c:	2300      	movs	r3, #0
 800462e:	f04f 32ff 	mov.w	r2, #4294967295
 8004632:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004636:	f10a 0a01 	add.w	sl, sl, #1
 800463a:	9304      	str	r3, [sp, #16]
 800463c:	9307      	str	r3, [sp, #28]
 800463e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004642:	931a      	str	r3, [sp, #104]	; 0x68
 8004644:	4654      	mov	r4, sl
 8004646:	2205      	movs	r2, #5
 8004648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800464c:	4851      	ldr	r0, [pc, #324]	; (8004794 <_svfiprintf_r+0x1ec>)
 800464e:	f000 fa41 	bl	8004ad4 <memchr>
 8004652:	9a04      	ldr	r2, [sp, #16]
 8004654:	b9d8      	cbnz	r0, 800468e <_svfiprintf_r+0xe6>
 8004656:	06d0      	lsls	r0, r2, #27
 8004658:	bf44      	itt	mi
 800465a:	2320      	movmi	r3, #32
 800465c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004660:	0711      	lsls	r1, r2, #28
 8004662:	bf44      	itt	mi
 8004664:	232b      	movmi	r3, #43	; 0x2b
 8004666:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800466a:	f89a 3000 	ldrb.w	r3, [sl]
 800466e:	2b2a      	cmp	r3, #42	; 0x2a
 8004670:	d015      	beq.n	800469e <_svfiprintf_r+0xf6>
 8004672:	4654      	mov	r4, sl
 8004674:	2000      	movs	r0, #0
 8004676:	f04f 0c0a 	mov.w	ip, #10
 800467a:	9a07      	ldr	r2, [sp, #28]
 800467c:	4621      	mov	r1, r4
 800467e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004682:	3b30      	subs	r3, #48	; 0x30
 8004684:	2b09      	cmp	r3, #9
 8004686:	d94e      	bls.n	8004726 <_svfiprintf_r+0x17e>
 8004688:	b1b0      	cbz	r0, 80046b8 <_svfiprintf_r+0x110>
 800468a:	9207      	str	r2, [sp, #28]
 800468c:	e014      	b.n	80046b8 <_svfiprintf_r+0x110>
 800468e:	eba0 0308 	sub.w	r3, r0, r8
 8004692:	fa09 f303 	lsl.w	r3, r9, r3
 8004696:	4313      	orrs	r3, r2
 8004698:	46a2      	mov	sl, r4
 800469a:	9304      	str	r3, [sp, #16]
 800469c:	e7d2      	b.n	8004644 <_svfiprintf_r+0x9c>
 800469e:	9b03      	ldr	r3, [sp, #12]
 80046a0:	1d19      	adds	r1, r3, #4
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	9103      	str	r1, [sp, #12]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	bfbb      	ittet	lt
 80046aa:	425b      	neglt	r3, r3
 80046ac:	f042 0202 	orrlt.w	r2, r2, #2
 80046b0:	9307      	strge	r3, [sp, #28]
 80046b2:	9307      	strlt	r3, [sp, #28]
 80046b4:	bfb8      	it	lt
 80046b6:	9204      	strlt	r2, [sp, #16]
 80046b8:	7823      	ldrb	r3, [r4, #0]
 80046ba:	2b2e      	cmp	r3, #46	; 0x2e
 80046bc:	d10c      	bne.n	80046d8 <_svfiprintf_r+0x130>
 80046be:	7863      	ldrb	r3, [r4, #1]
 80046c0:	2b2a      	cmp	r3, #42	; 0x2a
 80046c2:	d135      	bne.n	8004730 <_svfiprintf_r+0x188>
 80046c4:	9b03      	ldr	r3, [sp, #12]
 80046c6:	3402      	adds	r4, #2
 80046c8:	1d1a      	adds	r2, r3, #4
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	9203      	str	r2, [sp, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	bfb8      	it	lt
 80046d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80046d6:	9305      	str	r3, [sp, #20]
 80046d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80047a4 <_svfiprintf_r+0x1fc>
 80046dc:	2203      	movs	r2, #3
 80046de:	4650      	mov	r0, sl
 80046e0:	7821      	ldrb	r1, [r4, #0]
 80046e2:	f000 f9f7 	bl	8004ad4 <memchr>
 80046e6:	b140      	cbz	r0, 80046fa <_svfiprintf_r+0x152>
 80046e8:	2340      	movs	r3, #64	; 0x40
 80046ea:	eba0 000a 	sub.w	r0, r0, sl
 80046ee:	fa03 f000 	lsl.w	r0, r3, r0
 80046f2:	9b04      	ldr	r3, [sp, #16]
 80046f4:	3401      	adds	r4, #1
 80046f6:	4303      	orrs	r3, r0
 80046f8:	9304      	str	r3, [sp, #16]
 80046fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046fe:	2206      	movs	r2, #6
 8004700:	4825      	ldr	r0, [pc, #148]	; (8004798 <_svfiprintf_r+0x1f0>)
 8004702:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004706:	f000 f9e5 	bl	8004ad4 <memchr>
 800470a:	2800      	cmp	r0, #0
 800470c:	d038      	beq.n	8004780 <_svfiprintf_r+0x1d8>
 800470e:	4b23      	ldr	r3, [pc, #140]	; (800479c <_svfiprintf_r+0x1f4>)
 8004710:	bb1b      	cbnz	r3, 800475a <_svfiprintf_r+0x1b2>
 8004712:	9b03      	ldr	r3, [sp, #12]
 8004714:	3307      	adds	r3, #7
 8004716:	f023 0307 	bic.w	r3, r3, #7
 800471a:	3308      	adds	r3, #8
 800471c:	9303      	str	r3, [sp, #12]
 800471e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004720:	4433      	add	r3, r6
 8004722:	9309      	str	r3, [sp, #36]	; 0x24
 8004724:	e767      	b.n	80045f6 <_svfiprintf_r+0x4e>
 8004726:	460c      	mov	r4, r1
 8004728:	2001      	movs	r0, #1
 800472a:	fb0c 3202 	mla	r2, ip, r2, r3
 800472e:	e7a5      	b.n	800467c <_svfiprintf_r+0xd4>
 8004730:	2300      	movs	r3, #0
 8004732:	f04f 0c0a 	mov.w	ip, #10
 8004736:	4619      	mov	r1, r3
 8004738:	3401      	adds	r4, #1
 800473a:	9305      	str	r3, [sp, #20]
 800473c:	4620      	mov	r0, r4
 800473e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004742:	3a30      	subs	r2, #48	; 0x30
 8004744:	2a09      	cmp	r2, #9
 8004746:	d903      	bls.n	8004750 <_svfiprintf_r+0x1a8>
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0c5      	beq.n	80046d8 <_svfiprintf_r+0x130>
 800474c:	9105      	str	r1, [sp, #20]
 800474e:	e7c3      	b.n	80046d8 <_svfiprintf_r+0x130>
 8004750:	4604      	mov	r4, r0
 8004752:	2301      	movs	r3, #1
 8004754:	fb0c 2101 	mla	r1, ip, r1, r2
 8004758:	e7f0      	b.n	800473c <_svfiprintf_r+0x194>
 800475a:	ab03      	add	r3, sp, #12
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	462a      	mov	r2, r5
 8004760:	4638      	mov	r0, r7
 8004762:	4b0f      	ldr	r3, [pc, #60]	; (80047a0 <_svfiprintf_r+0x1f8>)
 8004764:	a904      	add	r1, sp, #16
 8004766:	f3af 8000 	nop.w
 800476a:	1c42      	adds	r2, r0, #1
 800476c:	4606      	mov	r6, r0
 800476e:	d1d6      	bne.n	800471e <_svfiprintf_r+0x176>
 8004770:	89ab      	ldrh	r3, [r5, #12]
 8004772:	065b      	lsls	r3, r3, #25
 8004774:	f53f af2c 	bmi.w	80045d0 <_svfiprintf_r+0x28>
 8004778:	9809      	ldr	r0, [sp, #36]	; 0x24
 800477a:	b01d      	add	sp, #116	; 0x74
 800477c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004780:	ab03      	add	r3, sp, #12
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	462a      	mov	r2, r5
 8004786:	4638      	mov	r0, r7
 8004788:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <_svfiprintf_r+0x1f8>)
 800478a:	a904      	add	r1, sp, #16
 800478c:	f000 f87c 	bl	8004888 <_printf_i>
 8004790:	e7eb      	b.n	800476a <_svfiprintf_r+0x1c2>
 8004792:	bf00      	nop
 8004794:	08004ecc 	.word	0x08004ecc
 8004798:	08004ed6 	.word	0x08004ed6
 800479c:	00000000 	.word	0x00000000
 80047a0:	080044f1 	.word	0x080044f1
 80047a4:	08004ed2 	.word	0x08004ed2

080047a8 <_printf_common>:
 80047a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047ac:	4616      	mov	r6, r2
 80047ae:	4699      	mov	r9, r3
 80047b0:	688a      	ldr	r2, [r1, #8]
 80047b2:	690b      	ldr	r3, [r1, #16]
 80047b4:	4607      	mov	r7, r0
 80047b6:	4293      	cmp	r3, r2
 80047b8:	bfb8      	it	lt
 80047ba:	4613      	movlt	r3, r2
 80047bc:	6033      	str	r3, [r6, #0]
 80047be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047c2:	460c      	mov	r4, r1
 80047c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047c8:	b10a      	cbz	r2, 80047ce <_printf_common+0x26>
 80047ca:	3301      	adds	r3, #1
 80047cc:	6033      	str	r3, [r6, #0]
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	0699      	lsls	r1, r3, #26
 80047d2:	bf42      	ittt	mi
 80047d4:	6833      	ldrmi	r3, [r6, #0]
 80047d6:	3302      	addmi	r3, #2
 80047d8:	6033      	strmi	r3, [r6, #0]
 80047da:	6825      	ldr	r5, [r4, #0]
 80047dc:	f015 0506 	ands.w	r5, r5, #6
 80047e0:	d106      	bne.n	80047f0 <_printf_common+0x48>
 80047e2:	f104 0a19 	add.w	sl, r4, #25
 80047e6:	68e3      	ldr	r3, [r4, #12]
 80047e8:	6832      	ldr	r2, [r6, #0]
 80047ea:	1a9b      	subs	r3, r3, r2
 80047ec:	42ab      	cmp	r3, r5
 80047ee:	dc28      	bgt.n	8004842 <_printf_common+0x9a>
 80047f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047f4:	1e13      	subs	r3, r2, #0
 80047f6:	6822      	ldr	r2, [r4, #0]
 80047f8:	bf18      	it	ne
 80047fa:	2301      	movne	r3, #1
 80047fc:	0692      	lsls	r2, r2, #26
 80047fe:	d42d      	bmi.n	800485c <_printf_common+0xb4>
 8004800:	4649      	mov	r1, r9
 8004802:	4638      	mov	r0, r7
 8004804:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004808:	47c0      	blx	r8
 800480a:	3001      	adds	r0, #1
 800480c:	d020      	beq.n	8004850 <_printf_common+0xa8>
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	68e5      	ldr	r5, [r4, #12]
 8004812:	f003 0306 	and.w	r3, r3, #6
 8004816:	2b04      	cmp	r3, #4
 8004818:	bf18      	it	ne
 800481a:	2500      	movne	r5, #0
 800481c:	6832      	ldr	r2, [r6, #0]
 800481e:	f04f 0600 	mov.w	r6, #0
 8004822:	68a3      	ldr	r3, [r4, #8]
 8004824:	bf08      	it	eq
 8004826:	1aad      	subeq	r5, r5, r2
 8004828:	6922      	ldr	r2, [r4, #16]
 800482a:	bf08      	it	eq
 800482c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004830:	4293      	cmp	r3, r2
 8004832:	bfc4      	itt	gt
 8004834:	1a9b      	subgt	r3, r3, r2
 8004836:	18ed      	addgt	r5, r5, r3
 8004838:	341a      	adds	r4, #26
 800483a:	42b5      	cmp	r5, r6
 800483c:	d11a      	bne.n	8004874 <_printf_common+0xcc>
 800483e:	2000      	movs	r0, #0
 8004840:	e008      	b.n	8004854 <_printf_common+0xac>
 8004842:	2301      	movs	r3, #1
 8004844:	4652      	mov	r2, sl
 8004846:	4649      	mov	r1, r9
 8004848:	4638      	mov	r0, r7
 800484a:	47c0      	blx	r8
 800484c:	3001      	adds	r0, #1
 800484e:	d103      	bne.n	8004858 <_printf_common+0xb0>
 8004850:	f04f 30ff 	mov.w	r0, #4294967295
 8004854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004858:	3501      	adds	r5, #1
 800485a:	e7c4      	b.n	80047e6 <_printf_common+0x3e>
 800485c:	2030      	movs	r0, #48	; 0x30
 800485e:	18e1      	adds	r1, r4, r3
 8004860:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800486a:	4422      	add	r2, r4
 800486c:	3302      	adds	r3, #2
 800486e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004872:	e7c5      	b.n	8004800 <_printf_common+0x58>
 8004874:	2301      	movs	r3, #1
 8004876:	4622      	mov	r2, r4
 8004878:	4649      	mov	r1, r9
 800487a:	4638      	mov	r0, r7
 800487c:	47c0      	blx	r8
 800487e:	3001      	adds	r0, #1
 8004880:	d0e6      	beq.n	8004850 <_printf_common+0xa8>
 8004882:	3601      	adds	r6, #1
 8004884:	e7d9      	b.n	800483a <_printf_common+0x92>
	...

08004888 <_printf_i>:
 8004888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800488c:	460c      	mov	r4, r1
 800488e:	7e27      	ldrb	r7, [r4, #24]
 8004890:	4691      	mov	r9, r2
 8004892:	2f78      	cmp	r7, #120	; 0x78
 8004894:	4680      	mov	r8, r0
 8004896:	469a      	mov	sl, r3
 8004898:	990c      	ldr	r1, [sp, #48]	; 0x30
 800489a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800489e:	d807      	bhi.n	80048b0 <_printf_i+0x28>
 80048a0:	2f62      	cmp	r7, #98	; 0x62
 80048a2:	d80a      	bhi.n	80048ba <_printf_i+0x32>
 80048a4:	2f00      	cmp	r7, #0
 80048a6:	f000 80d9 	beq.w	8004a5c <_printf_i+0x1d4>
 80048aa:	2f58      	cmp	r7, #88	; 0x58
 80048ac:	f000 80a4 	beq.w	80049f8 <_printf_i+0x170>
 80048b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048b8:	e03a      	b.n	8004930 <_printf_i+0xa8>
 80048ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048be:	2b15      	cmp	r3, #21
 80048c0:	d8f6      	bhi.n	80048b0 <_printf_i+0x28>
 80048c2:	a001      	add	r0, pc, #4	; (adr r0, 80048c8 <_printf_i+0x40>)
 80048c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80048c8:	08004921 	.word	0x08004921
 80048cc:	08004935 	.word	0x08004935
 80048d0:	080048b1 	.word	0x080048b1
 80048d4:	080048b1 	.word	0x080048b1
 80048d8:	080048b1 	.word	0x080048b1
 80048dc:	080048b1 	.word	0x080048b1
 80048e0:	08004935 	.word	0x08004935
 80048e4:	080048b1 	.word	0x080048b1
 80048e8:	080048b1 	.word	0x080048b1
 80048ec:	080048b1 	.word	0x080048b1
 80048f0:	080048b1 	.word	0x080048b1
 80048f4:	08004a43 	.word	0x08004a43
 80048f8:	08004965 	.word	0x08004965
 80048fc:	08004a25 	.word	0x08004a25
 8004900:	080048b1 	.word	0x080048b1
 8004904:	080048b1 	.word	0x080048b1
 8004908:	08004a65 	.word	0x08004a65
 800490c:	080048b1 	.word	0x080048b1
 8004910:	08004965 	.word	0x08004965
 8004914:	080048b1 	.word	0x080048b1
 8004918:	080048b1 	.word	0x080048b1
 800491c:	08004a2d 	.word	0x08004a2d
 8004920:	680b      	ldr	r3, [r1, #0]
 8004922:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004926:	1d1a      	adds	r2, r3, #4
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	600a      	str	r2, [r1, #0]
 800492c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004930:	2301      	movs	r3, #1
 8004932:	e0a4      	b.n	8004a7e <_printf_i+0x1f6>
 8004934:	6825      	ldr	r5, [r4, #0]
 8004936:	6808      	ldr	r0, [r1, #0]
 8004938:	062e      	lsls	r6, r5, #24
 800493a:	f100 0304 	add.w	r3, r0, #4
 800493e:	d50a      	bpl.n	8004956 <_printf_i+0xce>
 8004940:	6805      	ldr	r5, [r0, #0]
 8004942:	600b      	str	r3, [r1, #0]
 8004944:	2d00      	cmp	r5, #0
 8004946:	da03      	bge.n	8004950 <_printf_i+0xc8>
 8004948:	232d      	movs	r3, #45	; 0x2d
 800494a:	426d      	negs	r5, r5
 800494c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004950:	230a      	movs	r3, #10
 8004952:	485e      	ldr	r0, [pc, #376]	; (8004acc <_printf_i+0x244>)
 8004954:	e019      	b.n	800498a <_printf_i+0x102>
 8004956:	f015 0f40 	tst.w	r5, #64	; 0x40
 800495a:	6805      	ldr	r5, [r0, #0]
 800495c:	600b      	str	r3, [r1, #0]
 800495e:	bf18      	it	ne
 8004960:	b22d      	sxthne	r5, r5
 8004962:	e7ef      	b.n	8004944 <_printf_i+0xbc>
 8004964:	680b      	ldr	r3, [r1, #0]
 8004966:	6825      	ldr	r5, [r4, #0]
 8004968:	1d18      	adds	r0, r3, #4
 800496a:	6008      	str	r0, [r1, #0]
 800496c:	0628      	lsls	r0, r5, #24
 800496e:	d501      	bpl.n	8004974 <_printf_i+0xec>
 8004970:	681d      	ldr	r5, [r3, #0]
 8004972:	e002      	b.n	800497a <_printf_i+0xf2>
 8004974:	0669      	lsls	r1, r5, #25
 8004976:	d5fb      	bpl.n	8004970 <_printf_i+0xe8>
 8004978:	881d      	ldrh	r5, [r3, #0]
 800497a:	2f6f      	cmp	r7, #111	; 0x6f
 800497c:	bf0c      	ite	eq
 800497e:	2308      	moveq	r3, #8
 8004980:	230a      	movne	r3, #10
 8004982:	4852      	ldr	r0, [pc, #328]	; (8004acc <_printf_i+0x244>)
 8004984:	2100      	movs	r1, #0
 8004986:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800498a:	6866      	ldr	r6, [r4, #4]
 800498c:	2e00      	cmp	r6, #0
 800498e:	bfa8      	it	ge
 8004990:	6821      	ldrge	r1, [r4, #0]
 8004992:	60a6      	str	r6, [r4, #8]
 8004994:	bfa4      	itt	ge
 8004996:	f021 0104 	bicge.w	r1, r1, #4
 800499a:	6021      	strge	r1, [r4, #0]
 800499c:	b90d      	cbnz	r5, 80049a2 <_printf_i+0x11a>
 800499e:	2e00      	cmp	r6, #0
 80049a0:	d04d      	beq.n	8004a3e <_printf_i+0x1b6>
 80049a2:	4616      	mov	r6, r2
 80049a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80049a8:	fb03 5711 	mls	r7, r3, r1, r5
 80049ac:	5dc7      	ldrb	r7, [r0, r7]
 80049ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049b2:	462f      	mov	r7, r5
 80049b4:	42bb      	cmp	r3, r7
 80049b6:	460d      	mov	r5, r1
 80049b8:	d9f4      	bls.n	80049a4 <_printf_i+0x11c>
 80049ba:	2b08      	cmp	r3, #8
 80049bc:	d10b      	bne.n	80049d6 <_printf_i+0x14e>
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	07df      	lsls	r7, r3, #31
 80049c2:	d508      	bpl.n	80049d6 <_printf_i+0x14e>
 80049c4:	6923      	ldr	r3, [r4, #16]
 80049c6:	6861      	ldr	r1, [r4, #4]
 80049c8:	4299      	cmp	r1, r3
 80049ca:	bfde      	ittt	le
 80049cc:	2330      	movle	r3, #48	; 0x30
 80049ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049d6:	1b92      	subs	r2, r2, r6
 80049d8:	6122      	str	r2, [r4, #16]
 80049da:	464b      	mov	r3, r9
 80049dc:	4621      	mov	r1, r4
 80049de:	4640      	mov	r0, r8
 80049e0:	f8cd a000 	str.w	sl, [sp]
 80049e4:	aa03      	add	r2, sp, #12
 80049e6:	f7ff fedf 	bl	80047a8 <_printf_common>
 80049ea:	3001      	adds	r0, #1
 80049ec:	d14c      	bne.n	8004a88 <_printf_i+0x200>
 80049ee:	f04f 30ff 	mov.w	r0, #4294967295
 80049f2:	b004      	add	sp, #16
 80049f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049f8:	4834      	ldr	r0, [pc, #208]	; (8004acc <_printf_i+0x244>)
 80049fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049fe:	680e      	ldr	r6, [r1, #0]
 8004a00:	6823      	ldr	r3, [r4, #0]
 8004a02:	f856 5b04 	ldr.w	r5, [r6], #4
 8004a06:	061f      	lsls	r7, r3, #24
 8004a08:	600e      	str	r6, [r1, #0]
 8004a0a:	d514      	bpl.n	8004a36 <_printf_i+0x1ae>
 8004a0c:	07d9      	lsls	r1, r3, #31
 8004a0e:	bf44      	itt	mi
 8004a10:	f043 0320 	orrmi.w	r3, r3, #32
 8004a14:	6023      	strmi	r3, [r4, #0]
 8004a16:	b91d      	cbnz	r5, 8004a20 <_printf_i+0x198>
 8004a18:	6823      	ldr	r3, [r4, #0]
 8004a1a:	f023 0320 	bic.w	r3, r3, #32
 8004a1e:	6023      	str	r3, [r4, #0]
 8004a20:	2310      	movs	r3, #16
 8004a22:	e7af      	b.n	8004984 <_printf_i+0xfc>
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	f043 0320 	orr.w	r3, r3, #32
 8004a2a:	6023      	str	r3, [r4, #0]
 8004a2c:	2378      	movs	r3, #120	; 0x78
 8004a2e:	4828      	ldr	r0, [pc, #160]	; (8004ad0 <_printf_i+0x248>)
 8004a30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a34:	e7e3      	b.n	80049fe <_printf_i+0x176>
 8004a36:	065e      	lsls	r6, r3, #25
 8004a38:	bf48      	it	mi
 8004a3a:	b2ad      	uxthmi	r5, r5
 8004a3c:	e7e6      	b.n	8004a0c <_printf_i+0x184>
 8004a3e:	4616      	mov	r6, r2
 8004a40:	e7bb      	b.n	80049ba <_printf_i+0x132>
 8004a42:	680b      	ldr	r3, [r1, #0]
 8004a44:	6826      	ldr	r6, [r4, #0]
 8004a46:	1d1d      	adds	r5, r3, #4
 8004a48:	6960      	ldr	r0, [r4, #20]
 8004a4a:	600d      	str	r5, [r1, #0]
 8004a4c:	0635      	lsls	r5, r6, #24
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	d501      	bpl.n	8004a56 <_printf_i+0x1ce>
 8004a52:	6018      	str	r0, [r3, #0]
 8004a54:	e002      	b.n	8004a5c <_printf_i+0x1d4>
 8004a56:	0671      	lsls	r1, r6, #25
 8004a58:	d5fb      	bpl.n	8004a52 <_printf_i+0x1ca>
 8004a5a:	8018      	strh	r0, [r3, #0]
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	4616      	mov	r6, r2
 8004a60:	6123      	str	r3, [r4, #16]
 8004a62:	e7ba      	b.n	80049da <_printf_i+0x152>
 8004a64:	680b      	ldr	r3, [r1, #0]
 8004a66:	1d1a      	adds	r2, r3, #4
 8004a68:	600a      	str	r2, [r1, #0]
 8004a6a:	681e      	ldr	r6, [r3, #0]
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	4630      	mov	r0, r6
 8004a70:	6862      	ldr	r2, [r4, #4]
 8004a72:	f000 f82f 	bl	8004ad4 <memchr>
 8004a76:	b108      	cbz	r0, 8004a7c <_printf_i+0x1f4>
 8004a78:	1b80      	subs	r0, r0, r6
 8004a7a:	6060      	str	r0, [r4, #4]
 8004a7c:	6863      	ldr	r3, [r4, #4]
 8004a7e:	6123      	str	r3, [r4, #16]
 8004a80:	2300      	movs	r3, #0
 8004a82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a86:	e7a8      	b.n	80049da <_printf_i+0x152>
 8004a88:	4632      	mov	r2, r6
 8004a8a:	4649      	mov	r1, r9
 8004a8c:	4640      	mov	r0, r8
 8004a8e:	6923      	ldr	r3, [r4, #16]
 8004a90:	47d0      	blx	sl
 8004a92:	3001      	adds	r0, #1
 8004a94:	d0ab      	beq.n	80049ee <_printf_i+0x166>
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	079b      	lsls	r3, r3, #30
 8004a9a:	d413      	bmi.n	8004ac4 <_printf_i+0x23c>
 8004a9c:	68e0      	ldr	r0, [r4, #12]
 8004a9e:	9b03      	ldr	r3, [sp, #12]
 8004aa0:	4298      	cmp	r0, r3
 8004aa2:	bfb8      	it	lt
 8004aa4:	4618      	movlt	r0, r3
 8004aa6:	e7a4      	b.n	80049f2 <_printf_i+0x16a>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	4632      	mov	r2, r6
 8004aac:	4649      	mov	r1, r9
 8004aae:	4640      	mov	r0, r8
 8004ab0:	47d0      	blx	sl
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	d09b      	beq.n	80049ee <_printf_i+0x166>
 8004ab6:	3501      	adds	r5, #1
 8004ab8:	68e3      	ldr	r3, [r4, #12]
 8004aba:	9903      	ldr	r1, [sp, #12]
 8004abc:	1a5b      	subs	r3, r3, r1
 8004abe:	42ab      	cmp	r3, r5
 8004ac0:	dcf2      	bgt.n	8004aa8 <_printf_i+0x220>
 8004ac2:	e7eb      	b.n	8004a9c <_printf_i+0x214>
 8004ac4:	2500      	movs	r5, #0
 8004ac6:	f104 0619 	add.w	r6, r4, #25
 8004aca:	e7f5      	b.n	8004ab8 <_printf_i+0x230>
 8004acc:	08004edd 	.word	0x08004edd
 8004ad0:	08004eee 	.word	0x08004eee

08004ad4 <memchr>:
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	b510      	push	{r4, lr}
 8004ad8:	b2c9      	uxtb	r1, r1
 8004ada:	4402      	add	r2, r0
 8004adc:	4293      	cmp	r3, r2
 8004ade:	4618      	mov	r0, r3
 8004ae0:	d101      	bne.n	8004ae6 <memchr+0x12>
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	e003      	b.n	8004aee <memchr+0x1a>
 8004ae6:	7804      	ldrb	r4, [r0, #0]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	428c      	cmp	r4, r1
 8004aec:	d1f6      	bne.n	8004adc <memchr+0x8>
 8004aee:	bd10      	pop	{r4, pc}

08004af0 <memcpy>:
 8004af0:	440a      	add	r2, r1
 8004af2:	4291      	cmp	r1, r2
 8004af4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004af8:	d100      	bne.n	8004afc <memcpy+0xc>
 8004afa:	4770      	bx	lr
 8004afc:	b510      	push	{r4, lr}
 8004afe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b02:	4291      	cmp	r1, r2
 8004b04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b08:	d1f9      	bne.n	8004afe <memcpy+0xe>
 8004b0a:	bd10      	pop	{r4, pc}

08004b0c <memmove>:
 8004b0c:	4288      	cmp	r0, r1
 8004b0e:	b510      	push	{r4, lr}
 8004b10:	eb01 0402 	add.w	r4, r1, r2
 8004b14:	d902      	bls.n	8004b1c <memmove+0x10>
 8004b16:	4284      	cmp	r4, r0
 8004b18:	4623      	mov	r3, r4
 8004b1a:	d807      	bhi.n	8004b2c <memmove+0x20>
 8004b1c:	1e43      	subs	r3, r0, #1
 8004b1e:	42a1      	cmp	r1, r4
 8004b20:	d008      	beq.n	8004b34 <memmove+0x28>
 8004b22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b2a:	e7f8      	b.n	8004b1e <memmove+0x12>
 8004b2c:	4601      	mov	r1, r0
 8004b2e:	4402      	add	r2, r0
 8004b30:	428a      	cmp	r2, r1
 8004b32:	d100      	bne.n	8004b36 <memmove+0x2a>
 8004b34:	bd10      	pop	{r4, pc}
 8004b36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b3e:	e7f7      	b.n	8004b30 <memmove+0x24>

08004b40 <_free_r>:
 8004b40:	b538      	push	{r3, r4, r5, lr}
 8004b42:	4605      	mov	r5, r0
 8004b44:	2900      	cmp	r1, #0
 8004b46:	d043      	beq.n	8004bd0 <_free_r+0x90>
 8004b48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b4c:	1f0c      	subs	r4, r1, #4
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	bfb8      	it	lt
 8004b52:	18e4      	addlt	r4, r4, r3
 8004b54:	f000 f8d0 	bl	8004cf8 <__malloc_lock>
 8004b58:	4a1e      	ldr	r2, [pc, #120]	; (8004bd4 <_free_r+0x94>)
 8004b5a:	6813      	ldr	r3, [r2, #0]
 8004b5c:	4610      	mov	r0, r2
 8004b5e:	b933      	cbnz	r3, 8004b6e <_free_r+0x2e>
 8004b60:	6063      	str	r3, [r4, #4]
 8004b62:	6014      	str	r4, [r2, #0]
 8004b64:	4628      	mov	r0, r5
 8004b66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b6a:	f000 b8cb 	b.w	8004d04 <__malloc_unlock>
 8004b6e:	42a3      	cmp	r3, r4
 8004b70:	d90a      	bls.n	8004b88 <_free_r+0x48>
 8004b72:	6821      	ldr	r1, [r4, #0]
 8004b74:	1862      	adds	r2, r4, r1
 8004b76:	4293      	cmp	r3, r2
 8004b78:	bf01      	itttt	eq
 8004b7a:	681a      	ldreq	r2, [r3, #0]
 8004b7c:	685b      	ldreq	r3, [r3, #4]
 8004b7e:	1852      	addeq	r2, r2, r1
 8004b80:	6022      	streq	r2, [r4, #0]
 8004b82:	6063      	str	r3, [r4, #4]
 8004b84:	6004      	str	r4, [r0, #0]
 8004b86:	e7ed      	b.n	8004b64 <_free_r+0x24>
 8004b88:	461a      	mov	r2, r3
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	b10b      	cbz	r3, 8004b92 <_free_r+0x52>
 8004b8e:	42a3      	cmp	r3, r4
 8004b90:	d9fa      	bls.n	8004b88 <_free_r+0x48>
 8004b92:	6811      	ldr	r1, [r2, #0]
 8004b94:	1850      	adds	r0, r2, r1
 8004b96:	42a0      	cmp	r0, r4
 8004b98:	d10b      	bne.n	8004bb2 <_free_r+0x72>
 8004b9a:	6820      	ldr	r0, [r4, #0]
 8004b9c:	4401      	add	r1, r0
 8004b9e:	1850      	adds	r0, r2, r1
 8004ba0:	4283      	cmp	r3, r0
 8004ba2:	6011      	str	r1, [r2, #0]
 8004ba4:	d1de      	bne.n	8004b64 <_free_r+0x24>
 8004ba6:	6818      	ldr	r0, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	4401      	add	r1, r0
 8004bac:	6011      	str	r1, [r2, #0]
 8004bae:	6053      	str	r3, [r2, #4]
 8004bb0:	e7d8      	b.n	8004b64 <_free_r+0x24>
 8004bb2:	d902      	bls.n	8004bba <_free_r+0x7a>
 8004bb4:	230c      	movs	r3, #12
 8004bb6:	602b      	str	r3, [r5, #0]
 8004bb8:	e7d4      	b.n	8004b64 <_free_r+0x24>
 8004bba:	6820      	ldr	r0, [r4, #0]
 8004bbc:	1821      	adds	r1, r4, r0
 8004bbe:	428b      	cmp	r3, r1
 8004bc0:	bf01      	itttt	eq
 8004bc2:	6819      	ldreq	r1, [r3, #0]
 8004bc4:	685b      	ldreq	r3, [r3, #4]
 8004bc6:	1809      	addeq	r1, r1, r0
 8004bc8:	6021      	streq	r1, [r4, #0]
 8004bca:	6063      	str	r3, [r4, #4]
 8004bcc:	6054      	str	r4, [r2, #4]
 8004bce:	e7c9      	b.n	8004b64 <_free_r+0x24>
 8004bd0:	bd38      	pop	{r3, r4, r5, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20000090 	.word	0x20000090

08004bd8 <_malloc_r>:
 8004bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bda:	1ccd      	adds	r5, r1, #3
 8004bdc:	f025 0503 	bic.w	r5, r5, #3
 8004be0:	3508      	adds	r5, #8
 8004be2:	2d0c      	cmp	r5, #12
 8004be4:	bf38      	it	cc
 8004be6:	250c      	movcc	r5, #12
 8004be8:	2d00      	cmp	r5, #0
 8004bea:	4606      	mov	r6, r0
 8004bec:	db01      	blt.n	8004bf2 <_malloc_r+0x1a>
 8004bee:	42a9      	cmp	r1, r5
 8004bf0:	d903      	bls.n	8004bfa <_malloc_r+0x22>
 8004bf2:	230c      	movs	r3, #12
 8004bf4:	6033      	str	r3, [r6, #0]
 8004bf6:	2000      	movs	r0, #0
 8004bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bfa:	f000 f87d 	bl	8004cf8 <__malloc_lock>
 8004bfe:	4921      	ldr	r1, [pc, #132]	; (8004c84 <_malloc_r+0xac>)
 8004c00:	680a      	ldr	r2, [r1, #0]
 8004c02:	4614      	mov	r4, r2
 8004c04:	b99c      	cbnz	r4, 8004c2e <_malloc_r+0x56>
 8004c06:	4f20      	ldr	r7, [pc, #128]	; (8004c88 <_malloc_r+0xb0>)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	b923      	cbnz	r3, 8004c16 <_malloc_r+0x3e>
 8004c0c:	4621      	mov	r1, r4
 8004c0e:	4630      	mov	r0, r6
 8004c10:	f000 f862 	bl	8004cd8 <_sbrk_r>
 8004c14:	6038      	str	r0, [r7, #0]
 8004c16:	4629      	mov	r1, r5
 8004c18:	4630      	mov	r0, r6
 8004c1a:	f000 f85d 	bl	8004cd8 <_sbrk_r>
 8004c1e:	1c43      	adds	r3, r0, #1
 8004c20:	d123      	bne.n	8004c6a <_malloc_r+0x92>
 8004c22:	230c      	movs	r3, #12
 8004c24:	4630      	mov	r0, r6
 8004c26:	6033      	str	r3, [r6, #0]
 8004c28:	f000 f86c 	bl	8004d04 <__malloc_unlock>
 8004c2c:	e7e3      	b.n	8004bf6 <_malloc_r+0x1e>
 8004c2e:	6823      	ldr	r3, [r4, #0]
 8004c30:	1b5b      	subs	r3, r3, r5
 8004c32:	d417      	bmi.n	8004c64 <_malloc_r+0x8c>
 8004c34:	2b0b      	cmp	r3, #11
 8004c36:	d903      	bls.n	8004c40 <_malloc_r+0x68>
 8004c38:	6023      	str	r3, [r4, #0]
 8004c3a:	441c      	add	r4, r3
 8004c3c:	6025      	str	r5, [r4, #0]
 8004c3e:	e004      	b.n	8004c4a <_malloc_r+0x72>
 8004c40:	6863      	ldr	r3, [r4, #4]
 8004c42:	42a2      	cmp	r2, r4
 8004c44:	bf0c      	ite	eq
 8004c46:	600b      	streq	r3, [r1, #0]
 8004c48:	6053      	strne	r3, [r2, #4]
 8004c4a:	4630      	mov	r0, r6
 8004c4c:	f000 f85a 	bl	8004d04 <__malloc_unlock>
 8004c50:	f104 000b 	add.w	r0, r4, #11
 8004c54:	1d23      	adds	r3, r4, #4
 8004c56:	f020 0007 	bic.w	r0, r0, #7
 8004c5a:	1ac2      	subs	r2, r0, r3
 8004c5c:	d0cc      	beq.n	8004bf8 <_malloc_r+0x20>
 8004c5e:	1a1b      	subs	r3, r3, r0
 8004c60:	50a3      	str	r3, [r4, r2]
 8004c62:	e7c9      	b.n	8004bf8 <_malloc_r+0x20>
 8004c64:	4622      	mov	r2, r4
 8004c66:	6864      	ldr	r4, [r4, #4]
 8004c68:	e7cc      	b.n	8004c04 <_malloc_r+0x2c>
 8004c6a:	1cc4      	adds	r4, r0, #3
 8004c6c:	f024 0403 	bic.w	r4, r4, #3
 8004c70:	42a0      	cmp	r0, r4
 8004c72:	d0e3      	beq.n	8004c3c <_malloc_r+0x64>
 8004c74:	1a21      	subs	r1, r4, r0
 8004c76:	4630      	mov	r0, r6
 8004c78:	f000 f82e 	bl	8004cd8 <_sbrk_r>
 8004c7c:	3001      	adds	r0, #1
 8004c7e:	d1dd      	bne.n	8004c3c <_malloc_r+0x64>
 8004c80:	e7cf      	b.n	8004c22 <_malloc_r+0x4a>
 8004c82:	bf00      	nop
 8004c84:	20000090 	.word	0x20000090
 8004c88:	20000094 	.word	0x20000094

08004c8c <_realloc_r>:
 8004c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8e:	4607      	mov	r7, r0
 8004c90:	4614      	mov	r4, r2
 8004c92:	460e      	mov	r6, r1
 8004c94:	b921      	cbnz	r1, 8004ca0 <_realloc_r+0x14>
 8004c96:	4611      	mov	r1, r2
 8004c98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004c9c:	f7ff bf9c 	b.w	8004bd8 <_malloc_r>
 8004ca0:	b922      	cbnz	r2, 8004cac <_realloc_r+0x20>
 8004ca2:	f7ff ff4d 	bl	8004b40 <_free_r>
 8004ca6:	4625      	mov	r5, r4
 8004ca8:	4628      	mov	r0, r5
 8004caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cac:	f000 f830 	bl	8004d10 <_malloc_usable_size_r>
 8004cb0:	42a0      	cmp	r0, r4
 8004cb2:	d20f      	bcs.n	8004cd4 <_realloc_r+0x48>
 8004cb4:	4621      	mov	r1, r4
 8004cb6:	4638      	mov	r0, r7
 8004cb8:	f7ff ff8e 	bl	8004bd8 <_malloc_r>
 8004cbc:	4605      	mov	r5, r0
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	d0f2      	beq.n	8004ca8 <_realloc_r+0x1c>
 8004cc2:	4631      	mov	r1, r6
 8004cc4:	4622      	mov	r2, r4
 8004cc6:	f7ff ff13 	bl	8004af0 <memcpy>
 8004cca:	4631      	mov	r1, r6
 8004ccc:	4638      	mov	r0, r7
 8004cce:	f7ff ff37 	bl	8004b40 <_free_r>
 8004cd2:	e7e9      	b.n	8004ca8 <_realloc_r+0x1c>
 8004cd4:	4635      	mov	r5, r6
 8004cd6:	e7e7      	b.n	8004ca8 <_realloc_r+0x1c>

08004cd8 <_sbrk_r>:
 8004cd8:	b538      	push	{r3, r4, r5, lr}
 8004cda:	2300      	movs	r3, #0
 8004cdc:	4d05      	ldr	r5, [pc, #20]	; (8004cf4 <_sbrk_r+0x1c>)
 8004cde:	4604      	mov	r4, r0
 8004ce0:	4608      	mov	r0, r1
 8004ce2:	602b      	str	r3, [r5, #0]
 8004ce4:	f7fb feb4 	bl	8000a50 <_sbrk>
 8004ce8:	1c43      	adds	r3, r0, #1
 8004cea:	d102      	bne.n	8004cf2 <_sbrk_r+0x1a>
 8004cec:	682b      	ldr	r3, [r5, #0]
 8004cee:	b103      	cbz	r3, 8004cf2 <_sbrk_r+0x1a>
 8004cf0:	6023      	str	r3, [r4, #0]
 8004cf2:	bd38      	pop	{r3, r4, r5, pc}
 8004cf4:	200001a8 	.word	0x200001a8

08004cf8 <__malloc_lock>:
 8004cf8:	4801      	ldr	r0, [pc, #4]	; (8004d00 <__malloc_lock+0x8>)
 8004cfa:	f000 b811 	b.w	8004d20 <__retarget_lock_acquire_recursive>
 8004cfe:	bf00      	nop
 8004d00:	200001b0 	.word	0x200001b0

08004d04 <__malloc_unlock>:
 8004d04:	4801      	ldr	r0, [pc, #4]	; (8004d0c <__malloc_unlock+0x8>)
 8004d06:	f000 b80c 	b.w	8004d22 <__retarget_lock_release_recursive>
 8004d0a:	bf00      	nop
 8004d0c:	200001b0 	.word	0x200001b0

08004d10 <_malloc_usable_size_r>:
 8004d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d14:	1f18      	subs	r0, r3, #4
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	bfbc      	itt	lt
 8004d1a:	580b      	ldrlt	r3, [r1, r0]
 8004d1c:	18c0      	addlt	r0, r0, r3
 8004d1e:	4770      	bx	lr

08004d20 <__retarget_lock_acquire_recursive>:
 8004d20:	4770      	bx	lr

08004d22 <__retarget_lock_release_recursive>:
 8004d22:	4770      	bx	lr

08004d24 <_init>:
 8004d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d26:	bf00      	nop
 8004d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d2a:	bc08      	pop	{r3}
 8004d2c:	469e      	mov	lr, r3
 8004d2e:	4770      	bx	lr

08004d30 <_fini>:
 8004d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d32:	bf00      	nop
 8004d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d36:	bc08      	pop	{r3}
 8004d38:	469e      	mov	lr, r3
 8004d3a:	4770      	bx	lr
