
pots2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000440c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004518  08004518  00014518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045fc  080045fc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080045fc  080045fc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045fc  080045fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045fc  080045fc  000145fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004600  08004600  00014600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000070  08004674  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08004674  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb3c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000255c  00000000  00000000  0002fbd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  00032138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  00032e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001847e  00000000  00000000  00033a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee46  00000000  00000000  0004bede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089064  00000000  00000000  0005ad24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e3d88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003934  00000000  00000000  000e3ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004500 	.word	0x08004500

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004500 	.word	0x08004500

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <debug_message>:

#include "debug_uart.h"


void debug_message(char *message)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	snprintf(buffer, sizeof(buffer), "debug %s\n", message);
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <debug_message+0x30>)
 800017c:	2180      	movs	r1, #128	; 0x80
 800017e:	4809      	ldr	r0, [pc, #36]	; (80001a4 <debug_message+0x34>)
 8000180:	f003 fd70 	bl	8003c64 <sniprintf>
	HAL_UART_Transmit_IT(&huart1, buffer, strlen(buffer));
 8000184:	4807      	ldr	r0, [pc, #28]	; (80001a4 <debug_message+0x34>)
 8000186:	f7ff ffeb 	bl	8000160 <strlen>
 800018a:	4603      	mov	r3, r0
 800018c:	b29b      	uxth	r3, r3
 800018e:	461a      	mov	r2, r3
 8000190:	4904      	ldr	r1, [pc, #16]	; (80001a4 <debug_message+0x34>)
 8000192:	4805      	ldr	r0, [pc, #20]	; (80001a8 <debug_message+0x38>)
 8000194:	f003 f8e1 	bl	800335a <HAL_UART_Transmit_IT>
}
 8000198:	bf00      	nop
 800019a:	3708      	adds	r7, #8
 800019c:	46bd      	mov	sp, r7
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	08004518 	.word	0x08004518
 80001a4:	200000e0 	.word	0x200000e0
 80001a8:	2000009c 	.word	0x2000009c

080001ac <gsmInit>:
 */

#include "gsm.h"

void gsmInit(gsm_t *myModule)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
	//snprintf(myModule->uart_TX_buffer, sizeof(myModule->uart_TX_buffer), "gsmInit\n");
	//HAL_UART_Transmit_IT(myModule->huart, myModule->uart_TX_buffer, strlen(myModule->uart_TX_buffer));

	//initialize structure
	myModule->logicStateDurationMillisecon=0;
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	2200      	movs	r2, #0
 80001b8:	831a      	strh	r2, [r3, #24]
	gsmPowerStateChange(myModule, GSM_POWER_INIT);
 80001ba:	2100      	movs	r1, #0
 80001bc:	6878      	ldr	r0, [r7, #4]
 80001be:	f000 f851 	bl	8000264 <gsmPowerStateChange>
	gsmLogicStateChange(myModule, GSM_MODULE_OFF);
 80001c2:	2100      	movs	r1, #0
 80001c4:	6878      	ldr	r0, [r7, #4]
 80001c6:	f000 f83c 	bl	8000242 <gsmLogicStateChange>
	myModule->uart_RX_counter=0;
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	2200      	movs	r2, #0
 80001ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	myModule->servicePending=0;
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	2200      	movs	r2, #0
 80001d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	//pull the GSM_WAKE pin high to turn the module on
	//HAL_GPIO_WritePin(myModule->port_GSM_WAKE, myModule->pin_GSM_WAKE, GPIO_PIN_SET);
}
 80001da:	bf00      	nop
 80001dc:	3708      	adds	r7, #8
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}

080001e2 <gsmUartReceiver>:

void gsmUartReceiver(gsm_t *myModule, uint8_t receivedCharacter)
{
 80001e2:	b580      	push	{r7, lr}
 80001e4:	b082      	sub	sp, #8
 80001e6:	af00      	add	r7, sp, #0
 80001e8:	6078      	str	r0, [r7, #4]
 80001ea:	460b      	mov	r3, r1
 80001ec:	70fb      	strb	r3, [r7, #3]
	if(myModule->uart_RX_counter<sizeof(myModule->uart_RX_buffer)){ //if there is space left in a receiver buffer
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80001f4:	2b1f      	cmp	r3, #31
 80001f6:	d815      	bhi.n	8000224 <gsmUartReceiver+0x42>
		myModule->uart_RX_buffer[myModule->uart_RX_counter]=receivedCharacter;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80001fe:	461a      	mov	r2, r3
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4413      	add	r3, r2
 8000204:	78fa      	ldrb	r2, [r7, #3]
 8000206:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		myModule->uart_RX_counter++;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000210:	3301      	adds	r3, #1
 8000212:	b2da      	uxtb	r2, r3
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		myModule->servicePending=1;
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	2201      	movs	r2, #1
 800021e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	else //no space for a new character - flush the buffer to avoid overrun
	{
		memset(myModule->uart_RX_buffer, '\0', sizeof(myModule->uart_RX_buffer));
		myModule->uart_RX_counter=0;
	}
}
 8000222:	e00a      	b.n	800023a <gsmUartReceiver+0x58>
		memset(myModule->uart_RX_buffer, '\0', sizeof(myModule->uart_RX_buffer));
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	3330      	adds	r3, #48	; 0x30
 8000228:	2220      	movs	r2, #32
 800022a:	2100      	movs	r1, #0
 800022c:	4618      	mov	r0, r3
 800022e:	f003 fd11 	bl	8003c54 <memset>
		myModule->uart_RX_counter=0;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2200      	movs	r2, #0
 8000236:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
 800023a:	bf00      	nop
 800023c:	3708      	adds	r7, #8
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}

08000242 <gsmLogicStateChange>:

void gsmLogicStateChange(gsm_t *myModule, gsm_module_logic_state_t newState)
{
 8000242:	b480      	push	{r7}
 8000244:	b083      	sub	sp, #12
 8000246:	af00      	add	r7, sp, #0
 8000248:	6078      	str	r0, [r7, #4]
 800024a:	460b      	mov	r3, r1
 800024c:	70fb      	strb	r3, [r7, #3]
	myModule->logicState=newState;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	78fa      	ldrb	r2, [r7, #3]
 8000252:	759a      	strb	r2, [r3, #22]
	myModule->logicStateDurationMillisecon=0;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	2200      	movs	r2, #0
 8000258:	831a      	strh	r2, [r3, #24]
}
 800025a:	bf00      	nop
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr

08000264 <gsmPowerStateChange>:

void gsmPowerStateChange(gsm_t *myModule, gsm_module_power_state_t newState)
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
 800026c:	460b      	mov	r3, r1
 800026e:	70fb      	strb	r3, [r7, #3]
	myModule->powerState=newState;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	78fa      	ldrb	r2, [r7, #3]
 8000274:	769a      	strb	r2, [r3, #26]
	myModule->powerStateDurationMillisecon=0;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	2200      	movs	r2, #0
 800027a:	839a      	strh	r2, [r3, #28]
}
 800027c:	bf00      	nop
 800027e:	370c      	adds	r7, #12
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr
	...

08000288 <gsmService>:

void gsmService(gsm_t *myModule) //this will be called in main
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
	myModule->LPG_PinState=HAL_GPIO_ReadPin(myModule->port_GSM_LPG, myModule->pin_GSM_LPG);
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	689a      	ldr	r2, [r3, #8]
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	899b      	ldrh	r3, [r3, #12]
 8000298:	4619      	mov	r1, r3
 800029a:	4610      	mov	r0, r2
 800029c:	f001 fc08 	bl	8001ab0 <HAL_GPIO_ReadPin>
 80002a0:	4603      	mov	r3, r0
 80002a2:	461a      	mov	r2, r3
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	779a      	strb	r2, [r3, #30]

	switch(myModule->powerState){
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	7e9b      	ldrb	r3, [r3, #26]
 80002ac:	2b02      	cmp	r3, #2
 80002ae:	d029      	beq.n	8000304 <gsmService+0x7c>
 80002b0:	2b02      	cmp	r3, #2
 80002b2:	dc33      	bgt.n	800031c <gsmService+0x94>
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d002      	beq.n	80002be <gsmService+0x36>
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d012      	beq.n	80002e2 <gsmService+0x5a>
 80002bc:	e02e      	b.n	800031c <gsmService+0x94>
	case GSM_POWER_INIT:
		if(myModule->LPG_PinState==GPIO_PIN_SET){ //if LPG high then the module is turned on
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	7f9b      	ldrb	r3, [r3, #30]
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d103      	bne.n	80002ce <gsmService+0x46>
			gsmPowerStateChange(myModule, GSM_POWER_TURNED_ON);
 80002c6:	2102      	movs	r1, #2
 80002c8:	6878      	ldr	r0, [r7, #4]
 80002ca:	f7ff ffcb 	bl	8000264 <gsmPowerStateChange>
		}
		if(myModule->powerStateDurationMillisecon>4000){ //no HIGH state observed for 4 seconds means that the module must be turned on
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	8b9b      	ldrh	r3, [r3, #28]
 80002d2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80002d6:	d91e      	bls.n	8000316 <gsmService+0x8e>
			gsmPowerStateChange(myModule, GSM_POWER_ASSERTING_POWER_ON);
 80002d8:	2101      	movs	r1, #1
 80002da:	6878      	ldr	r0, [r7, #4]
 80002dc:	f7ff ffc2 	bl	8000264 <gsmPowerStateChange>
		}
		break;
 80002e0:	e019      	b.n	8000316 <gsmService+0x8e>
	case GSM_POWER_ASSERTING_POWER_ON:
		HAL_GPIO_WritePin(myModule->port_GSM_POWER_ON, myModule->pin_GSM_POWER_ON, GPIO_PIN_SET); //keep the POWER_ON pin asserted until module turns on
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	6818      	ldr	r0, [r3, #0]
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	889b      	ldrh	r3, [r3, #4]
 80002ea:	2201      	movs	r2, #1
 80002ec:	4619      	mov	r1, r3
 80002ee:	f001 fbf6 	bl	8001ade <HAL_GPIO_WritePin>
		if(myModule->LPG_PinState==GPIO_PIN_SET){ //if LPG high then the module is turned on
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	7f9b      	ldrb	r3, [r3, #30]
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d10f      	bne.n	800031a <gsmService+0x92>
			gsmPowerStateChange(myModule, GSM_POWER_TURNED_ON);
 80002fa:	2102      	movs	r1, #2
 80002fc:	6878      	ldr	r0, [r7, #4]
 80002fe:	f7ff ffb1 	bl	8000264 <gsmPowerStateChange>
		}
		break;
 8000302:	e00a      	b.n	800031a <gsmService+0x92>

	case GSM_POWER_TURNED_ON:
		HAL_GPIO_WritePin(myModule->port_GSM_POWER_ON, myModule->pin_GSM_POWER_ON, GPIO_PIN_RESET);
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	6818      	ldr	r0, [r3, #0]
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	889b      	ldrh	r3, [r3, #4]
 800030c:	2200      	movs	r2, #0
 800030e:	4619      	mov	r1, r3
 8000310:	f001 fbe5 	bl	8001ade <HAL_GPIO_WritePin>

		break;
 8000314:	e002      	b.n	800031c <gsmService+0x94>
		break;
 8000316:	bf00      	nop
 8000318:	e000      	b.n	800031c <gsmService+0x94>
		break;
 800031a:	bf00      	nop
	}



	if(myModule->servicePending){
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000322:	2b00      	cmp	r3, #0
 8000324:	d03d      	beq.n	80003a2 <gsmService+0x11a>
		myModule->servicePending=0;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	2200      	movs	r2, #0
 800032a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

		if(myModule->uart_RX_buffer[myModule->uart_RX_counter-1]=='\n'){//if last receiverd character is a \n then a complete line is received
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000334:	3b01      	subs	r3, #1
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	4413      	add	r3, r2
 800033a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800033e:	2b0a      	cmp	r3, #10
 8000340:	d12f      	bne.n	80003a2 <gsmService+0x11a>

			//first string from GSM module expected after turning on
			if(strcmp((char*)myModule->uart_RX_buffer, "AT command ready\r\n") == 0){
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	3330      	adds	r3, #48	; 0x30
 8000346:	4919      	ldr	r1, [pc, #100]	; (80003ac <gsmService+0x124>)
 8000348:	4618      	mov	r0, r3
 800034a:	f7ff feff 	bl	800014c <strcmp>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d10a      	bne.n	800036a <gsmService+0xe2>
				HAL_GPIO_WritePin(myModule->port_GSM_POWER_ON, myModule->pin_GSM_POWER_ON, GPIO_PIN_RESET);  //module is turned on so release WAKE pin
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	6818      	ldr	r0, [r3, #0]
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	889b      	ldrh	r3, [r3, #4]
 800035c:	2200      	movs	r2, #0
 800035e:	4619      	mov	r1, r3
 8000360:	f001 fbbd 	bl	8001ade <HAL_GPIO_WritePin>
				myModule->logicState=GSM_MODULE_AT_READY;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2202      	movs	r2, #2
 8000368:	759a      	strb	r2, [r3, #22]
			}

			if(strcmp((char*)myModule->uart_RX_buffer, "+SIM READY\r\n") == 0){
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	3330      	adds	r3, #48	; 0x30
 800036e:	4910      	ldr	r1, [pc, #64]	; (80003b0 <gsmService+0x128>)
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff feeb 	bl	800014c <strcmp>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d102      	bne.n	8000382 <gsmService+0xfa>
				myModule->logicState=GSM_MODULE_SIM_READY;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	2203      	movs	r2, #3
 8000380:	759a      	strb	r2, [r3, #22]
			}

			if(strcmp((char*)myModule->uart_RX_buffer, "RING\r\n") == 0){
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	3330      	adds	r3, #48	; 0x30
 8000386:	490b      	ldr	r1, [pc, #44]	; (80003b4 <gsmService+0x12c>)
 8000388:	4618      	mov	r0, r3
 800038a:	f7ff fedf 	bl	800014c <strcmp>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d102      	bne.n	800039a <gsmService+0x112>
				myModule->logicState=GSM_MODULE_RING;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	2204      	movs	r2, #4
 8000398:	759a      	strb	r2, [r3, #22]

//			snprintf(myModule->uart_TX_buffer, sizeof(myModule->uart_TX_buffer), "gsmService %d\n", myModule->uart_RX_counter);
//			HAL_UART_Transmit_IT(myModule->huart, myModule->uart_TX_buffer, strlen(myModule->uart_TX_buffer));

			//memset(myModule->uart_RX_buffer, '\0', sizeof(myModule->uart_RX_buffer));
			myModule->uart_RX_counter=0;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	2200      	movs	r2, #0
 800039e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

		}
	}
}
 80003a2:	bf00      	nop
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	08004524 	.word	0x08004524
 80003b0:	08004538 	.word	0x08004538
 80003b4:	08004548 	.word	0x08004548

080003b8 <gsmTimeKeeping>:

void gsmTimeKeeping(gsm_t *myModule)  //this will be called in timer interrupt
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	if(myModule->powerStateDurationMillisecon<(UINT16_MAX-myModule->timeKeepingPeriodMilliseconds)){
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	8b9b      	ldrh	r3, [r3, #28]
 80003c4:	461a      	mov	r2, r3
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	8a9b      	ldrh	r3, [r3, #20]
 80003ca:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80003ce:	33ff      	adds	r3, #255	; 0xff
 80003d0:	429a      	cmp	r2, r3
 80003d2:	da07      	bge.n	80003e4 <gsmTimeKeeping+0x2c>
		myModule->powerStateDurationMillisecon+=myModule->timeKeepingPeriodMilliseconds;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	8b9a      	ldrh	r2, [r3, #28]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	8a9b      	ldrh	r3, [r3, #20]
 80003dc:	4413      	add	r3, r2
 80003de:	b29a      	uxth	r2, r3
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	839a      	strh	r2, [r3, #28]
	}

	if(myModule->logicStateDurationMillisecon<(UINT16_MAX-myModule->timeKeepingPeriodMilliseconds)){
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	8b1b      	ldrh	r3, [r3, #24]
 80003e8:	461a      	mov	r2, r3
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	8a9b      	ldrh	r3, [r3, #20]
 80003ee:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80003f2:	33ff      	adds	r3, #255	; 0xff
 80003f4:	429a      	cmp	r2, r3
 80003f6:	da07      	bge.n	8000408 <gsmTimeKeeping+0x50>
			myModule->logicStateDurationMillisecon+=myModule->timeKeepingPeriodMilliseconds;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	8b1a      	ldrh	r2, [r3, #24]
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	8a9b      	ldrh	r3, [r3, #20]
 8000400:	4413      	add	r3, r2
 8000402:	b29a      	uxth	r2, r3
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	831a      	strh	r2, [r3, #24]
		}
}
 8000408:	bf00      	nop
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	bc80      	pop	{r7}
 8000410:	4770      	bx	lr
	...

08000414 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000418:	f000 ffb0 	bl	800137c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800041c:	f000 f8de 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000420:	f000 fa36 	bl	8000890 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000424:	f000 f9e0 	bl	80007e8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000428:	f000 fa08 	bl	800083c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800042c:	f000 f91a 	bl	8000664 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000430:	f000 f964 	bl	80006fc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8000434:	4857      	ldr	r0, [pc, #348]	; (8000594 <main+0x180>)
 8000436:	f001 ffed 	bl	8002414 <HAL_TIM_Base_Start_IT>

  myGSM.huart=&huart2;
 800043a:	4b57      	ldr	r3, [pc, #348]	; (8000598 <main+0x184>)
 800043c:	4a57      	ldr	r2, [pc, #348]	; (800059c <main+0x188>)
 800043e:	611a      	str	r2, [r3, #16]
  myGSM.port_GSM_POWER_ON=GSM_POWER_ON_GPIO_Port;
 8000440:	4b55      	ldr	r3, [pc, #340]	; (8000598 <main+0x184>)
 8000442:	4a57      	ldr	r2, [pc, #348]	; (80005a0 <main+0x18c>)
 8000444:	601a      	str	r2, [r3, #0]
  myGSM.pin_GSM_POWER_ON=GSM_POWER_ON_Pin;
 8000446:	4b54      	ldr	r3, [pc, #336]	; (8000598 <main+0x184>)
 8000448:	2202      	movs	r2, #2
 800044a:	809a      	strh	r2, [r3, #4]
  myGSM.port_GSM_LPG=GSM_LPG_GPIO_Port;
 800044c:	4b52      	ldr	r3, [pc, #328]	; (8000598 <main+0x184>)
 800044e:	4a54      	ldr	r2, [pc, #336]	; (80005a0 <main+0x18c>)
 8000450:	609a      	str	r2, [r3, #8]
  myGSM.pin_GSM_LPG=GSM_LPG_Pin;
 8000452:	4b51      	ldr	r3, [pc, #324]	; (8000598 <main+0x184>)
 8000454:	2201      	movs	r2, #1
 8000456:	819a      	strh	r2, [r3, #12]
  myGSM.timeKeepingPeriodMilliseconds=1000/CALLBACK_FREQUENCY_HZ;
 8000458:	4b4f      	ldr	r3, [pc, #316]	; (8000598 <main+0x184>)
 800045a:	2204      	movs	r2, #4
 800045c:	829a      	strh	r2, [r3, #20]

  gsmInit(&myGSM);
 800045e:	484e      	ldr	r0, [pc, #312]	; (8000598 <main+0x184>)
 8000460:	f7ff fea4 	bl	80001ac <gsmInit>

  debug_message("Reset");
 8000464:	484f      	ldr	r0, [pc, #316]	; (80005a4 <main+0x190>)
 8000466:	f7ff fe83 	bl	8000170 <debug_message>

  ///////////////////////////////////////////////////////////////
  //initialization of signaling module///////////////////////////
  ///////////////////////////////////////////////////////////////
  mySignaling.toneFrequency_hertz=410; //this is required tone frequency
 800046a:	4b4f      	ldr	r3, [pc, #316]	; (80005a8 <main+0x194>)
 800046c:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 8000470:	811a      	strh	r2, [r3, #8]
  mySignaling.toneOnDuration_milliseconds=450;
 8000472:	4b4d      	ldr	r3, [pc, #308]	; (80005a8 <main+0x194>)
 8000474:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000478:	815a      	strh	r2, [r3, #10]
  mySignaling.toneOffDuration_milliseconds=0;
 800047a:	4b4b      	ldr	r3, [pc, #300]	; (80005a8 <main+0x194>)
 800047c:	2200      	movs	r2, #0
 800047e:	819a      	strh	r2, [r3, #12]
  mySignaling.frequencyCallback_hertz=CALLBACK_FREQUENCY_HZ; //currently the function is implemented that TIM3 interrupt frequency is equal to requested tone frequency
 8000480:	4b49      	ldr	r3, [pc, #292]	; (80005a8 <main+0x194>)
 8000482:	22fa      	movs	r2, #250	; 0xfa
 8000484:	601a      	str	r2, [r3, #0]
  mySignaling.fclk_hertz=32000000;
 8000486:	4b48      	ldr	r3, [pc, #288]	; (80005a8 <main+0x194>)
 8000488:	4a48      	ldr	r2, [pc, #288]	; (80005ac <main+0x198>)
 800048a:	605a      	str	r2, [r3, #4]
  mySignaling.timer=&htim3;
 800048c:	4b46      	ldr	r3, [pc, #280]	; (80005a8 <main+0x194>)
 800048e:	4a48      	ldr	r2, [pc, #288]	; (80005b0 <main+0x19c>)
 8000490:	615a      	str	r2, [r3, #20]
  mySignaling.state=SIGNALING_INTERNAL_STATE_CONTINUOUS;
 8000492:	4b45      	ldr	r3, [pc, #276]	; (80005a8 <main+0x194>)
 8000494:	2201      	movs	r2, #1
 8000496:	741a      	strb	r2, [r3, #16]
  signalingInit(&mySignaling);
 8000498:	4843      	ldr	r0, [pc, #268]	; (80005a8 <main+0x194>)
 800049a:	f000 fd6c 	bl	8000f76 <signalingInit>

  ///////////////////////////////////////////////////////////////
  //initialization of dialing receiver///////////////////////////
  ///////////////////////////////////////////////////////////////
  myDialing.SHK_GPIO_Port=POTS_SHK_GPIO_Port;
 800049e:	4b45      	ldr	r3, [pc, #276]	; (80005b4 <main+0x1a0>)
 80004a0:	4a45      	ldr	r2, [pc, #276]	; (80005b8 <main+0x1a4>)
 80004a2:	601a      	str	r2, [r3, #0]
  myDialing.SHK_Pin=POTS_SHK_Pin;
 80004a4:	4b43      	ldr	r3, [pc, #268]	; (80005b4 <main+0x1a0>)
 80004a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004aa:	809a      	strh	r2, [r3, #4]
  myDialing.frequencyCallback_hertz=CALLBACK_FREQUENCY_HZ;
 80004ac:	4b41      	ldr	r3, [pc, #260]	; (80005b4 <main+0x1a0>)
 80004ae:	22fa      	movs	r2, #250	; 0xfa
 80004b0:	811a      	strh	r2, [r3, #8]
  pulseDialingInit(&myDialing);
 80004b2:	4840      	ldr	r0, [pc, #256]	; (80005b4 <main+0x1a0>)
 80004b4:	f000 fb11 	bl	8000ada <pulseDialingInit>

  ///////////////////////////////////////////////////////////////
  //initialization of ringing module/////////////////////////////
  ///////////////////////////////////////////////////////////////
  myRing.callBackFrequency=CALLBACK_FREQUENCY_HZ;
 80004b8:	4b40      	ldr	r3, [pc, #256]	; (80005bc <main+0x1a8>)
 80004ba:	22fa      	movs	r2, #250	; 0xfa
 80004bc:	801a      	strh	r2, [r3, #0]
  myRing.state=RINGER_OFF;
 80004be:	4b3f      	ldr	r3, [pc, #252]	; (80005bc <main+0x1a8>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	759a      	strb	r2, [r3, #22]
  myRing.FR_GPIO_Port=POTS_FR_GPIO_Port;
 80004c4:	4b3d      	ldr	r3, [pc, #244]	; (80005bc <main+0x1a8>)
 80004c6:	4a3c      	ldr	r2, [pc, #240]	; (80005b8 <main+0x1a4>)
 80004c8:	605a      	str	r2, [r3, #4]
  myRing.FR_Pin=POTS_FR_Pin;
 80004ca:	4b3c      	ldr	r3, [pc, #240]	; (80005bc <main+0x1a8>)
 80004cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004d0:	811a      	strh	r2, [r3, #8]
  myRing.RM_GPIO_Port=POTS_RM_GPIO_Port;
 80004d2:	4b3a      	ldr	r3, [pc, #232]	; (80005bc <main+0x1a8>)
 80004d4:	4a38      	ldr	r2, [pc, #224]	; (80005b8 <main+0x1a4>)
 80004d6:	60da      	str	r2, [r3, #12]
  myRing.RM_Pin=POTS_RM_Pin;
 80004d8:	4b38      	ldr	r3, [pc, #224]	; (80005bc <main+0x1a8>)
 80004da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004de:	821a      	strh	r2, [r3, #16]
  ringInit(&myRing);
 80004e0:	4836      	ldr	r0, [pc, #216]	; (80005bc <main+0x1a8>)
 80004e2:	f000 fbb9 	bl	8000c58 <ringInit>


  HAL_UART_Receive_IT(&huart1, &UART1_rxChar, 1);
 80004e6:	2201      	movs	r2, #1
 80004e8:	4935      	ldr	r1, [pc, #212]	; (80005c0 <main+0x1ac>)
 80004ea:	4836      	ldr	r0, [pc, #216]	; (80005c4 <main+0x1b0>)
 80004ec:	f002 ff79 	bl	80033e2 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &UART2_rxChar, 1);
 80004f0:	2201      	movs	r2, #1
 80004f2:	4935      	ldr	r1, [pc, #212]	; (80005c8 <main+0x1b4>)
 80004f4:	4829      	ldr	r0, [pc, #164]	; (800059c <main+0x188>)
 80004f6:	f002 ff74 	bl	80033e2 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    gsmService(&myGSM);
 80004fa:	4827      	ldr	r0, [pc, #156]	; (8000598 <main+0x184>)
 80004fc:	f7ff fec4 	bl	8000288 <gsmService>

    if(myDialing.dialedDigit>-1){
 8000500:	4b2c      	ldr	r3, [pc, #176]	; (80005b4 <main+0x1a0>)
 8000502:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8000506:	2b00      	cmp	r3, #0
 8000508:	db14      	blt.n	8000534 <main+0x120>
		snprintf(buffer, sizeof(buffer), "myDialing %d\n", myDialing.dialedDigit);
 800050a:	4b2a      	ldr	r3, [pc, #168]	; (80005b4 <main+0x1a0>)
 800050c:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8000510:	4a2e      	ldr	r2, [pc, #184]	; (80005cc <main+0x1b8>)
 8000512:	2180      	movs	r1, #128	; 0x80
 8000514:	482e      	ldr	r0, [pc, #184]	; (80005d0 <main+0x1bc>)
 8000516:	f003 fba5 	bl	8003c64 <sniprintf>
		HAL_UART_Transmit_IT(&huart1, buffer, strlen(buffer));
 800051a:	482d      	ldr	r0, [pc, #180]	; (80005d0 <main+0x1bc>)
 800051c:	f7ff fe20 	bl	8000160 <strlen>
 8000520:	4603      	mov	r3, r0
 8000522:	b29b      	uxth	r3, r3
 8000524:	461a      	mov	r2, r3
 8000526:	492a      	ldr	r1, [pc, #168]	; (80005d0 <main+0x1bc>)
 8000528:	4826      	ldr	r0, [pc, #152]	; (80005c4 <main+0x1b0>)
 800052a:	f002 ff16 	bl	800335a <HAL_UART_Transmit_IT>
		myDialing.dialedDigit=-1;
 800052e:	4b21      	ldr	r3, [pc, #132]	; (80005b4 <main+0x1a0>)
 8000530:	22ff      	movs	r2, #255	; 0xff
 8000532:	749a      	strb	r2, [r3, #18]
    }

	if(myDialing.newEventHandset){
 8000534:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <main+0x1a0>)
 8000536:	f993 3013 	ldrsb.w	r3, [r3, #19]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0dd      	beq.n	80004fa <main+0xe6>
		myDialing.newEventHandset=0;
 800053e:	4b1d      	ldr	r3, [pc, #116]	; (80005b4 <main+0x1a0>)
 8000540:	2200      	movs	r2, #0
 8000542:	74da      	strb	r2, [r3, #19]
		if(myDialing.Handset_State==HANDSET_LIFTED){
 8000544:	4b1b      	ldr	r3, [pc, #108]	; (80005b4 <main+0x1a0>)
 8000546:	7adb      	ldrb	r3, [r3, #11]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d10e      	bne.n	800056a <main+0x156>
			snprintf(buffer, sizeof(buffer), "myDialing HANDSET_LIFTED\n");
 800054c:	4a21      	ldr	r2, [pc, #132]	; (80005d4 <main+0x1c0>)
 800054e:	2180      	movs	r1, #128	; 0x80
 8000550:	481f      	ldr	r0, [pc, #124]	; (80005d0 <main+0x1bc>)
 8000552:	f003 fb87 	bl	8003c64 <sniprintf>
			HAL_UART_Transmit_IT(&huart1, buffer, strlen(buffer));
 8000556:	481e      	ldr	r0, [pc, #120]	; (80005d0 <main+0x1bc>)
 8000558:	f7ff fe02 	bl	8000160 <strlen>
 800055c:	4603      	mov	r3, r0
 800055e:	b29b      	uxth	r3, r3
 8000560:	461a      	mov	r2, r3
 8000562:	491b      	ldr	r1, [pc, #108]	; (80005d0 <main+0x1bc>)
 8000564:	4817      	ldr	r0, [pc, #92]	; (80005c4 <main+0x1b0>)
 8000566:	f002 fef8 	bl	800335a <HAL_UART_Transmit_IT>
		}
		if(myDialing.Handset_State==HANDSET_ON_HOOK){
 800056a:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <main+0x1a0>)
 800056c:	7adb      	ldrb	r3, [r3, #11]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d1c3      	bne.n	80004fa <main+0xe6>
			snprintf(buffer, sizeof(buffer), "myDialing HANDSET_ON_HOOK\n");
 8000572:	4a19      	ldr	r2, [pc, #100]	; (80005d8 <main+0x1c4>)
 8000574:	2180      	movs	r1, #128	; 0x80
 8000576:	4816      	ldr	r0, [pc, #88]	; (80005d0 <main+0x1bc>)
 8000578:	f003 fb74 	bl	8003c64 <sniprintf>
			HAL_UART_Transmit_IT(&huart1, buffer, strlen(buffer));
 800057c:	4814      	ldr	r0, [pc, #80]	; (80005d0 <main+0x1bc>)
 800057e:	f7ff fdef 	bl	8000160 <strlen>
 8000582:	4603      	mov	r3, r0
 8000584:	b29b      	uxth	r3, r3
 8000586:	461a      	mov	r2, r3
 8000588:	4911      	ldr	r1, [pc, #68]	; (80005d0 <main+0x1bc>)
 800058a:	480e      	ldr	r0, [pc, #56]	; (80005c4 <main+0x1b0>)
 800058c:	f002 fee5 	bl	800335a <HAL_UART_Transmit_IT>
    gsmService(&myGSM);
 8000590:	e7b3      	b.n	80004fa <main+0xe6>
 8000592:	bf00      	nop
 8000594:	20000234 	.word	0x20000234
 8000598:	200001c4 	.word	0x200001c4
 800059c:	2000027c 	.word	0x2000027c
 80005a0:	40010800 	.word	0x40010800
 80005a4:	08004550 	.word	0x08004550
 80005a8:	20000160 	.word	0x20000160
 80005ac:	01e84800 	.word	0x01e84800
 80005b0:	2000017c 	.word	0x2000017c
 80005b4:	200002c0 	.word	0x200002c0
 80005b8:	40010c00 	.word	0x40010c00
 80005bc:	2000021c 	.word	0x2000021c
 80005c0:	20000218 	.word	0x20000218
 80005c4:	2000009c 	.word	0x2000009c
 80005c8:	20000178 	.word	0x20000178
 80005cc:	08004558 	.word	0x08004558
 80005d0:	200000e0 	.word	0x200000e0
 80005d4:	08004568 	.word	0x08004568
 80005d8:	08004584 	.word	0x08004584

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b090      	sub	sp, #64	; 0x40
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0318 	add.w	r3, r7, #24
 80005e6:	2228      	movs	r2, #40	; 0x28
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 fb32 	bl	8003c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005fe:	2301      	movs	r3, #1
 8000600:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000602:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000606:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000610:	2302      	movs	r3, #2
 8000612:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000618:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800061a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800061e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 0318 	add.w	r3, r7, #24
 8000624:	4618      	mov	r0, r3
 8000626:	f001 fa8b 	bl	8001b40 <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000630:	f000 fa4e 	bl	8000ad0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000634:	230f      	movs	r3, #15
 8000636:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000638:	2302      	movs	r3, #2
 800063a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2101      	movs	r1, #1
 800064c:	4618      	mov	r0, r3
 800064e:	f001 fcf7 	bl	8002040 <HAL_RCC_ClockConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000658:	f000 fa3a 	bl	8000ad0 <Error_Handler>
  }
}
 800065c:	bf00      	nop
 800065e:	3740      	adds	r7, #64	; 0x40
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000678:	463b      	mov	r3, r7
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000680:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <MX_TIM2_Init+0x94>)
 8000682:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000686:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <MX_TIM2_Init+0x94>)
 800068a:	2200      	movs	r2, #0
 800068c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800068e:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <MX_TIM2_Init+0x94>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3200;
 8000694:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <MX_TIM2_Init+0x94>)
 8000696:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 800069a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800069c:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <MX_TIM2_Init+0x94>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <MX_TIM2_Init+0x94>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006a8:	4813      	ldr	r0, [pc, #76]	; (80006f8 <MX_TIM2_Init+0x94>)
 80006aa:	f001 fe63 	bl	8002374 <HAL_TIM_Base_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80006b4:	f000 fa0c 	bl	8000ad0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	4619      	mov	r1, r3
 80006c4:	480c      	ldr	r0, [pc, #48]	; (80006f8 <MX_TIM2_Init+0x94>)
 80006c6:	f002 fa0f 	bl	8002ae8 <HAL_TIM_ConfigClockSource>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80006d0:	f000 f9fe 	bl	8000ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d4:	2300      	movs	r3, #0
 80006d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006dc:	463b      	mov	r3, r7
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_TIM2_Init+0x94>)
 80006e2:	f002 fd83 	bl	80031ec <HAL_TIMEx_MasterConfigSynchronization>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80006ec:	f000 f9f0 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	3718      	adds	r7, #24
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000234 	.word	0x20000234

080006fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08e      	sub	sp, #56	; 0x38
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
 8000728:	615a      	str	r2, [r3, #20]
 800072a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800072c:	4b2c      	ldr	r3, [pc, #176]	; (80007e0 <MX_TIM3_Init+0xe4>)
 800072e:	4a2d      	ldr	r2, [pc, #180]	; (80007e4 <MX_TIM3_Init+0xe8>)
 8000730:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000732:	4b2b      	ldr	r3, [pc, #172]	; (80007e0 <MX_TIM3_Init+0xe4>)
 8000734:	2200      	movs	r2, #0
 8000736:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000738:	4b29      	ldr	r3, [pc, #164]	; (80007e0 <MX_TIM3_Init+0xe4>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1024;
 800073e:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <MX_TIM3_Init+0xe4>)
 8000740:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000744:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000746:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <MX_TIM3_Init+0xe4>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074c:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <MX_TIM3_Init+0xe4>)
 800074e:	2200      	movs	r2, #0
 8000750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000752:	4823      	ldr	r0, [pc, #140]	; (80007e0 <MX_TIM3_Init+0xe4>)
 8000754:	f001 fe0e 	bl	8002374 <HAL_TIM_Base_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800075e:	f000 f9b7 	bl	8000ad0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000768:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800076c:	4619      	mov	r1, r3
 800076e:	481c      	ldr	r0, [pc, #112]	; (80007e0 <MX_TIM3_Init+0xe4>)
 8000770:	f002 f9ba 	bl	8002ae8 <HAL_TIM_ConfigClockSource>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800077a:	f000 f9a9 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800077e:	4818      	ldr	r0, [pc, #96]	; (80007e0 <MX_TIM3_Init+0xe4>)
 8000780:	f001 fe94 	bl	80024ac <HAL_TIM_PWM_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800078a:	f000 f9a1 	bl	8000ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078e:	2300      	movs	r3, #0
 8000790:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000796:	f107 0320 	add.w	r3, r7, #32
 800079a:	4619      	mov	r1, r3
 800079c:	4810      	ldr	r0, [pc, #64]	; (80007e0 <MX_TIM3_Init+0xe4>)
 800079e:	f002 fd25 	bl	80031ec <HAL_TIMEx_MasterConfigSynchronization>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80007a8:	f000 f992 	bl	8000ad0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ac:	2360      	movs	r3, #96	; 0x60
 80007ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	220c      	movs	r2, #12
 80007c0:	4619      	mov	r1, r3
 80007c2:	4807      	ldr	r0, [pc, #28]	; (80007e0 <MX_TIM3_Init+0xe4>)
 80007c4:	f002 f8d2 	bl	800296c <HAL_TIM_PWM_ConfigChannel>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80007ce:	f000 f97f 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007d2:	4803      	ldr	r0, [pc, #12]	; (80007e0 <MX_TIM3_Init+0xe4>)
 80007d4:	f000 fc64 	bl	80010a0 <HAL_TIM_MspPostInit>

}
 80007d8:	bf00      	nop
 80007da:	3738      	adds	r7, #56	; 0x38
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	2000017c 	.word	0x2000017c
 80007e4:	40000400 	.word	0x40000400

080007e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 80007ee:	4a12      	ldr	r2, [pc, #72]	; (8000838 <MX_USART1_UART_Init+0x50>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 80007f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_USART1_UART_Init+0x4c>)
 8000820:	f002 fd4e 	bl	80032c0 <HAL_UART_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800082a:	f000 f951 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2000009c 	.word	0x2000009c
 8000838:	40013800 	.word	0x40013800

0800083c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000842:	4a12      	ldr	r2, [pc, #72]	; (800088c <MX_USART2_UART_Init+0x50>)
 8000844:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000848:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800084c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000862:	220c      	movs	r2, #12
 8000864:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000874:	f002 fd24 	bl	80032c0 <HAL_UART_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800087e:	f000 f927 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	2000027c 	.word	0x2000027c
 800088c:	40004400 	.word	0x40004400

08000890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 0310 	add.w	r3, r7, #16
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a4:	4b44      	ldr	r3, [pc, #272]	; (80009b8 <MX_GPIO_Init+0x128>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a43      	ldr	r2, [pc, #268]	; (80009b8 <MX_GPIO_Init+0x128>)
 80008aa:	f043 0310 	orr.w	r3, r3, #16
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b41      	ldr	r3, [pc, #260]	; (80009b8 <MX_GPIO_Init+0x128>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f003 0310 	and.w	r3, r3, #16
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008bc:	4b3e      	ldr	r3, [pc, #248]	; (80009b8 <MX_GPIO_Init+0x128>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a3d      	ldr	r2, [pc, #244]	; (80009b8 <MX_GPIO_Init+0x128>)
 80008c2:	f043 0320 	orr.w	r3, r3, #32
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b3b      	ldr	r3, [pc, #236]	; (80009b8 <MX_GPIO_Init+0x128>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f003 0320 	and.w	r3, r3, #32
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d4:	4b38      	ldr	r3, [pc, #224]	; (80009b8 <MX_GPIO_Init+0x128>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a37      	ldr	r2, [pc, #220]	; (80009b8 <MX_GPIO_Init+0x128>)
 80008da:	f043 0304 	orr.w	r3, r3, #4
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b35      	ldr	r3, [pc, #212]	; (80009b8 <MX_GPIO_Init+0x128>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f003 0304 	and.w	r3, r3, #4
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ec:	4b32      	ldr	r3, [pc, #200]	; (80009b8 <MX_GPIO_Init+0x128>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a31      	ldr	r2, [pc, #196]	; (80009b8 <MX_GPIO_Init+0x128>)
 80008f2:	f043 0308 	orr.w	r3, r3, #8
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b2f      	ldr	r3, [pc, #188]	; (80009b8 <MX_GPIO_Init+0x128>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0308 	and.w	r3, r3, #8
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUEPILL_LED_GPIO_Port, BLUEPILL_LED_Pin, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800090a:	482c      	ldr	r0, [pc, #176]	; (80009bc <MX_GPIO_Init+0x12c>)
 800090c:	f001 f8e7 	bl	8001ade <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GSM_POWER_ON_GPIO_Port, GSM_POWER_ON_Pin, GPIO_PIN_RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	2102      	movs	r1, #2
 8000914:	482a      	ldr	r0, [pc, #168]	; (80009c0 <MX_GPIO_Init+0x130>)
 8000916:	f001 f8e2 	bl	8001ade <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, POTS_RM_Pin|POTS_FR_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000920:	4828      	ldr	r0, [pc, #160]	; (80009c4 <MX_GPIO_Init+0x134>)
 8000922:	f001 f8dc 	bl	8001ade <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUEPILL_LED_Pin */
  GPIO_InitStruct.Pin = BLUEPILL_LED_Pin;
 8000926:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800092a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2302      	movs	r3, #2
 8000936:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUEPILL_LED_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 0310 	add.w	r3, r7, #16
 800093c:	4619      	mov	r1, r3
 800093e:	481f      	ldr	r0, [pc, #124]	; (80009bc <MX_GPIO_Init+0x12c>)
 8000940:	f000 ff3c 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pin : GSM_LPG_Pin */
  GPIO_InitStruct.Pin = GSM_LPG_Pin;
 8000944:	2301      	movs	r3, #1
 8000946:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GSM_LPG_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	4619      	mov	r1, r3
 8000956:	481a      	ldr	r0, [pc, #104]	; (80009c0 <MX_GPIO_Init+0x130>)
 8000958:	f000 ff30 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pin : GSM_POWER_ON_Pin */
  GPIO_InitStruct.Pin = GSM_POWER_ON_Pin;
 800095c:	2302      	movs	r3, #2
 800095e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	2301      	movs	r3, #1
 8000962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2302      	movs	r3, #2
 800096a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GSM_POWER_ON_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	4619      	mov	r1, r3
 8000972:	4813      	ldr	r0, [pc, #76]	; (80009c0 <MX_GPIO_Init+0x130>)
 8000974:	f000 ff22 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pin : POTS_SHK_Pin */
  GPIO_InitStruct.Pin = POTS_SHK_Pin;
 8000978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(POTS_SHK_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 0310 	add.w	r3, r7, #16
 800098a:	4619      	mov	r1, r3
 800098c:	480d      	ldr	r0, [pc, #52]	; (80009c4 <MX_GPIO_Init+0x134>)
 800098e:	f000 ff15 	bl	80017bc <HAL_GPIO_Init>

  /*Configure GPIO pins : POTS_RM_Pin POTS_FR_Pin */
  GPIO_InitStruct.Pin = POTS_RM_Pin|POTS_FR_Pin;
 8000992:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000996:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2302      	movs	r3, #2
 80009a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	4619      	mov	r1, r3
 80009aa:	4806      	ldr	r0, [pc, #24]	; (80009c4 <MX_GPIO_Init+0x134>)
 80009ac:	f000 ff06 	bl	80017bc <HAL_GPIO_Init>

}
 80009b0:	bf00      	nop
 80009b2:	3720      	adds	r7, #32
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40021000 	.word	0x40021000
 80009bc:	40011000 	.word	0x40011000
 80009c0:	40010800 	.word	0x40010800
 80009c4:	40010c00 	.word	0x40010c00

080009c8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(BLUEPILL_LED_GPIO_Port, BLUEPILL_LED_Pin);

	if(huart->Instance==USART1){
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a1d      	ldr	r2, [pc, #116]	; (8000a4c <HAL_UART_RxCpltCallback+0x84>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d124      	bne.n	8000a24 <HAL_UART_RxCpltCallback+0x5c>
		HAL_UART_Receive_IT(&huart1, &UART1_rxChar, 1);
 80009da:	2201      	movs	r2, #1
 80009dc:	491c      	ldr	r1, [pc, #112]	; (8000a50 <HAL_UART_RxCpltCallback+0x88>)
 80009de:	481d      	ldr	r0, [pc, #116]	; (8000a54 <HAL_UART_RxCpltCallback+0x8c>)
 80009e0:	f002 fcff 	bl	80033e2 <HAL_UART_Receive_IT>
		if(UART1_rxChar>='0' && UART1_rxChar<='3'){
 80009e4:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <HAL_UART_RxCpltCallback+0x88>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b2f      	cmp	r3, #47	; 0x2f
 80009ea:	d90b      	bls.n	8000a04 <HAL_UART_RxCpltCallback+0x3c>
 80009ec:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <HAL_UART_RxCpltCallback+0x88>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b33      	cmp	r3, #51	; 0x33
 80009f2:	d807      	bhi.n	8000a04 <HAL_UART_RxCpltCallback+0x3c>
			signalingFrontPanel(&mySignaling,UART1_rxChar-'0');
 80009f4:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <HAL_UART_RxCpltCallback+0x88>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	3b30      	subs	r3, #48	; 0x30
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	4619      	mov	r1, r3
 80009fe:	4816      	ldr	r0, [pc, #88]	; (8000a58 <HAL_UART_RxCpltCallback+0x90>)
 8000a00:	f000 fa14 	bl	8000e2c <signalingFrontPanel>
			}
		if(UART1_rxChar>='a' && UART1_rxChar<='b'){
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_UART_RxCpltCallback+0x88>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b60      	cmp	r3, #96	; 0x60
 8000a0a:	d90b      	bls.n	8000a24 <HAL_UART_RxCpltCallback+0x5c>
 8000a0c:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <HAL_UART_RxCpltCallback+0x88>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b62      	cmp	r3, #98	; 0x62
 8000a12:	d807      	bhi.n	8000a24 <HAL_UART_RxCpltCallback+0x5c>
			ringFrontPanel(&myRing,UART1_rxChar-'a');
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_UART_RxCpltCallback+0x88>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	3b61      	subs	r3, #97	; 0x61
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480f      	ldr	r0, [pc, #60]	; (8000a5c <HAL_UART_RxCpltCallback+0x94>)
 8000a20:	f000 f936 	bl	8000c90 <ringFrontPanel>
			}
	}
	if(huart->Instance==USART2){
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a0d      	ldr	r2, [pc, #52]	; (8000a60 <HAL_UART_RxCpltCallback+0x98>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d10a      	bne.n	8000a44 <HAL_UART_RxCpltCallback+0x7c>
		gsmUartReceiver(&myGSM, UART2_rxChar);
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <HAL_UART_RxCpltCallback+0x9c>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	4619      	mov	r1, r3
 8000a34:	480c      	ldr	r0, [pc, #48]	; (8000a68 <HAL_UART_RxCpltCallback+0xa0>)
 8000a36:	f7ff fbd4 	bl	80001e2 <gsmUartReceiver>
		HAL_UART_Receive_IT(&huart2, &UART2_rxChar, 1);
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	4909      	ldr	r1, [pc, #36]	; (8000a64 <HAL_UART_RxCpltCallback+0x9c>)
 8000a3e:	480b      	ldr	r0, [pc, #44]	; (8000a6c <HAL_UART_RxCpltCallback+0xa4>)
 8000a40:	f002 fccf 	bl	80033e2 <HAL_UART_Receive_IT>
	}

}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40013800 	.word	0x40013800
 8000a50:	20000218 	.word	0x20000218
 8000a54:	2000009c 	.word	0x2000009c
 8000a58:	20000160 	.word	0x20000160
 8000a5c:	2000021c 	.word	0x2000021c
 8000a60:	40004400 	.word	0x40004400
 8000a64:	20000178 	.word	0x20000178
 8000a68:	200001c4 	.word	0x200001c4
 8000a6c:	2000027c 	.word	0x2000027c

08000a70 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2){
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a80:	d118      	bne.n	8000ab4 <HAL_TIM_PeriodElapsedCallback+0x44>
		myTIM2Counter++;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	3301      	adds	r3, #1
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000a8c:	801a      	strh	r2, [r3, #0]
		if(myTIM2Counter>=TIM2_INTERRUPT_FREQUENCY_HZ/CALLBACK_FREQUENCY_HZ)
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	2b27      	cmp	r3, #39	; 0x27
 8000a94:	d90e      	bls.n	8000ab4 <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			//this is executes with frequency of CALLBACK_FREQUENCY_HZ
			myTIM2Counter=0;
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	801a      	strh	r2, [r3, #0]
			pulseDialingCallback(&myDialing);
 8000a9c:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000a9e:	f000 f837 	bl	8000b10 <pulseDialingCallback>
			signalingCallback(&mySignaling);
 8000aa2:	4808      	ldr	r0, [pc, #32]	; (8000ac4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000aa4:	f000 fa1e 	bl	8000ee4 <signalingCallback>
			ringCallback(&myRing);
 8000aa8:	4807      	ldr	r0, [pc, #28]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000aaa:	f000 f92d 	bl	8000d08 <ringCallback>
			gsmTimeKeeping(&myGSM);
 8000aae:	4807      	ldr	r0, [pc, #28]	; (8000acc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000ab0:	f7ff fc82 	bl	80003b8 <gsmTimeKeeping>
		}
	}
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	2000008c 	.word	0x2000008c
 8000ac0:	200002c0 	.word	0x200002c0
 8000ac4:	20000160 	.word	0x20000160
 8000ac8:	2000021c 	.word	0x2000021c
 8000acc:	200001c4 	.word	0x200001c4

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <Error_Handler+0x8>

08000ada <pulseDialingInit>:
  * @brief  initialize pulse dialing module
  * @param  pulseDialing: pointer to a structure of type pulse_dialing_machine_t. This structure contains state of the ringing module
  * @retval None
  */
void pulseDialingInit(pulse_dialing_machine_t *pulseDialing)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b083      	sub	sp, #12
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
	pulseDialing->Handset_State=HANDSET_ON_HOOK;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	72da      	strb	r2, [r3, #11]
	pulseDialing->counter=0;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2200      	movs	r2, #0
 8000aec:	731a      	strb	r2, [r3, #12]
	pulseDialing->timeSinceLastRisingSlope_milliseconds=0;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2200      	movs	r2, #0
 8000af2:	821a      	strh	r2, [r3, #16]
	pulseDialing->time_SHK_staticLevelDuration_milliseconds=0;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2200      	movs	r2, #0
 8000af8:	81da      	strh	r2, [r3, #14]
	pulseDialing->dialedDigit=-1;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	22ff      	movs	r2, #255	; 0xff
 8000afe:	749a      	strb	r2, [r3, #18]
	pulseDialing->newEventHandset=0;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2200      	movs	r2, #0
 8000b04:	74da      	strb	r2, [r3, #19]
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr

08000b10 <pulseDialingCallback>:
  * @param  pulseDialing: pointer to a structure of type pulse_dialing_machine_t. This structure contains state of the ringing module
  * @retval None
  * see //http://www.gordostuff.com/2011/08/telephone-set-function-2-to-provide.html for details of pulse dialing
  */
void pulseDialingCallback(pulse_dialing_machine_t *pulseDialing)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	GPIO_PinState SHK_CurrentLevel; 														//this is SHK signal level observed in current invocation of the callback

	SHK_CurrentLevel=HAL_GPIO_ReadPin(pulseDialing->SHK_GPIO_Port, pulseDialing->SHK_Pin);	//read in current SHK level
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	889b      	ldrh	r3, [r3, #4]
 8000b20:	4619      	mov	r1, r3
 8000b22:	4610      	mov	r0, r2
 8000b24:	f000 ffc4 	bl	8001ab0 <HAL_GPIO_ReadPin>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	73fb      	strb	r3, [r7, #15]
	//and recognize if this is continuously HIGH, LOW, rising or falling slope
	if(SHK_CurrentLevel == GPIO_PIN_SET){
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d10b      	bne.n	8000b4a <pulseDialingCallback+0x3a>
		if(pulseDialing->SHK_PreviousLevel == GPIO_PIN_SET)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	799b      	ldrb	r3, [r3, #6]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d103      	bne.n	8000b42 <pulseDialingCallback+0x32>
			pulseDialing->SHK_State=SHK_HIGH;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	729a      	strb	r2, [r3, #10]
 8000b40:	e00e      	b.n	8000b60 <pulseDialingCallback+0x50>
		else
			pulseDialing->SHK_State=SHK_SLOPE_RISING;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2202      	movs	r2, #2
 8000b46:	729a      	strb	r2, [r3, #10]
 8000b48:	e00a      	b.n	8000b60 <pulseDialingCallback+0x50>
	}
	else{
		if(pulseDialing->SHK_PreviousLevel == GPIO_PIN_SET)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	799b      	ldrb	r3, [r3, #6]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d103      	bne.n	8000b5a <pulseDialingCallback+0x4a>
			pulseDialing->SHK_State=SHK_SLOPE_FALLING;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2203      	movs	r2, #3
 8000b56:	729a      	strb	r2, [r3, #10]
 8000b58:	e002      	b.n	8000b60 <pulseDialingCallback+0x50>
		else
			pulseDialing->SHK_State=SHK_LOW;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	729a      	strb	r2, [r3, #10]
	}

	//currentLevel is stored for next invocation of this function
	pulseDialing->SHK_PreviousLevel=SHK_CurrentLevel;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	7bfa      	ldrb	r2, [r7, #15]
 8000b64:	719a      	strb	r2, [r3, #6]

	//zero timer measuring duration of a static SHK state
	if(pulseDialing->SHK_State==SHK_SLOPE_FALLING || pulseDialing->SHK_State==SHK_SLOPE_RISING){
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	7a9b      	ldrb	r3, [r3, #10]
 8000b6a:	2b03      	cmp	r3, #3
 8000b6c:	d003      	beq.n	8000b76 <pulseDialingCallback+0x66>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	7a9b      	ldrb	r3, [r3, #10]
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d103      	bne.n	8000b7e <pulseDialingCallback+0x6e>
		pulseDialing->time_SHK_staticLevelDuration_milliseconds=0;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	81da      	strh	r2, [r3, #14]
 8000b7c:	e00d      	b.n	8000b9a <pulseDialingCallback+0x8a>
	}
	else{ //measure static SHK state duration
		pulseDialing->time_SHK_staticLevelDuration_milliseconds+=(1000/pulseDialing->frequencyCallback_hertz);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	89da      	ldrh	r2, [r3, #14]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	891b      	ldrh	r3, [r3, #8]
 8000b86:	4619      	mov	r1, r3
 8000b88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8c:	fb93 f3f1 	sdiv	r3, r3, r1
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	4413      	add	r3, r2
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	81da      	strh	r2, [r3, #14]
	}

	//recognize lifting the handset and putting it back on hook
	if(pulseDialing->SHK_State==SHK_HIGH
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	7a9b      	ldrb	r3, [r3, #10]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d10e      	bne.n	8000bc0 <pulseDialingCallback+0xb0>
		&& pulseDialing->time_SHK_staticLevelDuration_milliseconds>=PULSE_DIALING_HANDSET_QUALIFICATION_MILLISECONDS
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	89db      	ldrh	r3, [r3, #14]
 8000ba6:	2bc7      	cmp	r3, #199	; 0xc7
 8000ba8:	d90a      	bls.n	8000bc0 <pulseDialingCallback+0xb0>
		&& pulseDialing->Handset_State==HANDSET_ON_HOOK){
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	7adb      	ldrb	r3, [r3, #11]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d106      	bne.n	8000bc0 <pulseDialingCallback+0xb0>
			pulseDialing->Handset_State=HANDSET_LIFTED;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	72da      	strb	r2, [r3, #11]
			pulseDialing->newEventHandset=1;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2201      	movs	r2, #1
 8000bbc:	74da      	strb	r2, [r3, #19]
 8000bbe:	e011      	b.n	8000be4 <pulseDialingCallback+0xd4>
	}
	else if(pulseDialing->SHK_State==SHK_LOW
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	7a9b      	ldrb	r3, [r3, #10]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d10d      	bne.n	8000be4 <pulseDialingCallback+0xd4>
			&& pulseDialing->time_SHK_staticLevelDuration_milliseconds>=PULSE_DIALING_HANDSET_QUALIFICATION_MILLISECONDS
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	89db      	ldrh	r3, [r3, #14]
 8000bcc:	2bc7      	cmp	r3, #199	; 0xc7
 8000bce:	d909      	bls.n	8000be4 <pulseDialingCallback+0xd4>
			&& pulseDialing->Handset_State==HANDSET_LIFTED){
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	7adb      	ldrb	r3, [r3, #11]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d105      	bne.n	8000be4 <pulseDialingCallback+0xd4>
				pulseDialing->Handset_State=HANDSET_ON_HOOK;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	72da      	strb	r2, [r3, #11]
				pulseDialing->newEventHandset=1;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2201      	movs	r2, #1
 8000be2:	74da      	strb	r2, [r3, #19]
		}

	//if handset is lifted
	if(pulseDialing->Handset_State==HANDSET_LIFTED){
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	7adb      	ldrb	r3, [r3, #11]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d131      	bne.n	8000c50 <pulseDialingCallback+0x140>
		//recognize dialing numbers
		if(pulseDialing->SHK_State==SHK_SLOPE_RISING){
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	7a9b      	ldrb	r3, [r3, #10]
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d108      	bne.n	8000c06 <pulseDialingCallback+0xf6>
			pulseDialing->counter++;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	7b1b      	ldrb	r3, [r3, #12]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	731a      	strb	r2, [r3, #12]
			pulseDialing->timeSinceLastRisingSlope_milliseconds=0;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	821a      	strh	r2, [r3, #16]
		}

		if(pulseDialing->SHK_State==SHK_HIGH && pulseDialing->counter){
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	7a9b      	ldrb	r3, [r3, #10]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d120      	bne.n	8000c50 <pulseDialingCallback+0x140>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	7b1b      	ldrb	r3, [r3, #12]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d01c      	beq.n	8000c50 <pulseDialingCallback+0x140>
			pulseDialing->timeSinceLastRisingSlope_milliseconds+=(1000/pulseDialing->frequencyCallback_hertz);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	8a1a      	ldrh	r2, [r3, #16]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	891b      	ldrh	r3, [r3, #8]
 8000c1e:	4619      	mov	r1, r3
 8000c20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c24:	fb93 f3f1 	sdiv	r3, r3, r1
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	4413      	add	r3, r2
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	821a      	strh	r2, [r3, #16]
			if(pulseDialing->timeSinceLastRisingSlope_milliseconds>PULSE_DIALING_DIGIT_QUALIFICATION_MILLISECONDS){
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	8a1b      	ldrh	r3, [r3, #16]
 8000c36:	2b64      	cmp	r3, #100	; 0x64
 8000c38:	d90a      	bls.n	8000c50 <pulseDialingCallback+0x140>
				//a digit has been completely dialed and is stored in counter here
				//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
				pulseDialing->dialedDigit=pulseDialing->counter;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	7b1b      	ldrb	r3, [r3, #12]
 8000c3e:	b25a      	sxtb	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	749a      	strb	r2, [r3, #18]
				pulseDialing->counter=0;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2200      	movs	r2, #0
 8000c48:	731a      	strb	r2, [r3, #12]
				pulseDialing->timeSinceLastRisingSlope_milliseconds=0;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	821a      	strh	r2, [r3, #16]
			}
		}
	}
}
 8000c50:	bf00      	nop
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <ringInit>:
  * @brief  initialize ringing module
  * @param  ring: pointer to a structure of type ringer_t. This structure contains state of the ringing module
  * @retval None
  */
void ringInit(ringer_t *ring)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	ring->callBackCounterBurst=0;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	825a      	strh	r2, [r3, #18]
	HAL_GPIO_WritePin(ring->FR_GPIO_Port, ring->FR_Pin, GPIO_PIN_RESET);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6858      	ldr	r0, [r3, #4]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	891b      	ldrh	r3, [r3, #8]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	4619      	mov	r1, r3
 8000c72:	f000 ff34 	bl	8001ade <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ring->RM_GPIO_Port, ring->RM_Pin, GPIO_PIN_RESET);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	68d8      	ldr	r0, [r3, #12]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	8a1b      	ldrh	r3, [r3, #16]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	4619      	mov	r1, r3
 8000c82:	f000 ff2c 	bl	8001ade <HAL_GPIO_WritePin>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <ringFrontPanel>:


void ringFrontPanel(ringer_t *ring, uint8_t ringing)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	70fb      	strb	r3, [r7, #3]
	static uint8_t previousRequestedRinging=0;
	if(ringing!=previousRequestedRinging){
 8000c9c:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <ringFrontPanel+0x74>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	78fa      	ldrb	r2, [r7, #3]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d025      	beq.n	8000cf2 <ringFrontPanel+0x62>
		switch(ringing){
 8000ca6:	78fb      	ldrb	r3, [r7, #3]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d113      	bne.n	8000cd4 <ringFrontPanel+0x44>
		case 0:
			ring->state=RINGER_OFF;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	759a      	strb	r2, [r3, #22]
			HAL_GPIO_WritePin(ring->FR_GPIO_Port, ring->FR_Pin, GPIO_PIN_RESET); //ensure line goes into default polarity
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6858      	ldr	r0, [r3, #4]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	891b      	ldrh	r3, [r3, #8]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f000 ff0e 	bl	8001ade <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ring->RM_GPIO_Port, ring->RM_Pin, GPIO_PIN_RESET); //disable ringing mode in the KS0835 module
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	68d8      	ldr	r0, [r3, #12]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	8a1b      	ldrh	r3, [r3, #16]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f000 ff06 	bl	8001ade <HAL_GPIO_WritePin>
			break;
 8000cd2:	e00f      	b.n	8000cf4 <ringFrontPanel+0x64>
		case 1:
		default:
			ring->state=RINGER_RINGING_BURST;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	759a      	strb	r2, [r3, #22]
			ring->callBackCounterDuration_milliseconds=0;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	829a      	strh	r2, [r3, #20]
			HAL_GPIO_WritePin(ring->RM_GPIO_Port, ring->RM_Pin, GPIO_PIN_SET);// enable ringing mode
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	68d8      	ldr	r0, [r3, #12]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	8a1b      	ldrh	r3, [r3, #16]
 8000ce8:	2201      	movs	r2, #1
 8000cea:	4619      	mov	r1, r3
 8000cec:	f000 fef7 	bl	8001ade <HAL_GPIO_WritePin>
			break;
 8000cf0:	e000      	b.n	8000cf4 <ringFrontPanel+0x64>
		}
	}
 8000cf2:	bf00      	nop
	previousRequestedRinging=ringing;
 8000cf4:	4a03      	ldr	r2, [pc, #12]	; (8000d04 <ringFrontPanel+0x74>)
 8000cf6:	78fb      	ldrb	r3, [r7, #3]
 8000cf8:	7013      	strb	r3, [r2, #0]
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	2000008e 	.word	0x2000008e

08000d08 <ringCallback>:
  * @brief  callback for ringer module - This function must be called with frequency specified in ring->callBackFrequency
  * @param  ring: pointer to a structure of type ringer_t. This structure contains state of the ringing module
  * @retval None
  */
void ringCallback(ringer_t *ring)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	//generating ringing base frequency
	ring->callBackCounterBurst++;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	8a5b      	ldrh	r3, [r3, #18]
 8000d14:	3301      	adds	r3, #1
 8000d16:	b29a      	uxth	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	825a      	strh	r2, [r3, #18]
	if((ring->callBackCounterBurst)>=((ring->callBackFrequency)/(2*RINGING_BURST_FREQUENCY))) //two times because there are two slopes in one period, this way generated frequency will be really expressed in Hz
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	8a5a      	ldrh	r2, [r3, #18]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	4940      	ldr	r1, [pc, #256]	; (8000e28 <ringCallback+0x120>)
 8000d26:	fba1 1303 	umull	r1, r3, r1, r3
 8000d2a:	091b      	lsrs	r3, r3, #4
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d373      	bcc.n	8000e1a <ringCallback+0x112>
	{
		ring->callBackCounterBurst=0;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	825a      	strh	r2, [r3, #18]
		ring->callBackCounterDuration_milliseconds+=1000/((ring->callBackFrequency)/(2*RINGING_BURST_FREQUENCY));
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	8a9a      	ldrh	r2, [r3, #20]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	4939      	ldr	r1, [pc, #228]	; (8000e28 <ringCallback+0x120>)
 8000d42:	fba1 1303 	umull	r1, r3, r1, r3
 8000d46:	091b      	lsrs	r3, r3, #4
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d50:	fb93 f3f1 	sdiv	r3, r3, r1
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	4413      	add	r3, r2
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	829a      	strh	r2, [r3, #20]
		switch(ring->state)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	7d9b      	ldrb	r3, [r3, #22]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d002      	beq.n	8000d6c <ringCallback+0x64>
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d02e      	beq.n	8000dc8 <ringCallback+0xc0>
 8000d6a:	e042      	b.n	8000df2 <ringCallback+0xea>
			{
				case RINGER_RINGING_BURST:
					//TODO: I don't know why generated times are not expressed in miliseconds
					if(ring->callBackCounterDuration_milliseconds<10000)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	8a9b      	ldrh	r3, [r3, #20]
 8000d70:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d810      	bhi.n	8000d9a <ringCallback+0x92>
					{
						HAL_GPIO_WritePin(ring->RM_GPIO_Port, ring->RM_Pin, GPIO_PIN_SET);// ringing mode should be already enabled here but let's make sure
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	68d8      	ldr	r0, [r3, #12]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	8a1b      	ldrh	r3, [r3, #16]
 8000d80:	2201      	movs	r2, #1
 8000d82:	4619      	mov	r1, r3
 8000d84:	f000 feab 	bl	8001ade <HAL_GPIO_WritePin>
						HAL_GPIO_TogglePin(ring->FR_GPIO_Port, ring->FR_Pin); //toggle FR pin - this generates a tone in the attached telephone
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685a      	ldr	r2, [r3, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	891b      	ldrh	r3, [r3, #8]
 8000d90:	4619      	mov	r1, r3
 8000d92:	4610      	mov	r0, r2
 8000d94:	f000 febb 	bl	8001b0e <HAL_GPIO_TogglePin>
						HAL_GPIO_WritePin(ring->FR_GPIO_Port, ring->FR_Pin, GPIO_PIN_RESET); //ensure FR pin goes back to its default state
						HAL_GPIO_WritePin(ring->RM_GPIO_Port, ring->RM_Pin, GPIO_PIN_RESET); //disable ringing mode in the KS0835 moduleHAL_GPIO_WritePin(ring->FR_GPIO_Port, ring->FR_Pin, GPIO_PIN_RESET);
						ring->callBackCounterDuration_milliseconds=0;
						ring->state=RINGER_RINGING_PAUSE;
					}
					break;
 8000d98:	e042      	b.n	8000e20 <ringCallback+0x118>
						HAL_GPIO_WritePin(ring->FR_GPIO_Port, ring->FR_Pin, GPIO_PIN_RESET); //ensure FR pin goes back to its default state
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6858      	ldr	r0, [r3, #4]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	891b      	ldrh	r3, [r3, #8]
 8000da2:	2200      	movs	r2, #0
 8000da4:	4619      	mov	r1, r3
 8000da6:	f000 fe9a 	bl	8001ade <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(ring->RM_GPIO_Port, ring->RM_Pin, GPIO_PIN_RESET); //disable ringing mode in the KS0835 moduleHAL_GPIO_WritePin(ring->FR_GPIO_Port, ring->FR_Pin, GPIO_PIN_RESET);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	68d8      	ldr	r0, [r3, #12]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	8a1b      	ldrh	r3, [r3, #16]
 8000db2:	2200      	movs	r2, #0
 8000db4:	4619      	mov	r1, r3
 8000db6:	f000 fe92 	bl	8001ade <HAL_GPIO_WritePin>
						ring->callBackCounterDuration_milliseconds=0;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	829a      	strh	r2, [r3, #20]
						ring->state=RINGER_RINGING_PAUSE;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	759a      	strb	r2, [r3, #22]
					break;
 8000dc6:	e02b      	b.n	8000e20 <ringCallback+0x118>
				case RINGER_RINGING_PAUSE:
					if(ring->callBackCounterDuration_milliseconds>10000)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	8a9b      	ldrh	r3, [r3, #20]
 8000dcc:	f242 7210 	movw	r2, #10000	; 0x2710
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d924      	bls.n	8000e1e <ringCallback+0x116>
						{
							ring->callBackCounterDuration_milliseconds=0;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	829a      	strh	r2, [r3, #20]
							ring->state=RINGER_RINGING_BURST;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2201      	movs	r2, #1
 8000dde:	759a      	strb	r2, [r3, #22]
							HAL_GPIO_WritePin(ring->RM_GPIO_Port, ring->RM_Pin, GPIO_PIN_SET);// enable ringing mode
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68d8      	ldr	r0, [r3, #12]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	8a1b      	ldrh	r3, [r3, #16]
 8000de8:	2201      	movs	r2, #1
 8000dea:	4619      	mov	r1, r3
 8000dec:	f000 fe77 	bl	8001ade <HAL_GPIO_WritePin>
						}
					break;
 8000df0:	e015      	b.n	8000e1e <ringCallback+0x116>
				case RINGER_OFF:
				default:
					HAL_GPIO_WritePin(ring->FR_GPIO_Port, ring->FR_Pin, GPIO_PIN_RESET); //ensure line goes into default polarity
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6858      	ldr	r0, [r3, #4]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	891b      	ldrh	r3, [r3, #8]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f000 fe6e 	bl	8001ade <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(ring->RM_GPIO_Port, ring->RM_Pin, GPIO_PIN_RESET); //disable ringing mode in the KS0835 module
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	68d8      	ldr	r0, [r3, #12]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	8a1b      	ldrh	r3, [r3, #16]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f000 fe66 	bl	8001ade <HAL_GPIO_WritePin>
					ring->callBackCounterDuration_milliseconds=0;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	829a      	strh	r2, [r3, #20]
					break;
 8000e18:	e002      	b.n	8000e20 <ringCallback+0x118>
			}
	}
 8000e1a:	bf00      	nop
 8000e1c:	e000      	b.n	8000e20 <ringCallback+0x118>
					break;
 8000e1e:	bf00      	nop
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	51eb851f 	.word	0x51eb851f

08000e2c <signalingFrontPanel>:
  * @brief  "public" interface for changing signalling pattern
  * @param  signaling: pointer to a structure of type signaling_t.
  * @param pattern - requested pattern: 0 for no tone, 1 for continuous tone, 2 for dialing tone etc...
  * @retval None
  */
void signalingFrontPanel(signaling_t *signaling, uint8_t pattern){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	70fb      	strb	r3, [r7, #3]
	static uint8_t previousRequestedPattern=0;

	if(pattern!=previousRequestedPattern){
 8000e38:	4b29      	ldr	r3, [pc, #164]	; (8000ee0 <signalingFrontPanel+0xb4>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	78fa      	ldrb	r2, [r7, #3]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d044      	beq.n	8000ecc <signalingFrontPanel+0xa0>
		switch(pattern)
 8000e42:	78fb      	ldrb	r3, [r7, #3]
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d843      	bhi.n	8000ed0 <signalingFrontPanel+0xa4>
 8000e48:	a201      	add	r2, pc, #4	; (adr r2, 8000e50 <signalingFrontPanel+0x24>)
 8000e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4e:	bf00      	nop
 8000e50:	08000e61 	.word	0x08000e61
 8000e54:	08000e75 	.word	0x08000e75
 8000e58:	08000e89 	.word	0x08000e89
 8000e5c:	08000ea9 	.word	0x08000ea9
			{
			case 0: // quiet
				signaling->state=SIGNALING_INTERNAL_STATE_OFF;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	741a      	strb	r2, [r3, #16]
				HAL_TIM_PWM_Stop(signaling->timer, TIM_CHANNEL_4); 				//stop generating tone
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	210c      	movs	r1, #12
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f001 fc11 	bl	8002694 <HAL_TIM_PWM_Stop>
				break;
 8000e72:	e02e      	b.n	8000ed2 <signalingFrontPanel+0xa6>
			case 1: // continuous tone = line ready
				signaling->state=SIGNALING_INTERNAL_STATE_CONTINUOUS;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2201      	movs	r2, #1
 8000e78:	741a      	strb	r2, [r3, #16]
				HAL_TIM_PWM_Start(signaling->timer, TIM_CHANNEL_4);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	695b      	ldr	r3, [r3, #20]
 8000e7e:	210c      	movs	r1, #12
 8000e80:	4618      	mov	r0, r3
 8000e82:	f001 fb6b 	bl	800255c <HAL_TIM_PWM_Start>
				break;
 8000e86:	e024      	b.n	8000ed2 <signalingFrontPanel+0xa6>
			case 2: // pulsed tone = number dialing
				signaling->toneOnDuration_milliseconds=200;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	22c8      	movs	r2, #200	; 0xc8
 8000e8c:	815a      	strh	r2, [r3, #10]
				signaling->toneOffDuration_milliseconds=200;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	22c8      	movs	r2, #200	; 0xc8
 8000e92:	819a      	strh	r2, [r3, #12]
				signaling->state=SIGNALING_INTERNAL_STATE_TONE;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2202      	movs	r2, #2
 8000e98:	741a      	strb	r2, [r3, #16]
				HAL_TIM_PWM_Start(signaling->timer, TIM_CHANNEL_4);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	210c      	movs	r1, #12
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f001 fb5b 	bl	800255c <HAL_TIM_PWM_Start>
				break;
 8000ea6:	e014      	b.n	8000ed2 <signalingFrontPanel+0xa6>
			case 3: // ringing
				signaling->toneOnDuration_milliseconds=1000;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eae:	815a      	strh	r2, [r3, #10]
				signaling->toneOffDuration_milliseconds=2000;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000eb6:	819a      	strh	r2, [r3, #12]
				signaling->state=SIGNALING_INTERNAL_STATE_TONE;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2202      	movs	r2, #2
 8000ebc:	741a      	strb	r2, [r3, #16]
				HAL_TIM_PWM_Start(signaling->timer, TIM_CHANNEL_4);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	210c      	movs	r1, #12
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f001 fb49 	bl	800255c <HAL_TIM_PWM_Start>
				break;
 8000eca:	e002      	b.n	8000ed2 <signalingFrontPanel+0xa6>
			default:

				break;
			}
	}
 8000ecc:	bf00      	nop
 8000ece:	e000      	b.n	8000ed2 <signalingFrontPanel+0xa6>
				break;
 8000ed0:	bf00      	nop

	previousRequestedPattern=pattern;
 8000ed2:	4a03      	ldr	r2, [pc, #12]	; (8000ee0 <signalingFrontPanel+0xb4>)
 8000ed4:	78fb      	ldrb	r3, [r7, #3]
 8000ed6:	7013      	strb	r3, [r2, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	2000008f 	.word	0x2000008f

08000ee4 <signalingCallback>:

void signalingCallback(signaling_t *signaling){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	signaling->currentStateDuration_milliseconds+=1000/signaling->frequencyCallback_hertz;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	89da      	ldrh	r2, [r3, #14]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ef8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	4413      	add	r3, r2
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	81da      	strh	r2, [r3, #14]

	switch(signaling->state)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	7c1b      	ldrb	r3, [r3, #16]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d002      	beq.n	8000f14 <signalingCallback+0x30>
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	d013      	beq.n	8000f3a <signalingCallback+0x56>
 8000f12:	e025      	b.n	8000f60 <signalingCallback+0x7c>
	{
	case SIGNALING_INTERNAL_STATE_TONE: //in this state a tone is being generated
		if(signaling->currentStateDuration_milliseconds>=signaling->toneOnDuration_milliseconds){ //if the tone has been generated long enough
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	89da      	ldrh	r2, [r3, #14]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	895b      	ldrh	r3, [r3, #10]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d323      	bcc.n	8000f68 <signalingCallback+0x84>
			HAL_TIM_PWM_Stop(signaling->timer, TIM_CHANNEL_4); 				//stop generating tone
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	695b      	ldr	r3, [r3, #20]
 8000f24:	210c      	movs	r1, #12
 8000f26:	4618      	mov	r0, r3
 8000f28:	f001 fbb4 	bl	8002694 <HAL_TIM_PWM_Stop>
			signaling->state=SIGNALING_INTERNAL_STATE_PAUSE;							//change state to SIGNALING_STATE_PASUE
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2203      	movs	r2, #3
 8000f30:	741a      	strb	r2, [r3, #16]
			signaling->currentStateDuration_milliseconds=0; 				//reset counter
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	81da      	strh	r2, [r3, #14]
			}

		break;
 8000f38:	e016      	b.n	8000f68 <signalingCallback+0x84>
	case SIGNALING_INTERNAL_STATE_PAUSE:
		if(signaling->currentStateDuration_milliseconds>=signaling->toneOffDuration_milliseconds){ //if the pause has been generated long enough
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	89da      	ldrh	r2, [r3, #14]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	899b      	ldrh	r3, [r3, #12]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d312      	bcc.n	8000f6c <signalingCallback+0x88>
			HAL_TIM_PWM_Start(signaling->timer, TIM_CHANNEL_4); 			//start generating tone
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	210c      	movs	r1, #12
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f001 fb05 	bl	800255c <HAL_TIM_PWM_Start>
			signaling->state=SIGNALING_INTERNAL_STATE_TONE;							//change state to SIGNALING_STATE_PASUE
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2202      	movs	r2, #2
 8000f56:	741a      	strb	r2, [r3, #16]
			signaling->currentStateDuration_milliseconds=0; 				//reset counter
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	81da      	strh	r2, [r3, #14]
			}
		break;
 8000f5e:	e005      	b.n	8000f6c <signalingCallback+0x88>
	case SIGNALING_INTERNAL_STATE_CONTINUOUS:
	case SIGNALING_INTERNAL_STATE_OFF:
	default:
		signaling->currentStateDuration_milliseconds=0;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	81da      	strh	r2, [r3, #14]
		break;
 8000f66:	e002      	b.n	8000f6e <signalingCallback+0x8a>
		break;
 8000f68:	bf00      	nop
 8000f6a:	e000      	b.n	8000f6e <signalingCallback+0x8a>
		break;
 8000f6c:	bf00      	nop
	}
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <signalingInit>:


//currently this function assumes that PWM channel 4 is used
//it is not reconfigurable on the fly for other PWM channels
void signalingInit(signaling_t *signaling){
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b084      	sub	sp, #16
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]

	uint32_t psc; //psc is prescaler value needed for PWM channel to generate required frequency
	uint16_t ccr; //ccr is defining duty cycle of generated PWM

	psc=(signaling->fclk_hertz)/(1023*(signaling->toneFrequency_hertz));	//calculate necessary prescaler value
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685a      	ldr	r2, [r3, #4]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	891b      	ldrh	r3, [r3, #8]
 8000f86:	4619      	mov	r1, r3
 8000f88:	460b      	mov	r3, r1
 8000f8a:	029b      	lsls	r3, r3, #10
 8000f8c:	1a5b      	subs	r3, r3, r1
 8000f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f92:	60fb      	str	r3, [r7, #12]
	if(psc<UINT16_MAX){ //timer can accept only 16 bit results
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d812      	bhi.n	8000fc4 <signalingInit+0x4e>
		ccr=512;
 8000f9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fa2:	817b      	strh	r3, [r7, #10]
		signaling->timer->Instance->PSC=psc;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	629a      	str	r2, [r3, #40]	; 0x28
		signaling->timer->Instance->CCR4=ccr; //50% duty cycle of generated square signal
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	897a      	ldrh	r2, [r7, #10]
 8000fb6:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_PWM_Start(signaling->timer, TIM_CHANNEL_4);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	210c      	movs	r1, #12
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f001 facc 	bl	800255c <HAL_TIM_PWM_Start>
		//return 0;
	}
	//return 1;
}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <HAL_MspInit+0x5c>)
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	4a14      	ldr	r2, [pc, #80]	; (8001028 <HAL_MspInit+0x5c>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6193      	str	r3, [r2, #24]
 8000fde:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_MspInit+0x5c>)
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <HAL_MspInit+0x5c>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <HAL_MspInit+0x5c>)
 8000ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	61d3      	str	r3, [r2, #28]
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <HAL_MspInit+0x5c>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_MspInit+0x60>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <HAL_MspInit+0x60>)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101e:	bf00      	nop
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr
 8001028:	40021000 	.word	0x40021000
 800102c:	40010000 	.word	0x40010000

08001030 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001040:	d114      	bne.n	800106c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <HAL_TIM_Base_MspInit+0x68>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	4a14      	ldr	r2, [pc, #80]	; (8001098 <HAL_TIM_Base_MspInit+0x68>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	61d3      	str	r3, [r2, #28]
 800104e:	4b12      	ldr	r3, [pc, #72]	; (8001098 <HAL_TIM_Base_MspInit+0x68>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2100      	movs	r1, #0
 800105e:	201c      	movs	r0, #28
 8001060:	f000 fac5 	bl	80015ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001064:	201c      	movs	r0, #28
 8001066:	f000 fade 	bl	8001626 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800106a:	e010      	b.n	800108e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0a      	ldr	r2, [pc, #40]	; (800109c <HAL_TIM_Base_MspInit+0x6c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d10b      	bne.n	800108e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <HAL_TIM_Base_MspInit+0x68>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	4a07      	ldr	r2, [pc, #28]	; (8001098 <HAL_TIM_Base_MspInit+0x68>)
 800107c:	f043 0302 	orr.w	r3, r3, #2
 8001080:	61d3      	str	r3, [r2, #28]
 8001082:	4b05      	ldr	r3, [pc, #20]	; (8001098 <HAL_TIM_Base_MspInit+0x68>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
}
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40021000 	.word	0x40021000
 800109c:	40000400 	.word	0x40000400

080010a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a0f      	ldr	r2, [pc, #60]	; (80010f8 <HAL_TIM_MspPostInit+0x58>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d117      	bne.n	80010f0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <HAL_TIM_MspPostInit+0x5c>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a0d      	ldr	r2, [pc, #52]	; (80010fc <HAL_TIM_MspPostInit+0x5c>)
 80010c6:	f043 0308 	orr.w	r3, r3, #8
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_TIM_MspPostInit+0x5c>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = AU_PWM_Pin;
 80010d8:	2302      	movs	r3, #2
 80010da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	2302      	movs	r3, #2
 80010de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2302      	movs	r3, #2
 80010e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AU_PWM_GPIO_Port, &GPIO_InitStruct);
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	4619      	mov	r1, r3
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <HAL_TIM_MspPostInit+0x60>)
 80010ec:	f000 fb66 	bl	80017bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80010f0:	bf00      	nop
 80010f2:	3720      	adds	r7, #32
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40000400 	.word	0x40000400
 80010fc:	40021000 	.word	0x40021000
 8001100:	40010c00 	.word	0x40010c00

08001104 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0318 	add.w	r3, r7, #24
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a3f      	ldr	r2, [pc, #252]	; (800121c <HAL_UART_MspInit+0x118>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d13a      	bne.n	800119a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001124:	4b3e      	ldr	r3, [pc, #248]	; (8001220 <HAL_UART_MspInit+0x11c>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a3d      	ldr	r2, [pc, #244]	; (8001220 <HAL_UART_MspInit+0x11c>)
 800112a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b3b      	ldr	r3, [pc, #236]	; (8001220 <HAL_UART_MspInit+0x11c>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113c:	4b38      	ldr	r3, [pc, #224]	; (8001220 <HAL_UART_MspInit+0x11c>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a37      	ldr	r2, [pc, #220]	; (8001220 <HAL_UART_MspInit+0x11c>)
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b35      	ldr	r3, [pc, #212]	; (8001220 <HAL_UART_MspInit+0x11c>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001154:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 0318 	add.w	r3, r7, #24
 8001166:	4619      	mov	r1, r3
 8001168:	482e      	ldr	r0, [pc, #184]	; (8001224 <HAL_UART_MspInit+0x120>)
 800116a:	f000 fb27 	bl	80017bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800116e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	f107 0318 	add.w	r3, r7, #24
 8001180:	4619      	mov	r1, r3
 8001182:	4828      	ldr	r0, [pc, #160]	; (8001224 <HAL_UART_MspInit+0x120>)
 8001184:	f000 fb1a 	bl	80017bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	2100      	movs	r1, #0
 800118c:	2025      	movs	r0, #37	; 0x25
 800118e:	f000 fa2e 	bl	80015ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001192:	2025      	movs	r0, #37	; 0x25
 8001194:	f000 fa47 	bl	8001626 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001198:	e03c      	b.n	8001214 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a22      	ldr	r2, [pc, #136]	; (8001228 <HAL_UART_MspInit+0x124>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d137      	bne.n	8001214 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011a4:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <HAL_UART_MspInit+0x11c>)
 80011a6:	69db      	ldr	r3, [r3, #28]
 80011a8:	4a1d      	ldr	r2, [pc, #116]	; (8001220 <HAL_UART_MspInit+0x11c>)
 80011aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ae:	61d3      	str	r3, [r2, #28]
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <HAL_UART_MspInit+0x11c>)
 80011b2:	69db      	ldr	r3, [r3, #28]
 80011b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <HAL_UART_MspInit+0x11c>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a17      	ldr	r2, [pc, #92]	; (8001220 <HAL_UART_MspInit+0x11c>)
 80011c2:	f043 0304 	orr.w	r3, r3, #4
 80011c6:	6193      	str	r3, [r2, #24]
 80011c8:	4b15      	ldr	r3, [pc, #84]	; (8001220 <HAL_UART_MspInit+0x11c>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011d4:	2304      	movs	r3, #4
 80011d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e0:	f107 0318 	add.w	r3, r7, #24
 80011e4:	4619      	mov	r1, r3
 80011e6:	480f      	ldr	r0, [pc, #60]	; (8001224 <HAL_UART_MspInit+0x120>)
 80011e8:	f000 fae8 	bl	80017bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011ec:	2308      	movs	r3, #8
 80011ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f8:	f107 0318 	add.w	r3, r7, #24
 80011fc:	4619      	mov	r1, r3
 80011fe:	4809      	ldr	r0, [pc, #36]	; (8001224 <HAL_UART_MspInit+0x120>)
 8001200:	f000 fadc 	bl	80017bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001204:	2200      	movs	r2, #0
 8001206:	2100      	movs	r1, #0
 8001208:	2026      	movs	r0, #38	; 0x26
 800120a:	f000 f9f0 	bl	80015ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800120e:	2026      	movs	r0, #38	; 0x26
 8001210:	f000 fa09 	bl	8001626 <HAL_NVIC_EnableIRQ>
}
 8001214:	bf00      	nop
 8001216:	3728      	adds	r7, #40	; 0x28
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40013800 	.word	0x40013800
 8001220:	40021000 	.word	0x40021000
 8001224:	40010800 	.word	0x40010800
 8001228:	40004400 	.word	0x40004400

0800122c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <NMI_Handler+0x4>

08001232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <HardFault_Handler+0x4>

08001238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <MemManage_Handler+0x4>

0800123e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <BusFault_Handler+0x4>

08001244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <UsageFault_Handler+0x4>

0800124a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr

08001256 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr

08001262 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr

0800126e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001272:	f000 f8c9 	bl	8001408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001280:	4802      	ldr	r0, [pc, #8]	; (800128c <TIM2_IRQHandler+0x10>)
 8001282:	f001 fa6b 	bl	800275c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000234 	.word	0x20000234

08001290 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <USART1_IRQHandler+0x10>)
 8001296:	f002 f8d5 	bl	8003444 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	2000009c 	.word	0x2000009c

080012a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012a8:	4802      	ldr	r0, [pc, #8]	; (80012b4 <USART2_IRQHandler+0x10>)
 80012aa:	f002 f8cb 	bl	8003444 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000027c 	.word	0x2000027c

080012b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c0:	4a14      	ldr	r2, [pc, #80]	; (8001314 <_sbrk+0x5c>)
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <_sbrk+0x60>)
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012cc:	4b13      	ldr	r3, [pc, #76]	; (800131c <_sbrk+0x64>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d102      	bne.n	80012da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <_sbrk+0x64>)
 80012d6:	4a12      	ldr	r2, [pc, #72]	; (8001320 <_sbrk+0x68>)
 80012d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <_sbrk+0x64>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d207      	bcs.n	80012f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012e8:	f002 fc8a 	bl	8003c00 <__errno>
 80012ec:	4603      	mov	r3, r0
 80012ee:	220c      	movs	r2, #12
 80012f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295
 80012f6:	e009      	b.n	800130c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <_sbrk+0x64>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012fe:	4b07      	ldr	r3, [pc, #28]	; (800131c <_sbrk+0x64>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	4a05      	ldr	r2, [pc, #20]	; (800131c <_sbrk+0x64>)
 8001308:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800130a:	68fb      	ldr	r3, [r7, #12]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20002800 	.word	0x20002800
 8001318:	00000400 	.word	0x00000400
 800131c:	20000090 	.word	0x20000090
 8001320:	200002e8 	.word	0x200002e8

08001324 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001330:	480c      	ldr	r0, [pc, #48]	; (8001364 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001332:	490d      	ldr	r1, [pc, #52]	; (8001368 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001334:	4a0d      	ldr	r2, [pc, #52]	; (800136c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001338:	e002      	b.n	8001340 <LoopCopyDataInit>

0800133a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800133c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133e:	3304      	adds	r3, #4

08001340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001344:	d3f9      	bcc.n	800133a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001348:	4c0a      	ldr	r4, [pc, #40]	; (8001374 <LoopFillZerobss+0x22>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800134c:	e001      	b.n	8001352 <LoopFillZerobss>

0800134e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001350:	3204      	adds	r2, #4

08001352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001354:	d3fb      	bcc.n	800134e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001356:	f7ff ffe5 	bl	8001324 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800135a:	f002 fc57 	bl	8003c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800135e:	f7ff f859 	bl	8000414 <main>
  bx lr
 8001362:	4770      	bx	lr
  ldr r0, =_sdata
 8001364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001368:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800136c:	08004604 	.word	0x08004604
  ldr r2, =_sbss
 8001370:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001374:	200002e8 	.word	0x200002e8

08001378 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001378:	e7fe      	b.n	8001378 <ADC1_2_IRQHandler>
	...

0800137c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001380:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <HAL_Init+0x28>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a07      	ldr	r2, [pc, #28]	; (80013a4 <HAL_Init+0x28>)
 8001386:	f043 0310 	orr.w	r3, r3, #16
 800138a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138c:	2003      	movs	r0, #3
 800138e:	f000 f923 	bl	80015d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001392:	200f      	movs	r0, #15
 8001394:	f000 f808 	bl	80013a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001398:	f7ff fe18 	bl	8000fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40022000 	.word	0x40022000

080013a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_InitTick+0x54>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_InitTick+0x58>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013be:	fbb3 f3f1 	udiv	r3, r3, r1
 80013c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f93b 	bl	8001642 <HAL_SYSTICK_Config>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00e      	b.n	80013f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b0f      	cmp	r3, #15
 80013da:	d80a      	bhi.n	80013f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013dc:	2200      	movs	r2, #0
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	f000 f903 	bl	80015ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e8:	4a06      	ldr	r2, [pc, #24]	; (8001404 <HAL_InitTick+0x5c>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e000      	b.n	80013f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000000 	.word	0x20000000
 8001400:	20000008 	.word	0x20000008
 8001404:	20000004 	.word	0x20000004

08001408 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <HAL_IncTick+0x1c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	4b05      	ldr	r3, [pc, #20]	; (8001428 <HAL_IncTick+0x20>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4413      	add	r3, r2
 8001418:	4a03      	ldr	r2, [pc, #12]	; (8001428 <HAL_IncTick+0x20>)
 800141a:	6013      	str	r3, [r2, #0]
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	20000008 	.word	0x20000008
 8001428:	200002d4 	.word	0x200002d4

0800142c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return uwTick;
 8001430:	4b02      	ldr	r3, [pc, #8]	; (800143c <HAL_GetTick+0x10>)
 8001432:	681b      	ldr	r3, [r3, #0]
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	200002d4 	.word	0x200002d4

08001440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800145c:	4013      	ands	r3, r2
 800145e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800146c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001472:	4a04      	ldr	r2, [pc, #16]	; (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	60d3      	str	r3, [r2, #12]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <__NVIC_GetPriorityGrouping+0x18>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	f003 0307 	and.w	r3, r3, #7
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	db0b      	blt.n	80014ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	f003 021f 	and.w	r2, r3, #31
 80014bc:	4906      	ldr	r1, [pc, #24]	; (80014d8 <__NVIC_EnableIRQ+0x34>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	095b      	lsrs	r3, r3, #5
 80014c4:	2001      	movs	r0, #1
 80014c6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	e000e100 	.word	0xe000e100

080014dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	6039      	str	r1, [r7, #0]
 80014e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	db0a      	blt.n	8001506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	490c      	ldr	r1, [pc, #48]	; (8001528 <__NVIC_SetPriority+0x4c>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	0112      	lsls	r2, r2, #4
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	440b      	add	r3, r1
 8001500:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001504:	e00a      	b.n	800151c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4908      	ldr	r1, [pc, #32]	; (800152c <__NVIC_SetPriority+0x50>)
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	3b04      	subs	r3, #4
 8001514:	0112      	lsls	r2, r2, #4
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	440b      	add	r3, r1
 800151a:	761a      	strb	r2, [r3, #24]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000e100 	.word	0xe000e100
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001530:	b480      	push	{r7}
 8001532:	b089      	sub	sp, #36	; 0x24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f1c3 0307 	rsb	r3, r3, #7
 800154a:	2b04      	cmp	r3, #4
 800154c:	bf28      	it	cs
 800154e:	2304      	movcs	r3, #4
 8001550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3304      	adds	r3, #4
 8001556:	2b06      	cmp	r3, #6
 8001558:	d902      	bls.n	8001560 <NVIC_EncodePriority+0x30>
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3b03      	subs	r3, #3
 800155e:	e000      	b.n	8001562 <NVIC_EncodePriority+0x32>
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	f04f 32ff 	mov.w	r2, #4294967295
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43da      	mvns	r2, r3
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	401a      	ands	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001578:	f04f 31ff 	mov.w	r1, #4294967295
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	fa01 f303 	lsl.w	r3, r1, r3
 8001582:	43d9      	mvns	r1, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	4313      	orrs	r3, r2
         );
}
 800158a:	4618      	mov	r0, r3
 800158c:	3724      	adds	r7, #36	; 0x24
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr

08001594 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015a4:	d301      	bcc.n	80015aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015a6:	2301      	movs	r3, #1
 80015a8:	e00f      	b.n	80015ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <SysTick_Config+0x40>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015b2:	210f      	movs	r1, #15
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295
 80015b8:	f7ff ff90 	bl	80014dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <SysTick_Config+0x40>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c2:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <SysTick_Config+0x40>)
 80015c4:	2207      	movs	r2, #7
 80015c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	e000e010 	.word	0xe000e010

080015d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff ff2d 	bl	8001440 <__NVIC_SetPriorityGrouping>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b086      	sub	sp, #24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001600:	f7ff ff42 	bl	8001488 <__NVIC_GetPriorityGrouping>
 8001604:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	6978      	ldr	r0, [r7, #20]
 800160c:	f7ff ff90 	bl	8001530 <NVIC_EncodePriority>
 8001610:	4602      	mov	r2, r0
 8001612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001616:	4611      	mov	r1, r2
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff5f 	bl	80014dc <__NVIC_SetPriority>
}
 800161e:	bf00      	nop
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff35 	bl	80014a4 <__NVIC_EnableIRQ>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff ffa2 	bl	8001594 <SysTick_Config>
 8001650:	4603      	mov	r3, r0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800165a:	b480      	push	{r7}
 800165c:	b085      	sub	sp, #20
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800166c:	2b02      	cmp	r3, #2
 800166e:	d008      	beq.n	8001682 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2204      	movs	r2, #4
 8001674:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e020      	b.n	80016c4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 020e 	bic.w	r2, r2, #14
 8001690:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 0201 	bic.w	r2, r2, #1
 80016a0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016aa:	2101      	movs	r1, #1
 80016ac:	fa01 f202 	lsl.w	r2, r1, r2
 80016b0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
	...

080016d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d005      	beq.n	80016f2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2204      	movs	r2, #4
 80016ea:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	73fb      	strb	r3, [r7, #15]
 80016f0:	e051      	b.n	8001796 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 020e 	bic.w	r2, r2, #14
 8001700:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0201 	bic.w	r2, r2, #1
 8001710:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a22      	ldr	r2, [pc, #136]	; (80017a0 <HAL_DMA_Abort_IT+0xd0>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d029      	beq.n	8001770 <HAL_DMA_Abort_IT+0xa0>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a20      	ldr	r2, [pc, #128]	; (80017a4 <HAL_DMA_Abort_IT+0xd4>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d022      	beq.n	800176c <HAL_DMA_Abort_IT+0x9c>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a1f      	ldr	r2, [pc, #124]	; (80017a8 <HAL_DMA_Abort_IT+0xd8>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d01a      	beq.n	8001766 <HAL_DMA_Abort_IT+0x96>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a1d      	ldr	r2, [pc, #116]	; (80017ac <HAL_DMA_Abort_IT+0xdc>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d012      	beq.n	8001760 <HAL_DMA_Abort_IT+0x90>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a1c      	ldr	r2, [pc, #112]	; (80017b0 <HAL_DMA_Abort_IT+0xe0>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d00a      	beq.n	800175a <HAL_DMA_Abort_IT+0x8a>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a1a      	ldr	r2, [pc, #104]	; (80017b4 <HAL_DMA_Abort_IT+0xe4>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d102      	bne.n	8001754 <HAL_DMA_Abort_IT+0x84>
 800174e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001752:	e00e      	b.n	8001772 <HAL_DMA_Abort_IT+0xa2>
 8001754:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001758:	e00b      	b.n	8001772 <HAL_DMA_Abort_IT+0xa2>
 800175a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800175e:	e008      	b.n	8001772 <HAL_DMA_Abort_IT+0xa2>
 8001760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001764:	e005      	b.n	8001772 <HAL_DMA_Abort_IT+0xa2>
 8001766:	f44f 7380 	mov.w	r3, #256	; 0x100
 800176a:	e002      	b.n	8001772 <HAL_DMA_Abort_IT+0xa2>
 800176c:	2310      	movs	r3, #16
 800176e:	e000      	b.n	8001772 <HAL_DMA_Abort_IT+0xa2>
 8001770:	2301      	movs	r3, #1
 8001772:	4a11      	ldr	r2, [pc, #68]	; (80017b8 <HAL_DMA_Abort_IT+0xe8>)
 8001774:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	4798      	blx	r3
    } 
  }
  return status;
 8001796:	7bfb      	ldrb	r3, [r7, #15]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40020008 	.word	0x40020008
 80017a4:	4002001c 	.word	0x4002001c
 80017a8:	40020030 	.word	0x40020030
 80017ac:	40020044 	.word	0x40020044
 80017b0:	40020058 	.word	0x40020058
 80017b4:	4002006c 	.word	0x4002006c
 80017b8:	40020000 	.word	0x40020000

080017bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017bc:	b480      	push	{r7}
 80017be:	b08b      	sub	sp, #44	; 0x2c
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017c6:	2300      	movs	r3, #0
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ca:	2300      	movs	r3, #0
 80017cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ce:	e148      	b.n	8001a62 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017d0:	2201      	movs	r2, #1
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	69fa      	ldr	r2, [r7, #28]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	f040 8137 	bne.w	8001a5c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	4aa3      	ldr	r2, [pc, #652]	; (8001a80 <HAL_GPIO_Init+0x2c4>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d05e      	beq.n	80018b6 <HAL_GPIO_Init+0xfa>
 80017f8:	4aa1      	ldr	r2, [pc, #644]	; (8001a80 <HAL_GPIO_Init+0x2c4>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d875      	bhi.n	80018ea <HAL_GPIO_Init+0x12e>
 80017fe:	4aa1      	ldr	r2, [pc, #644]	; (8001a84 <HAL_GPIO_Init+0x2c8>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d058      	beq.n	80018b6 <HAL_GPIO_Init+0xfa>
 8001804:	4a9f      	ldr	r2, [pc, #636]	; (8001a84 <HAL_GPIO_Init+0x2c8>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d86f      	bhi.n	80018ea <HAL_GPIO_Init+0x12e>
 800180a:	4a9f      	ldr	r2, [pc, #636]	; (8001a88 <HAL_GPIO_Init+0x2cc>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d052      	beq.n	80018b6 <HAL_GPIO_Init+0xfa>
 8001810:	4a9d      	ldr	r2, [pc, #628]	; (8001a88 <HAL_GPIO_Init+0x2cc>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d869      	bhi.n	80018ea <HAL_GPIO_Init+0x12e>
 8001816:	4a9d      	ldr	r2, [pc, #628]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d04c      	beq.n	80018b6 <HAL_GPIO_Init+0xfa>
 800181c:	4a9b      	ldr	r2, [pc, #620]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d863      	bhi.n	80018ea <HAL_GPIO_Init+0x12e>
 8001822:	4a9b      	ldr	r2, [pc, #620]	; (8001a90 <HAL_GPIO_Init+0x2d4>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d046      	beq.n	80018b6 <HAL_GPIO_Init+0xfa>
 8001828:	4a99      	ldr	r2, [pc, #612]	; (8001a90 <HAL_GPIO_Init+0x2d4>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d85d      	bhi.n	80018ea <HAL_GPIO_Init+0x12e>
 800182e:	2b12      	cmp	r3, #18
 8001830:	d82a      	bhi.n	8001888 <HAL_GPIO_Init+0xcc>
 8001832:	2b12      	cmp	r3, #18
 8001834:	d859      	bhi.n	80018ea <HAL_GPIO_Init+0x12e>
 8001836:	a201      	add	r2, pc, #4	; (adr r2, 800183c <HAL_GPIO_Init+0x80>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	080018b7 	.word	0x080018b7
 8001840:	08001891 	.word	0x08001891
 8001844:	080018a3 	.word	0x080018a3
 8001848:	080018e5 	.word	0x080018e5
 800184c:	080018eb 	.word	0x080018eb
 8001850:	080018eb 	.word	0x080018eb
 8001854:	080018eb 	.word	0x080018eb
 8001858:	080018eb 	.word	0x080018eb
 800185c:	080018eb 	.word	0x080018eb
 8001860:	080018eb 	.word	0x080018eb
 8001864:	080018eb 	.word	0x080018eb
 8001868:	080018eb 	.word	0x080018eb
 800186c:	080018eb 	.word	0x080018eb
 8001870:	080018eb 	.word	0x080018eb
 8001874:	080018eb 	.word	0x080018eb
 8001878:	080018eb 	.word	0x080018eb
 800187c:	080018eb 	.word	0x080018eb
 8001880:	08001899 	.word	0x08001899
 8001884:	080018ad 	.word	0x080018ad
 8001888:	4a82      	ldr	r2, [pc, #520]	; (8001a94 <HAL_GPIO_Init+0x2d8>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d013      	beq.n	80018b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800188e:	e02c      	b.n	80018ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	623b      	str	r3, [r7, #32]
          break;
 8001896:	e029      	b.n	80018ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	3304      	adds	r3, #4
 800189e:	623b      	str	r3, [r7, #32]
          break;
 80018a0:	e024      	b.n	80018ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	3308      	adds	r3, #8
 80018a8:	623b      	str	r3, [r7, #32]
          break;
 80018aa:	e01f      	b.n	80018ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	330c      	adds	r3, #12
 80018b2:	623b      	str	r3, [r7, #32]
          break;
 80018b4:	e01a      	b.n	80018ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d102      	bne.n	80018c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018be:	2304      	movs	r3, #4
 80018c0:	623b      	str	r3, [r7, #32]
          break;
 80018c2:	e013      	b.n	80018ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d105      	bne.n	80018d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018cc:	2308      	movs	r3, #8
 80018ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69fa      	ldr	r2, [r7, #28]
 80018d4:	611a      	str	r2, [r3, #16]
          break;
 80018d6:	e009      	b.n	80018ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018d8:	2308      	movs	r3, #8
 80018da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69fa      	ldr	r2, [r7, #28]
 80018e0:	615a      	str	r2, [r3, #20]
          break;
 80018e2:	e003      	b.n	80018ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018e4:	2300      	movs	r3, #0
 80018e6:	623b      	str	r3, [r7, #32]
          break;
 80018e8:	e000      	b.n	80018ec <HAL_GPIO_Init+0x130>
          break;
 80018ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	2bff      	cmp	r3, #255	; 0xff
 80018f0:	d801      	bhi.n	80018f6 <HAL_GPIO_Init+0x13a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	e001      	b.n	80018fa <HAL_GPIO_Init+0x13e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3304      	adds	r3, #4
 80018fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	2bff      	cmp	r3, #255	; 0xff
 8001900:	d802      	bhi.n	8001908 <HAL_GPIO_Init+0x14c>
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	e002      	b.n	800190e <HAL_GPIO_Init+0x152>
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	3b08      	subs	r3, #8
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	210f      	movs	r1, #15
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	fa01 f303 	lsl.w	r3, r1, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	401a      	ands	r2, r3
 8001920:	6a39      	ldr	r1, [r7, #32]
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	fa01 f303 	lsl.w	r3, r1, r3
 8001928:	431a      	orrs	r2, r3
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 8090 	beq.w	8001a5c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800193c:	4b56      	ldr	r3, [pc, #344]	; (8001a98 <HAL_GPIO_Init+0x2dc>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	4a55      	ldr	r2, [pc, #340]	; (8001a98 <HAL_GPIO_Init+0x2dc>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6193      	str	r3, [r2, #24]
 8001948:	4b53      	ldr	r3, [pc, #332]	; (8001a98 <HAL_GPIO_Init+0x2dc>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001954:	4a51      	ldr	r2, [pc, #324]	; (8001a9c <HAL_GPIO_Init+0x2e0>)
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	089b      	lsrs	r3, r3, #2
 800195a:	3302      	adds	r3, #2
 800195c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001960:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	220f      	movs	r2, #15
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	4013      	ands	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a49      	ldr	r2, [pc, #292]	; (8001aa0 <HAL_GPIO_Init+0x2e4>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d00d      	beq.n	800199c <HAL_GPIO_Init+0x1e0>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a48      	ldr	r2, [pc, #288]	; (8001aa4 <HAL_GPIO_Init+0x2e8>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d007      	beq.n	8001998 <HAL_GPIO_Init+0x1dc>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a47      	ldr	r2, [pc, #284]	; (8001aa8 <HAL_GPIO_Init+0x2ec>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d101      	bne.n	8001994 <HAL_GPIO_Init+0x1d8>
 8001990:	2302      	movs	r3, #2
 8001992:	e004      	b.n	800199e <HAL_GPIO_Init+0x1e2>
 8001994:	2303      	movs	r3, #3
 8001996:	e002      	b.n	800199e <HAL_GPIO_Init+0x1e2>
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <HAL_GPIO_Init+0x1e2>
 800199c:	2300      	movs	r3, #0
 800199e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a0:	f002 0203 	and.w	r2, r2, #3
 80019a4:	0092      	lsls	r2, r2, #2
 80019a6:	4093      	lsls	r3, r2
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019ae:	493b      	ldr	r1, [pc, #236]	; (8001a9c <HAL_GPIO_Init+0x2e0>)
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	089b      	lsrs	r3, r3, #2
 80019b4:	3302      	adds	r3, #2
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d006      	beq.n	80019d6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019c8:	4b38      	ldr	r3, [pc, #224]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4937      	ldr	r1, [pc, #220]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	600b      	str	r3, [r1, #0]
 80019d4:	e006      	b.n	80019e4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019d6:	4b35      	ldr	r3, [pc, #212]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	43db      	mvns	r3, r3
 80019de:	4933      	ldr	r1, [pc, #204]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d006      	beq.n	80019fe <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019f0:	4b2e      	ldr	r3, [pc, #184]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	492d      	ldr	r1, [pc, #180]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
 80019fc:	e006      	b.n	8001a0c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019fe:	4b2b      	ldr	r3, [pc, #172]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	4929      	ldr	r1, [pc, #164]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d006      	beq.n	8001a26 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a18:	4b24      	ldr	r3, [pc, #144]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	4923      	ldr	r1, [pc, #140]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	608b      	str	r3, [r1, #8]
 8001a24:	e006      	b.n	8001a34 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a26:	4b21      	ldr	r3, [pc, #132]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	491f      	ldr	r1, [pc, #124]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d006      	beq.n	8001a4e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a40:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	4919      	ldr	r1, [pc, #100]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	60cb      	str	r3, [r1, #12]
 8001a4c:	e006      	b.n	8001a5c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a4e:	4b17      	ldr	r3, [pc, #92]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 8001a50:	68da      	ldr	r2, [r3, #12]
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	4915      	ldr	r1, [pc, #84]	; (8001aac <HAL_GPIO_Init+0x2f0>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	3301      	adds	r3, #1
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f47f aeaf 	bne.w	80017d0 <HAL_GPIO_Init+0x14>
  }
}
 8001a72:	bf00      	nop
 8001a74:	bf00      	nop
 8001a76:	372c      	adds	r7, #44	; 0x2c
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	10320000 	.word	0x10320000
 8001a84:	10310000 	.word	0x10310000
 8001a88:	10220000 	.word	0x10220000
 8001a8c:	10210000 	.word	0x10210000
 8001a90:	10120000 	.word	0x10120000
 8001a94:	10110000 	.word	0x10110000
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40010000 	.word	0x40010000
 8001aa0:	40010800 	.word	0x40010800
 8001aa4:	40010c00 	.word	0x40010c00
 8001aa8:	40011000 	.word	0x40011000
 8001aac:	40010400 	.word	0x40010400

08001ab0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	887b      	ldrh	r3, [r7, #2]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d002      	beq.n	8001ace <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	73fb      	strb	r3, [r7, #15]
 8001acc:	e001      	b.n	8001ad2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr

08001ade <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	807b      	strh	r3, [r7, #2]
 8001aea:	4613      	mov	r3, r2
 8001aec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aee:	787b      	ldrb	r3, [r7, #1]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001af4:	887a      	ldrh	r2, [r7, #2]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001afa:	e003      	b.n	8001b04 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001afc:	887b      	ldrh	r3, [r7, #2]
 8001afe:	041a      	lsls	r2, r3, #16
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	611a      	str	r2, [r3, #16]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr

08001b0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b085      	sub	sp, #20
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	460b      	mov	r3, r1
 8001b18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b20:	887a      	ldrh	r2, [r7, #2]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4013      	ands	r3, r2
 8001b26:	041a      	lsls	r2, r3, #16
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	43d9      	mvns	r1, r3
 8001b2c:	887b      	ldrh	r3, [r7, #2]
 8001b2e:	400b      	ands	r3, r1
 8001b30:	431a      	orrs	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	611a      	str	r2, [r3, #16]
}
 8001b36:	bf00      	nop
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e26c      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 8087 	beq.w	8001c6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b60:	4b92      	ldr	r3, [pc, #584]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 030c 	and.w	r3, r3, #12
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d00c      	beq.n	8001b86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b6c:	4b8f      	ldr	r3, [pc, #572]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 030c 	and.w	r3, r3, #12
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d112      	bne.n	8001b9e <HAL_RCC_OscConfig+0x5e>
 8001b78:	4b8c      	ldr	r3, [pc, #560]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b84:	d10b      	bne.n	8001b9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b86:	4b89      	ldr	r3, [pc, #548]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d06c      	beq.n	8001c6c <HAL_RCC_OscConfig+0x12c>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d168      	bne.n	8001c6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e246      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba6:	d106      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x76>
 8001ba8:	4b80      	ldr	r3, [pc, #512]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a7f      	ldr	r2, [pc, #508]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	e02e      	b.n	8001c14 <HAL_RCC_OscConfig+0xd4>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10c      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x98>
 8001bbe:	4b7b      	ldr	r3, [pc, #492]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a7a      	ldr	r2, [pc, #488]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	4b78      	ldr	r3, [pc, #480]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a77      	ldr	r2, [pc, #476]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	e01d      	b.n	8001c14 <HAL_RCC_OscConfig+0xd4>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001be0:	d10c      	bne.n	8001bfc <HAL_RCC_OscConfig+0xbc>
 8001be2:	4b72      	ldr	r3, [pc, #456]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a71      	ldr	r2, [pc, #452]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4b6f      	ldr	r3, [pc, #444]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a6e      	ldr	r2, [pc, #440]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e00b      	b.n	8001c14 <HAL_RCC_OscConfig+0xd4>
 8001bfc:	4b6b      	ldr	r3, [pc, #428]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a6a      	ldr	r2, [pc, #424]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	4b68      	ldr	r3, [pc, #416]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a67      	ldr	r2, [pc, #412]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d013      	beq.n	8001c44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7ff fc06 	bl	800142c <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c24:	f7ff fc02 	bl	800142c <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b64      	cmp	r3, #100	; 0x64
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e1fa      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c36:	4b5d      	ldr	r3, [pc, #372]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0xe4>
 8001c42:	e014      	b.n	8001c6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7ff fbf2 	bl	800142c <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c4c:	f7ff fbee 	bl	800142c <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b64      	cmp	r3, #100	; 0x64
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e1e6      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c5e:	4b53      	ldr	r3, [pc, #332]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_OscConfig+0x10c>
 8001c6a:	e000      	b.n	8001c6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d063      	beq.n	8001d42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c7a:	4b4c      	ldr	r3, [pc, #304]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00b      	beq.n	8001c9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c86:	4b49      	ldr	r3, [pc, #292]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d11c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x18c>
 8001c92:	4b46      	ldr	r3, [pc, #280]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d116      	bne.n	8001ccc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9e:	4b43      	ldr	r3, [pc, #268]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d005      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x176>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d001      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e1ba      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb6:	4b3d      	ldr	r3, [pc, #244]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4939      	ldr	r1, [pc, #228]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cca:	e03a      	b.n	8001d42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d020      	beq.n	8001d16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd4:	4b36      	ldr	r3, [pc, #216]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cda:	f7ff fba7 	bl	800142c <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce2:	f7ff fba3 	bl	800142c <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e19b      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf4:	4b2d      	ldr	r3, [pc, #180]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f0      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d00:	4b2a      	ldr	r3, [pc, #168]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	4927      	ldr	r1, [pc, #156]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	600b      	str	r3, [r1, #0]
 8001d14:	e015      	b.n	8001d42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d16:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7ff fb86 	bl	800142c <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d24:	f7ff fb82 	bl	800142c <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e17a      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d36:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d03a      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d019      	beq.n	8001d8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d56:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <HAL_RCC_OscConfig+0x274>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5c:	f7ff fb66 	bl	800142c <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d64:	f7ff fb62 	bl	800142c <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e15a      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d76:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d82:	2001      	movs	r0, #1
 8001d84:	f000 fad8 	bl	8002338 <RCC_Delay>
 8001d88:	e01c      	b.n	8001dc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_RCC_OscConfig+0x274>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d90:	f7ff fb4c 	bl	800142c <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d96:	e00f      	b.n	8001db8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d98:	f7ff fb48 	bl	800142c <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d908      	bls.n	8001db8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e140      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000
 8001db0:	42420000 	.word	0x42420000
 8001db4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db8:	4b9e      	ldr	r3, [pc, #632]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1e9      	bne.n	8001d98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 80a6 	beq.w	8001f1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd6:	4b97      	ldr	r3, [pc, #604]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10d      	bne.n	8001dfe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de2:	4b94      	ldr	r3, [pc, #592]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	4a93      	ldr	r2, [pc, #588]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dec:	61d3      	str	r3, [r2, #28]
 8001dee:	4b91      	ldr	r3, [pc, #580]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfe:	4b8e      	ldr	r3, [pc, #568]	; (8002038 <HAL_RCC_OscConfig+0x4f8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d118      	bne.n	8001e3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e0a:	4b8b      	ldr	r3, [pc, #556]	; (8002038 <HAL_RCC_OscConfig+0x4f8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a8a      	ldr	r2, [pc, #552]	; (8002038 <HAL_RCC_OscConfig+0x4f8>)
 8001e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e16:	f7ff fb09 	bl	800142c <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1e:	f7ff fb05 	bl	800142c <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b64      	cmp	r3, #100	; 0x64
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e0fd      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e30:	4b81      	ldr	r3, [pc, #516]	; (8002038 <HAL_RCC_OscConfig+0x4f8>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d106      	bne.n	8001e52 <HAL_RCC_OscConfig+0x312>
 8001e44:	4b7b      	ldr	r3, [pc, #492]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	4a7a      	ldr	r2, [pc, #488]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	6213      	str	r3, [r2, #32]
 8001e50:	e02d      	b.n	8001eae <HAL_RCC_OscConfig+0x36e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCC_OscConfig+0x334>
 8001e5a:	4b76      	ldr	r3, [pc, #472]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	4a75      	ldr	r2, [pc, #468]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	6213      	str	r3, [r2, #32]
 8001e66:	4b73      	ldr	r3, [pc, #460]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	4a72      	ldr	r2, [pc, #456]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e6c:	f023 0304 	bic.w	r3, r3, #4
 8001e70:	6213      	str	r3, [r2, #32]
 8001e72:	e01c      	b.n	8001eae <HAL_RCC_OscConfig+0x36e>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	2b05      	cmp	r3, #5
 8001e7a:	d10c      	bne.n	8001e96 <HAL_RCC_OscConfig+0x356>
 8001e7c:	4b6d      	ldr	r3, [pc, #436]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	4a6c      	ldr	r2, [pc, #432]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e82:	f043 0304 	orr.w	r3, r3, #4
 8001e86:	6213      	str	r3, [r2, #32]
 8001e88:	4b6a      	ldr	r3, [pc, #424]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	4a69      	ldr	r2, [pc, #420]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6213      	str	r3, [r2, #32]
 8001e94:	e00b      	b.n	8001eae <HAL_RCC_OscConfig+0x36e>
 8001e96:	4b67      	ldr	r3, [pc, #412]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	4a66      	ldr	r2, [pc, #408]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	f023 0301 	bic.w	r3, r3, #1
 8001ea0:	6213      	str	r3, [r2, #32]
 8001ea2:	4b64      	ldr	r3, [pc, #400]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	4a63      	ldr	r2, [pc, #396]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001ea8:	f023 0304 	bic.w	r3, r3, #4
 8001eac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d015      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb6:	f7ff fab9 	bl	800142c <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ebc:	e00a      	b.n	8001ed4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ebe:	f7ff fab5 	bl	800142c <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e0ab      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed4:	4b57      	ldr	r3, [pc, #348]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0ee      	beq.n	8001ebe <HAL_RCC_OscConfig+0x37e>
 8001ee0:	e014      	b.n	8001f0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee2:	f7ff faa3 	bl	800142c <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee8:	e00a      	b.n	8001f00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eea:	f7ff fa9f 	bl	800142c <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e095      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f00:	4b4c      	ldr	r3, [pc, #304]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1ee      	bne.n	8001eea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f0c:	7dfb      	ldrb	r3, [r7, #23]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d105      	bne.n	8001f1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f12:	4b48      	ldr	r3, [pc, #288]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	4a47      	ldr	r2, [pc, #284]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 8081 	beq.w	800202a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f28:	4b42      	ldr	r3, [pc, #264]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 030c 	and.w	r3, r3, #12
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d061      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d146      	bne.n	8001fca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3c:	4b3f      	ldr	r3, [pc, #252]	; (800203c <HAL_RCC_OscConfig+0x4fc>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f42:	f7ff fa73 	bl	800142c <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4a:	f7ff fa6f 	bl	800142c <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e067      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5c:	4b35      	ldr	r3, [pc, #212]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1f0      	bne.n	8001f4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f70:	d108      	bne.n	8001f84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f72:	4b30      	ldr	r3, [pc, #192]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	492d      	ldr	r1, [pc, #180]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f84:	4b2b      	ldr	r3, [pc, #172]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a19      	ldr	r1, [r3, #32]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	430b      	orrs	r3, r1
 8001f96:	4927      	ldr	r1, [pc, #156]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f9c:	4b27      	ldr	r3, [pc, #156]	; (800203c <HAL_RCC_OscConfig+0x4fc>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa2:	f7ff fa43 	bl	800142c <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001faa:	f7ff fa3f 	bl	800142c <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e037      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x46a>
 8001fc8:	e02f      	b.n	800202a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fca:	4b1c      	ldr	r3, [pc, #112]	; (800203c <HAL_RCC_OscConfig+0x4fc>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7ff fa2c 	bl	800142c <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd8:	f7ff fa28 	bl	800142c <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e020      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fea:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x498>
 8001ff6:	e018      	b.n	800202a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e013      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	429a      	cmp	r2, r3
 8002016:	d106      	bne.n	8002026 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002022:	429a      	cmp	r2, r3
 8002024:	d001      	beq.n	800202a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40021000 	.word	0x40021000
 8002038:	40007000 	.word	0x40007000
 800203c:	42420060 	.word	0x42420060

08002040 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0d0      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002054:	4b6a      	ldr	r3, [pc, #424]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d910      	bls.n	8002084 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002062:	4b67      	ldr	r3, [pc, #412]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 0207 	bic.w	r2, r3, #7
 800206a:	4965      	ldr	r1, [pc, #404]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	4313      	orrs	r3, r2
 8002070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002072:	4b63      	ldr	r3, [pc, #396]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d001      	beq.n	8002084 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0b8      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d020      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800209c:	4b59      	ldr	r3, [pc, #356]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	4a58      	ldr	r2, [pc, #352]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b4:	4b53      	ldr	r3, [pc, #332]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	4a52      	ldr	r2, [pc, #328]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c0:	4b50      	ldr	r3, [pc, #320]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	494d      	ldr	r1, [pc, #308]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d040      	beq.n	8002160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d107      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	4b47      	ldr	r3, [pc, #284]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d115      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e07f      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d107      	bne.n	800210e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fe:	4b41      	ldr	r3, [pc, #260]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d109      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e073      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210e:	4b3d      	ldr	r3, [pc, #244]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e06b      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800211e:	4b39      	ldr	r3, [pc, #228]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f023 0203 	bic.w	r2, r3, #3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4936      	ldr	r1, [pc, #216]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 800212c:	4313      	orrs	r3, r2
 800212e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002130:	f7ff f97c 	bl	800142c <HAL_GetTick>
 8002134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002136:	e00a      	b.n	800214e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002138:	f7ff f978 	bl	800142c <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	f241 3288 	movw	r2, #5000	; 0x1388
 8002146:	4293      	cmp	r3, r2
 8002148:	d901      	bls.n	800214e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e053      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214e:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 020c 	and.w	r2, r3, #12
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	429a      	cmp	r2, r3
 800215e:	d1eb      	bne.n	8002138 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002160:	4b27      	ldr	r3, [pc, #156]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d210      	bcs.n	8002190 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216e:	4b24      	ldr	r3, [pc, #144]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 0207 	bic.w	r2, r3, #7
 8002176:	4922      	ldr	r1, [pc, #136]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	4313      	orrs	r3, r2
 800217c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800217e:	4b20      	ldr	r3, [pc, #128]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e032      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d008      	beq.n	80021ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800219c:	4b19      	ldr	r3, [pc, #100]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4916      	ldr	r1, [pc, #88]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d009      	beq.n	80021ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021ba:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	490e      	ldr	r1, [pc, #56]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ce:	f000 f821 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 80021d2:	4602      	mov	r2, r0
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	490a      	ldr	r1, [pc, #40]	; (8002208 <HAL_RCC_ClockConfig+0x1c8>)
 80021e0:	5ccb      	ldrb	r3, [r1, r3]
 80021e2:	fa22 f303 	lsr.w	r3, r2, r3
 80021e6:	4a09      	ldr	r2, [pc, #36]	; (800220c <HAL_RCC_ClockConfig+0x1cc>)
 80021e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ea:	4b09      	ldr	r3, [pc, #36]	; (8002210 <HAL_RCC_ClockConfig+0x1d0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff f8da 	bl	80013a8 <HAL_InitTick>

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40022000 	.word	0x40022000
 8002204:	40021000 	.word	0x40021000
 8002208:	080045b0 	.word	0x080045b0
 800220c:	20000000 	.word	0x20000000
 8002210:	20000004 	.word	0x20000004

08002214 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002214:	b490      	push	{r4, r7}
 8002216:	b08a      	sub	sp, #40	; 0x28
 8002218:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800221a:	4b2a      	ldr	r3, [pc, #168]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800221c:	1d3c      	adds	r4, r7, #4
 800221e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002220:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002224:	f240 2301 	movw	r3, #513	; 0x201
 8002228:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
 8002232:	2300      	movs	r3, #0
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800223a:	2300      	movs	r3, #0
 800223c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800223e:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	2b04      	cmp	r3, #4
 800224c:	d002      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0x40>
 800224e:	2b08      	cmp	r3, #8
 8002250:	d003      	beq.n	800225a <HAL_RCC_GetSysClockFreq+0x46>
 8002252:	e02d      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002254:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002256:	623b      	str	r3, [r7, #32]
      break;
 8002258:	e02d      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	0c9b      	lsrs	r3, r3, #18
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002266:	4413      	add	r3, r2
 8002268:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800226c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d013      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002278:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	0c5b      	lsrs	r3, r3, #17
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002286:	4413      	add	r3, r2
 8002288:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800228c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	4a0e      	ldr	r2, [pc, #56]	; (80022cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002292:	fb02 f203 	mul.w	r2, r2, r3
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	fbb2 f3f3 	udiv	r3, r2, r3
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
 800229e:	e004      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	4a0b      	ldr	r2, [pc, #44]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022a4:	fb02 f303 	mul.w	r3, r2, r3
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	623b      	str	r3, [r7, #32]
      break;
 80022ae:	e002      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_RCC_GetSysClockFreq+0xb8>)
 80022b2:	623b      	str	r3, [r7, #32]
      break;
 80022b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022b6:	6a3b      	ldr	r3, [r7, #32]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3728      	adds	r7, #40	; 0x28
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc90      	pop	{r4, r7}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	080045a0 	.word	0x080045a0
 80022c8:	40021000 	.word	0x40021000
 80022cc:	007a1200 	.word	0x007a1200
 80022d0:	003d0900 	.word	0x003d0900

080022d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d8:	4b02      	ldr	r3, [pc, #8]	; (80022e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr
 80022e4:	20000000 	.word	0x20000000

080022e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022ec:	f7ff fff2 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 80022f0:	4602      	mov	r2, r0
 80022f2:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	0a1b      	lsrs	r3, r3, #8
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	4903      	ldr	r1, [pc, #12]	; (800230c <HAL_RCC_GetPCLK1Freq+0x24>)
 80022fe:	5ccb      	ldrb	r3, [r1, r3]
 8002300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002304:	4618      	mov	r0, r3
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40021000 	.word	0x40021000
 800230c:	080045c0 	.word	0x080045c0

08002310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002314:	f7ff ffde 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 8002318:	4602      	mov	r2, r0
 800231a:	4b05      	ldr	r3, [pc, #20]	; (8002330 <HAL_RCC_GetPCLK2Freq+0x20>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	0adb      	lsrs	r3, r3, #11
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	4903      	ldr	r1, [pc, #12]	; (8002334 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002326:	5ccb      	ldrb	r3, [r1, r3]
 8002328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800232c:	4618      	mov	r0, r3
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40021000 	.word	0x40021000
 8002334:	080045c0 	.word	0x080045c0

08002338 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002340:	4b0a      	ldr	r3, [pc, #40]	; (800236c <RCC_Delay+0x34>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a0a      	ldr	r2, [pc, #40]	; (8002370 <RCC_Delay+0x38>)
 8002346:	fba2 2303 	umull	r2, r3, r2, r3
 800234a:	0a5b      	lsrs	r3, r3, #9
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	fb02 f303 	mul.w	r3, r2, r3
 8002352:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002354:	bf00      	nop
  }
  while (Delay --);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1e5a      	subs	r2, r3, #1
 800235a:	60fa      	str	r2, [r7, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1f9      	bne.n	8002354 <RCC_Delay+0x1c>
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr
 800236c:	20000000 	.word	0x20000000
 8002370:	10624dd3 	.word	0x10624dd3

08002374 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e041      	b.n	800240a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d106      	bne.n	80023a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7fe fe48 	bl	8001030 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3304      	adds	r3, #4
 80023b0:	4619      	mov	r1, r3
 80023b2:	4610      	mov	r0, r2
 80023b4:	f000 fc80 	bl	8002cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d001      	beq.n	800242c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e035      	b.n	8002498 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2202      	movs	r2, #2
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 0201 	orr.w	r2, r2, #1
 8002442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a16      	ldr	r2, [pc, #88]	; (80024a4 <HAL_TIM_Base_Start_IT+0x90>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d009      	beq.n	8002462 <HAL_TIM_Base_Start_IT+0x4e>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002456:	d004      	beq.n	8002462 <HAL_TIM_Base_Start_IT+0x4e>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a12      	ldr	r2, [pc, #72]	; (80024a8 <HAL_TIM_Base_Start_IT+0x94>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d111      	bne.n	8002486 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2b06      	cmp	r3, #6
 8002472:	d010      	beq.n	8002496 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0201 	orr.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002484:	e007      	b.n	8002496 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f042 0201 	orr.w	r2, r2, #1
 8002494:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40012c00 	.word	0x40012c00
 80024a8:	40000400 	.word	0x40000400

080024ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e041      	b.n	8002542 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f839 	bl	800254a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3304      	adds	r3, #4
 80024e8:	4619      	mov	r1, r3
 80024ea:	4610      	mov	r0, r2
 80024ec:	f000 fbe4 	bl	8002cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr

0800255c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d109      	bne.n	8002580 <HAL_TIM_PWM_Start+0x24>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b01      	cmp	r3, #1
 8002576:	bf14      	ite	ne
 8002578:	2301      	movne	r3, #1
 800257a:	2300      	moveq	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	e022      	b.n	80025c6 <HAL_TIM_PWM_Start+0x6a>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	2b04      	cmp	r3, #4
 8002584:	d109      	bne.n	800259a <HAL_TIM_PWM_Start+0x3e>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b01      	cmp	r3, #1
 8002590:	bf14      	ite	ne
 8002592:	2301      	movne	r3, #1
 8002594:	2300      	moveq	r3, #0
 8002596:	b2db      	uxtb	r3, r3
 8002598:	e015      	b.n	80025c6 <HAL_TIM_PWM_Start+0x6a>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b08      	cmp	r3, #8
 800259e:	d109      	bne.n	80025b4 <HAL_TIM_PWM_Start+0x58>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	bf14      	ite	ne
 80025ac:	2301      	movne	r3, #1
 80025ae:	2300      	moveq	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	e008      	b.n	80025c6 <HAL_TIM_PWM_Start+0x6a>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b01      	cmp	r3, #1
 80025be:	bf14      	ite	ne
 80025c0:	2301      	movne	r3, #1
 80025c2:	2300      	moveq	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e059      	b.n	8002682 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d104      	bne.n	80025de <HAL_TIM_PWM_Start+0x82>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025dc:	e013      	b.n	8002606 <HAL_TIM_PWM_Start+0xaa>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d104      	bne.n	80025ee <HAL_TIM_PWM_Start+0x92>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025ec:	e00b      	b.n	8002606 <HAL_TIM_PWM_Start+0xaa>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d104      	bne.n	80025fe <HAL_TIM_PWM_Start+0xa2>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025fc:	e003      	b.n	8002606 <HAL_TIM_PWM_Start+0xaa>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2202      	movs	r2, #2
 8002602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2201      	movs	r2, #1
 800260c:	6839      	ldr	r1, [r7, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f000 fdc8 	bl	80031a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a1c      	ldr	r2, [pc, #112]	; (800268c <HAL_TIM_PWM_Start+0x130>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d107      	bne.n	800262e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800262c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a16      	ldr	r2, [pc, #88]	; (800268c <HAL_TIM_PWM_Start+0x130>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d009      	beq.n	800264c <HAL_TIM_PWM_Start+0xf0>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002640:	d004      	beq.n	800264c <HAL_TIM_PWM_Start+0xf0>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a12      	ldr	r2, [pc, #72]	; (8002690 <HAL_TIM_PWM_Start+0x134>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d111      	bne.n	8002670 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b06      	cmp	r3, #6
 800265c:	d010      	beq.n	8002680 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f042 0201 	orr.w	r2, r2, #1
 800266c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800266e:	e007      	b.n	8002680 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40012c00 	.word	0x40012c00
 8002690:	40000400 	.word	0x40000400

08002694 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2200      	movs	r2, #0
 80026a4:	6839      	ldr	r1, [r7, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 fd7c 	bl	80031a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a29      	ldr	r2, [pc, #164]	; (8002758 <HAL_TIM_PWM_Stop+0xc4>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d117      	bne.n	80026e6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6a1a      	ldr	r2, [r3, #32]
 80026bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80026c0:	4013      	ands	r3, r2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10f      	bne.n	80026e6 <HAL_TIM_PWM_Stop+0x52>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6a1a      	ldr	r2, [r3, #32]
 80026cc:	f240 4344 	movw	r3, #1092	; 0x444
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d107      	bne.n	80026e6 <HAL_TIM_PWM_Stop+0x52>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6a1a      	ldr	r2, [r3, #32]
 80026ec:	f241 1311 	movw	r3, #4369	; 0x1111
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10f      	bne.n	8002716 <HAL_TIM_PWM_Stop+0x82>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6a1a      	ldr	r2, [r3, #32]
 80026fc:	f240 4344 	movw	r3, #1092	; 0x444
 8002700:	4013      	ands	r3, r2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d107      	bne.n	8002716 <HAL_TIM_PWM_Stop+0x82>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0201 	bic.w	r2, r2, #1
 8002714:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d104      	bne.n	8002726 <HAL_TIM_PWM_Stop+0x92>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002724:	e013      	b.n	800274e <HAL_TIM_PWM_Stop+0xba>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	2b04      	cmp	r3, #4
 800272a:	d104      	bne.n	8002736 <HAL_TIM_PWM_Stop+0xa2>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002734:	e00b      	b.n	800274e <HAL_TIM_PWM_Stop+0xba>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b08      	cmp	r3, #8
 800273a:	d104      	bne.n	8002746 <HAL_TIM_PWM_Stop+0xb2>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002744:	e003      	b.n	800274e <HAL_TIM_PWM_Stop+0xba>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40012c00 	.word	0x40012c00

0800275c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b02      	cmp	r3, #2
 8002770:	d122      	bne.n	80027b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b02      	cmp	r3, #2
 800277e:	d11b      	bne.n	80027b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0202 	mvn.w	r2, #2
 8002788:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 fa6f 	bl	8002c82 <HAL_TIM_IC_CaptureCallback>
 80027a4:	e005      	b.n	80027b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fa62 	bl	8002c70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 fa71 	bl	8002c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d122      	bne.n	800280c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d11b      	bne.n	800280c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f06f 0204 	mvn.w	r2, #4
 80027dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2202      	movs	r2, #2
 80027e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fa45 	bl	8002c82 <HAL_TIM_IC_CaptureCallback>
 80027f8:	e005      	b.n	8002806 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 fa38 	bl	8002c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 fa47 	bl	8002c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b08      	cmp	r3, #8
 8002818:	d122      	bne.n	8002860 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b08      	cmp	r3, #8
 8002826:	d11b      	bne.n	8002860 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f06f 0208 	mvn.w	r2, #8
 8002830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2204      	movs	r2, #4
 8002836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 fa1b 	bl	8002c82 <HAL_TIM_IC_CaptureCallback>
 800284c:	e005      	b.n	800285a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 fa0e 	bl	8002c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 fa1d 	bl	8002c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	f003 0310 	and.w	r3, r3, #16
 800286a:	2b10      	cmp	r3, #16
 800286c:	d122      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f003 0310 	and.w	r3, r3, #16
 8002878:	2b10      	cmp	r3, #16
 800287a:	d11b      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f06f 0210 	mvn.w	r2, #16
 8002884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2208      	movs	r2, #8
 800288a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f9f1 	bl	8002c82 <HAL_TIM_IC_CaptureCallback>
 80028a0:	e005      	b.n	80028ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f9e4 	bl	8002c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f9f3 	bl	8002c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d10e      	bne.n	80028e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d107      	bne.n	80028e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f06f 0201 	mvn.w	r2, #1
 80028d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7fe f8c8 	bl	8000a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ea:	2b80      	cmp	r3, #128	; 0x80
 80028ec:	d10e      	bne.n	800290c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f8:	2b80      	cmp	r3, #128	; 0x80
 80028fa:	d107      	bne.n	800290c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fcd1 	bl	80032ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002916:	2b40      	cmp	r3, #64	; 0x40
 8002918:	d10e      	bne.n	8002938 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002924:	2b40      	cmp	r3, #64	; 0x40
 8002926:	d107      	bne.n	8002938 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f9b7 	bl	8002ca6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	f003 0320 	and.w	r3, r3, #32
 8002942:	2b20      	cmp	r3, #32
 8002944:	d10e      	bne.n	8002964 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f003 0320 	and.w	r3, r3, #32
 8002950:	2b20      	cmp	r3, #32
 8002952:	d107      	bne.n	8002964 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f06f 0220 	mvn.w	r2, #32
 800295c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fc9c 	bl	800329c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002964:	bf00      	nop
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002982:	2302      	movs	r3, #2
 8002984:	e0ac      	b.n	8002ae0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b0c      	cmp	r3, #12
 8002992:	f200 809f 	bhi.w	8002ad4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002996:	a201      	add	r2, pc, #4	; (adr r2, 800299c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299c:	080029d1 	.word	0x080029d1
 80029a0:	08002ad5 	.word	0x08002ad5
 80029a4:	08002ad5 	.word	0x08002ad5
 80029a8:	08002ad5 	.word	0x08002ad5
 80029ac:	08002a11 	.word	0x08002a11
 80029b0:	08002ad5 	.word	0x08002ad5
 80029b4:	08002ad5 	.word	0x08002ad5
 80029b8:	08002ad5 	.word	0x08002ad5
 80029bc:	08002a53 	.word	0x08002a53
 80029c0:	08002ad5 	.word	0x08002ad5
 80029c4:	08002ad5 	.word	0x08002ad5
 80029c8:	08002ad5 	.word	0x08002ad5
 80029cc:	08002a93 	.word	0x08002a93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68b9      	ldr	r1, [r7, #8]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 f9c6 	bl	8002d68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699a      	ldr	r2, [r3, #24]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0208 	orr.w	r2, r2, #8
 80029ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699a      	ldr	r2, [r3, #24]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0204 	bic.w	r2, r2, #4
 80029fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6999      	ldr	r1, [r3, #24]
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	691a      	ldr	r2, [r3, #16]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	619a      	str	r2, [r3, #24]
      break;
 8002a0e:	e062      	b.n	8002ad6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68b9      	ldr	r1, [r7, #8]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 fa0c 	bl	8002e34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699a      	ldr	r2, [r3, #24]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6999      	ldr	r1, [r3, #24]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	021a      	lsls	r2, r3, #8
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	619a      	str	r2, [r3, #24]
      break;
 8002a50:	e041      	b.n	8002ad6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68b9      	ldr	r1, [r7, #8]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 fa55 	bl	8002f08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	69da      	ldr	r2, [r3, #28]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f042 0208 	orr.w	r2, r2, #8
 8002a6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	69da      	ldr	r2, [r3, #28]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0204 	bic.w	r2, r2, #4
 8002a7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	69d9      	ldr	r1, [r3, #28]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	61da      	str	r2, [r3, #28]
      break;
 8002a90:	e021      	b.n	8002ad6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68b9      	ldr	r1, [r7, #8]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 fa9f 	bl	8002fdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	69da      	ldr	r2, [r3, #28]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	69da      	ldr	r2, [r3, #28]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002abc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	69d9      	ldr	r1, [r3, #28]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	021a      	lsls	r2, r3, #8
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	61da      	str	r2, [r3, #28]
      break;
 8002ad2:	e000      	b.n	8002ad6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002ad4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <HAL_TIM_ConfigClockSource+0x18>
 8002afc:	2302      	movs	r3, #2
 8002afe:	e0b3      	b.n	8002c68 <HAL_TIM_ConfigClockSource+0x180>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b38:	d03e      	beq.n	8002bb8 <HAL_TIM_ConfigClockSource+0xd0>
 8002b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b3e:	f200 8087 	bhi.w	8002c50 <HAL_TIM_ConfigClockSource+0x168>
 8002b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b46:	f000 8085 	beq.w	8002c54 <HAL_TIM_ConfigClockSource+0x16c>
 8002b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b4e:	d87f      	bhi.n	8002c50 <HAL_TIM_ConfigClockSource+0x168>
 8002b50:	2b70      	cmp	r3, #112	; 0x70
 8002b52:	d01a      	beq.n	8002b8a <HAL_TIM_ConfigClockSource+0xa2>
 8002b54:	2b70      	cmp	r3, #112	; 0x70
 8002b56:	d87b      	bhi.n	8002c50 <HAL_TIM_ConfigClockSource+0x168>
 8002b58:	2b60      	cmp	r3, #96	; 0x60
 8002b5a:	d050      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x116>
 8002b5c:	2b60      	cmp	r3, #96	; 0x60
 8002b5e:	d877      	bhi.n	8002c50 <HAL_TIM_ConfigClockSource+0x168>
 8002b60:	2b50      	cmp	r3, #80	; 0x50
 8002b62:	d03c      	beq.n	8002bde <HAL_TIM_ConfigClockSource+0xf6>
 8002b64:	2b50      	cmp	r3, #80	; 0x50
 8002b66:	d873      	bhi.n	8002c50 <HAL_TIM_ConfigClockSource+0x168>
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d058      	beq.n	8002c1e <HAL_TIM_ConfigClockSource+0x136>
 8002b6c:	2b40      	cmp	r3, #64	; 0x40
 8002b6e:	d86f      	bhi.n	8002c50 <HAL_TIM_ConfigClockSource+0x168>
 8002b70:	2b30      	cmp	r3, #48	; 0x30
 8002b72:	d064      	beq.n	8002c3e <HAL_TIM_ConfigClockSource+0x156>
 8002b74:	2b30      	cmp	r3, #48	; 0x30
 8002b76:	d86b      	bhi.n	8002c50 <HAL_TIM_ConfigClockSource+0x168>
 8002b78:	2b20      	cmp	r3, #32
 8002b7a:	d060      	beq.n	8002c3e <HAL_TIM_ConfigClockSource+0x156>
 8002b7c:	2b20      	cmp	r3, #32
 8002b7e:	d867      	bhi.n	8002c50 <HAL_TIM_ConfigClockSource+0x168>
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d05c      	beq.n	8002c3e <HAL_TIM_ConfigClockSource+0x156>
 8002b84:	2b10      	cmp	r3, #16
 8002b86:	d05a      	beq.n	8002c3e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002b88:	e062      	b.n	8002c50 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6818      	ldr	r0, [r3, #0]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	6899      	ldr	r1, [r3, #8]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f000 fae4 	bl	8003166 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	609a      	str	r2, [r3, #8]
      break;
 8002bb6:	e04e      	b.n	8002c56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6818      	ldr	r0, [r3, #0]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	6899      	ldr	r1, [r3, #8]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f000 facd 	bl	8003166 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bda:	609a      	str	r2, [r3, #8]
      break;
 8002bdc:	e03b      	b.n	8002c56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6818      	ldr	r0, [r3, #0]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	6859      	ldr	r1, [r3, #4]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	461a      	mov	r2, r3
 8002bec:	f000 fa44 	bl	8003078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2150      	movs	r1, #80	; 0x50
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 fa9b 	bl	8003132 <TIM_ITRx_SetConfig>
      break;
 8002bfc:	e02b      	b.n	8002c56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6818      	ldr	r0, [r3, #0]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	6859      	ldr	r1, [r3, #4]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f000 fa62 	bl	80030d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2160      	movs	r1, #96	; 0x60
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 fa8b 	bl	8003132 <TIM_ITRx_SetConfig>
      break;
 8002c1c:	e01b      	b.n	8002c56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6818      	ldr	r0, [r3, #0]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	6859      	ldr	r1, [r3, #4]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	f000 fa24 	bl	8003078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2140      	movs	r1, #64	; 0x40
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 fa7b 	bl	8003132 <TIM_ITRx_SetConfig>
      break;
 8002c3c:	e00b      	b.n	8002c56 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4619      	mov	r1, r3
 8002c48:	4610      	mov	r0, r2
 8002c4a:	f000 fa72 	bl	8003132 <TIM_ITRx_SetConfig>
        break;
 8002c4e:	e002      	b.n	8002c56 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c50:	bf00      	nop
 8002c52:	e000      	b.n	8002c56 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c54:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr

08002c82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr

08002c94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr

08002cb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a25      	ldr	r2, [pc, #148]	; (8002d60 <TIM_Base_SetConfig+0xa8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d007      	beq.n	8002ce0 <TIM_Base_SetConfig+0x28>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd6:	d003      	beq.n	8002ce0 <TIM_Base_SetConfig+0x28>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a22      	ldr	r2, [pc, #136]	; (8002d64 <TIM_Base_SetConfig+0xac>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d108      	bne.n	8002cf2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a1a      	ldr	r2, [pc, #104]	; (8002d60 <TIM_Base_SetConfig+0xa8>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d007      	beq.n	8002d0a <TIM_Base_SetConfig+0x52>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d00:	d003      	beq.n	8002d0a <TIM_Base_SetConfig+0x52>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a17      	ldr	r2, [pc, #92]	; (8002d64 <TIM_Base_SetConfig+0xac>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d108      	bne.n	8002d1c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a07      	ldr	r2, [pc, #28]	; (8002d60 <TIM_Base_SetConfig+0xa8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d103      	bne.n	8002d50 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	615a      	str	r2, [r3, #20]
}
 8002d56:	bf00      	nop
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr
 8002d60:	40012c00 	.word	0x40012c00
 8002d64:	40000400 	.word	0x40000400

08002d68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	f023 0201 	bic.w	r2, r3, #1
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f023 0303 	bic.w	r3, r3, #3
 8002d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f023 0302 	bic.w	r3, r3, #2
 8002db0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a1c      	ldr	r2, [pc, #112]	; (8002e30 <TIM_OC1_SetConfig+0xc8>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d10c      	bne.n	8002dde <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f023 0308 	bic.w	r3, r3, #8
 8002dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f023 0304 	bic.w	r3, r3, #4
 8002ddc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a13      	ldr	r2, [pc, #76]	; (8002e30 <TIM_OC1_SetConfig+0xc8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d111      	bne.n	8002e0a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002df4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	621a      	str	r2, [r3, #32]
}
 8002e24:	bf00      	nop
 8002e26:	371c      	adds	r7, #28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40012c00 	.word	0x40012c00

08002e34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	f023 0210 	bic.w	r2, r3, #16
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	021b      	lsls	r3, r3, #8
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f023 0320 	bic.w	r3, r3, #32
 8002e7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a1d      	ldr	r2, [pc, #116]	; (8002f04 <TIM_OC2_SetConfig+0xd0>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d10d      	bne.n	8002eb0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a14      	ldr	r2, [pc, #80]	; (8002f04 <TIM_OC2_SetConfig+0xd0>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d113      	bne.n	8002ee0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ebe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	621a      	str	r2, [r3, #32]
}
 8002efa:	bf00      	nop
 8002efc:	371c      	adds	r7, #28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr
 8002f04:	40012c00 	.word	0x40012c00

08002f08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b087      	sub	sp, #28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 0303 	bic.w	r3, r3, #3
 8002f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a1d      	ldr	r2, [pc, #116]	; (8002fd8 <TIM_OC3_SetConfig+0xd0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d10d      	bne.n	8002f82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	021b      	lsls	r3, r3, #8
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a14      	ldr	r2, [pc, #80]	; (8002fd8 <TIM_OC3_SetConfig+0xd0>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d113      	bne.n	8002fb2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	621a      	str	r2, [r3, #32]
}
 8002fcc:	bf00      	nop
 8002fce:	371c      	adds	r7, #28
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40012c00 	.word	0x40012c00

08002fdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800300a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	021b      	lsls	r3, r3, #8
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4313      	orrs	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003026:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	031b      	lsls	r3, r3, #12
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a0f      	ldr	r2, [pc, #60]	; (8003074 <TIM_OC4_SetConfig+0x98>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d109      	bne.n	8003050 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003042:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	019b      	lsls	r3, r3, #6
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	4313      	orrs	r3, r2
 800304e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	621a      	str	r2, [r3, #32]
}
 800306a:	bf00      	nop
 800306c:	371c      	adds	r7, #28
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr
 8003074:	40012c00 	.word	0x40012c00

08003078 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003078:	b480      	push	{r7}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	f023 0201 	bic.w	r2, r3, #1
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f023 030a 	bic.w	r3, r3, #10
 80030b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	621a      	str	r2, [r3, #32]
}
 80030ca:	bf00      	nop
 80030cc:	371c      	adds	r7, #28
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr

080030d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	f023 0210 	bic.w	r2, r3, #16
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	031b      	lsls	r3, r3, #12
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	4313      	orrs	r3, r2
 8003108:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003110:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4313      	orrs	r3, r2
 800311a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	621a      	str	r2, [r3, #32]
}
 8003128:	bf00      	nop
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr

08003132 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003132:	b480      	push	{r7}
 8003134:	b085      	sub	sp, #20
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003148:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4313      	orrs	r3, r2
 8003150:	f043 0307 	orr.w	r3, r3, #7
 8003154:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	609a      	str	r2, [r3, #8]
}
 800315c:	bf00      	nop
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr

08003166 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003166:	b480      	push	{r7}
 8003168:	b087      	sub	sp, #28
 800316a:	af00      	add	r7, sp, #0
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	607a      	str	r2, [r7, #4]
 8003172:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003180:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	021a      	lsls	r2, r3, #8
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	431a      	orrs	r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	4313      	orrs	r3, r2
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	609a      	str	r2, [r3, #8]
}
 800319a:	bf00      	nop
 800319c:	371c      	adds	r7, #28
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr

080031a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f003 031f 	and.w	r3, r3, #31
 80031b6:	2201      	movs	r2, #1
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6a1a      	ldr	r2, [r3, #32]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	43db      	mvns	r3, r3
 80031c6:	401a      	ands	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a1a      	ldr	r2, [r3, #32]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	f003 031f 	and.w	r3, r3, #31
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	fa01 f303 	lsl.w	r3, r1, r3
 80031dc:	431a      	orrs	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	621a      	str	r2, [r3, #32]
}
 80031e2:	bf00      	nop
 80031e4:	371c      	adds	r7, #28
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr

080031ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d101      	bne.n	8003204 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003200:	2302      	movs	r3, #2
 8003202:	e041      	b.n	8003288 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	4313      	orrs	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a14      	ldr	r2, [pc, #80]	; (8003294 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d009      	beq.n	800325c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003250:	d004      	beq.n	800325c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a10      	ldr	r2, [pc, #64]	; (8003298 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d10c      	bne.n	8003276 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003262:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	4313      	orrs	r3, r2
 800326c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	40012c00 	.word	0x40012c00
 8003298:	40000400 	.word	0x40000400

0800329c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr

080032ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr

080032c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e03f      	b.n	8003352 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d106      	bne.n	80032ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7fd ff0c 	bl	8001104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2224      	movs	r2, #36	; 0x24
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003302:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 fbed 	bl	8003ae4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	691a      	ldr	r2, [r3, #16]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003318:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695a      	ldr	r2, [r3, #20]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003328:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68da      	ldr	r2, [r3, #12]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003338:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800335a:	b480      	push	{r7}
 800335c:	b085      	sub	sp, #20
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	4613      	mov	r3, r2
 8003366:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b20      	cmp	r3, #32
 8003372:	d130      	bne.n	80033d6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d002      	beq.n	8003380 <HAL_UART_Transmit_IT+0x26>
 800337a:	88fb      	ldrh	r3, [r7, #6]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e029      	b.n	80033d8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <HAL_UART_Transmit_IT+0x38>
 800338e:	2302      	movs	r3, #2
 8003390:	e022      	b.n	80033d8 <HAL_UART_Transmit_IT+0x7e>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	88fa      	ldrh	r2, [r7, #6]
 80033a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	88fa      	ldrh	r2, [r7, #6]
 80033aa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2221      	movs	r2, #33	; 0x21
 80033b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033d0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	e000      	b.n	80033d8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80033d6:	2302      	movs	r3, #2
  }
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr

080033e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b084      	sub	sp, #16
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	60f8      	str	r0, [r7, #12]
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	4613      	mov	r3, r2
 80033ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b20      	cmp	r3, #32
 80033fa:	d11d      	bne.n	8003438 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <HAL_UART_Receive_IT+0x26>
 8003402:	88fb      	ldrh	r3, [r7, #6]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e016      	b.n	800343a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <HAL_UART_Receive_IT+0x38>
 8003416:	2302      	movs	r3, #2
 8003418:	e00f      	b.n	800343a <HAL_UART_Receive_IT+0x58>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003428:	88fb      	ldrh	r3, [r7, #6]
 800342a:	461a      	mov	r2, r3
 800342c:	68b9      	ldr	r1, [r7, #8]
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 f9cf 	bl	80037d2 <UART_Start_Receive_IT>
 8003434:	4603      	mov	r3, r0
 8003436:	e000      	b.n	800343a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003438:	2302      	movs	r3, #2
  }
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08a      	sub	sp, #40	; 0x28
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003464:	2300      	movs	r3, #0
 8003466:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10d      	bne.n	8003496 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <HAL_UART_IRQHandler+0x52>
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	f003 0320 	and.w	r3, r3, #32
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fa7f 	bl	8003992 <UART_Receive_IT>
      return;
 8003494:	e17b      	b.n	800378e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 80b1 	beq.w	8003600 <HAL_UART_IRQHandler+0x1bc>
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d105      	bne.n	80034b4 <HAL_UART_IRQHandler+0x70>
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 80a6 	beq.w	8003600 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <HAL_UART_IRQHandler+0x90>
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	f043 0201 	orr.w	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	f003 0304 	and.w	r3, r3, #4
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_UART_IRQHandler+0xb0>
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	f043 0202 	orr.w	r2, r3, #2
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <HAL_UART_IRQHandler+0xd0>
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d005      	beq.n	8003514 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	f043 0204 	orr.w	r2, r3, #4
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00f      	beq.n	800353e <HAL_UART_IRQHandler+0xfa>
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	2b00      	cmp	r3, #0
 8003526:	d104      	bne.n	8003532 <HAL_UART_IRQHandler+0xee>
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d005      	beq.n	800353e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	f043 0208 	orr.w	r2, r3, #8
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 811e 	beq.w	8003784 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	f003 0320 	and.w	r3, r3, #32
 800354e:	2b00      	cmp	r3, #0
 8003550:	d007      	beq.n	8003562 <HAL_UART_IRQHandler+0x11e>
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	f003 0320 	and.w	r3, r3, #32
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 fa18 	bl	8003992 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356c:	2b00      	cmp	r3, #0
 800356e:	bf14      	ite	ne
 8003570:	2301      	movne	r3, #1
 8003572:	2300      	moveq	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b00      	cmp	r3, #0
 8003582:	d102      	bne.n	800358a <HAL_UART_IRQHandler+0x146>
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d031      	beq.n	80035ee <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f95a 	bl	8003844 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d023      	beq.n	80035e6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695a      	ldr	r2, [r3, #20]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035ac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d013      	beq.n	80035de <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ba:	4a76      	ldr	r2, [pc, #472]	; (8003794 <HAL_UART_IRQHandler+0x350>)
 80035bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fe f884 	bl	80016d0 <HAL_DMA_Abort_IT>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d016      	beq.n	80035fc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035d8:	4610      	mov	r0, r2
 80035da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035dc:	e00e      	b.n	80035fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f8e3 	bl	80037aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e4:	e00a      	b.n	80035fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f8df 	bl	80037aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ec:	e006      	b.n	80035fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f8db 	bl	80037aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80035fa:	e0c3      	b.n	8003784 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035fc:	bf00      	nop
    return;
 80035fe:	e0c1      	b.n	8003784 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003604:	2b01      	cmp	r3, #1
 8003606:	f040 80a1 	bne.w	800374c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	f003 0310 	and.w	r3, r3, #16
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 809b 	beq.w	800374c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 8095 	beq.w	800374c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003622:	2300      	movs	r3, #0
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003642:	2b00      	cmp	r3, #0
 8003644:	d04e      	beq.n	80036e4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003650:	8a3b      	ldrh	r3, [r7, #16]
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 8098 	beq.w	8003788 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800365c:	8a3a      	ldrh	r2, [r7, #16]
 800365e:	429a      	cmp	r2, r3
 8003660:	f080 8092 	bcs.w	8003788 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	8a3a      	ldrh	r2, [r7, #16]
 8003668:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	2b20      	cmp	r3, #32
 8003672:	d02b      	beq.n	80036cc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003682:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695a      	ldr	r2, [r3, #20]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0201 	bic.w	r2, r2, #1
 8003692:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695a      	ldr	r2, [r3, #20]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0210 	bic.w	r2, r2, #16
 80036c0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fd ffc7 	bl	800165a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	b29b      	uxth	r3, r3
 80036da:	4619      	mov	r1, r3
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f86d 	bl	80037bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80036e2:	e051      	b.n	8003788 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d047      	beq.n	800378c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80036fc:	8a7b      	ldrh	r3, [r7, #18]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d044      	beq.n	800378c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003710:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695a      	ldr	r2, [r3, #20]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0201 	bic.w	r2, r2, #1
 8003720:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2220      	movs	r2, #32
 8003726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0210 	bic.w	r2, r2, #16
 800373e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003740:	8a7b      	ldrh	r3, [r7, #18]
 8003742:	4619      	mov	r1, r3
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f839 	bl	80037bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800374a:	e01f      	b.n	800378c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003752:	2b00      	cmp	r3, #0
 8003754:	d008      	beq.n	8003768 <HAL_UART_IRQHandler+0x324>
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f8af 	bl	80038c4 <UART_Transmit_IT>
    return;
 8003766:	e012      	b.n	800378e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00d      	beq.n	800378e <HAL_UART_IRQHandler+0x34a>
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f8f0 	bl	8003962 <UART_EndTransmit_IT>
    return;
 8003782:	e004      	b.n	800378e <HAL_UART_IRQHandler+0x34a>
    return;
 8003784:	bf00      	nop
 8003786:	e002      	b.n	800378e <HAL_UART_IRQHandler+0x34a>
      return;
 8003788:	bf00      	nop
 800378a:	e000      	b.n	800378e <HAL_UART_IRQHandler+0x34a>
      return;
 800378c:	bf00      	nop
  }
}
 800378e:	3728      	adds	r7, #40	; 0x28
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	0800389d 	.word	0x0800389d

08003798 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bc80      	pop	{r7}
 80037a8:	4770      	bx	lr

080037aa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr

080037bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	460b      	mov	r3, r1
 80037c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bc80      	pop	{r7}
 80037d0:	4770      	bx	lr

080037d2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b085      	sub	sp, #20
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	60f8      	str	r0, [r7, #12]
 80037da:	60b9      	str	r1, [r7, #8]
 80037dc:	4613      	mov	r3, r2
 80037de:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	88fa      	ldrh	r2, [r7, #6]
 80037ea:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	88fa      	ldrh	r2, [r7, #6]
 80037f0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2222      	movs	r2, #34	; 0x22
 80037fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003816:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695a      	ldr	r2, [r3, #20]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0220 	orr.w	r2, r2, #32
 8003836:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	bc80      	pop	{r7}
 8003842:	4770      	bx	lr

08003844 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800385a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695a      	ldr	r2, [r3, #20]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0201 	bic.w	r2, r2, #1
 800386a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	2b01      	cmp	r3, #1
 8003872:	d107      	bne.n	8003884 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0210 	bic.w	r2, r2, #16
 8003882:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr

0800389c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f7ff ff77 	bl	80037aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038bc:	bf00      	nop
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b21      	cmp	r3, #33	; 0x21
 80038d6:	d13e      	bne.n	8003956 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e0:	d114      	bne.n	800390c <UART_Transmit_IT+0x48>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d110      	bne.n	800390c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	461a      	mov	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	1c9a      	adds	r2, r3, #2
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	621a      	str	r2, [r3, #32]
 800390a:	e008      	b.n	800391e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	1c59      	adds	r1, r3, #1
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6211      	str	r1, [r2, #32]
 8003916:	781a      	ldrb	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b01      	subs	r3, #1
 8003926:	b29b      	uxth	r3, r3
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	4619      	mov	r1, r3
 800392c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10f      	bne.n	8003952 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003940:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003950:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	e000      	b.n	8003958 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003956:	2302      	movs	r3, #2
  }
}
 8003958:	4618      	mov	r0, r3
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	bc80      	pop	{r7}
 8003960:	4770      	bx	lr

08003962 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003978:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff ff08 	bl	8003798 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b086      	sub	sp, #24
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b22      	cmp	r3, #34	; 0x22
 80039a4:	f040 8099 	bne.w	8003ada <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b0:	d117      	bne.n	80039e2 <UART_Receive_IT+0x50>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d113      	bne.n	80039e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039ba:	2300      	movs	r3, #0
 80039bc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	1c9a      	adds	r2, r3, #2
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	629a      	str	r2, [r3, #40]	; 0x28
 80039e0:	e026      	b.n	8003a30 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80039e8:	2300      	movs	r3, #0
 80039ea:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f4:	d007      	beq.n	8003a06 <UART_Receive_IT+0x74>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10a      	bne.n	8003a14 <UART_Receive_IT+0x82>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	701a      	strb	r2, [r3, #0]
 8003a12:	e008      	b.n	8003a26 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	3b01      	subs	r3, #1
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d148      	bne.n	8003ad6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0220 	bic.w	r2, r2, #32
 8003a52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695a      	ldr	r2, [r3, #20]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0201 	bic.w	r2, r2, #1
 8003a72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d123      	bne.n	8003acc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0210 	bic.w	r2, r2, #16
 8003a98:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0310 	and.w	r3, r3, #16
 8003aa4:	2b10      	cmp	r3, #16
 8003aa6:	d10a      	bne.n	8003abe <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff fe79 	bl	80037bc <HAL_UARTEx_RxEventCallback>
 8003aca:	e002      	b.n	8003ad2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7fc ff7b 	bl	80009c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	e002      	b.n	8003adc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	e000      	b.n	8003adc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003ada:	2302      	movs	r3, #2
  }
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b1e:	f023 030c 	bic.w	r3, r3, #12
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6812      	ldr	r2, [r2, #0]
 8003b26:	68b9      	ldr	r1, [r7, #8]
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a2c      	ldr	r2, [pc, #176]	; (8003bf8 <UART_SetConfig+0x114>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d103      	bne.n	8003b54 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b4c:	f7fe fbe0 	bl	8002310 <HAL_RCC_GetPCLK2Freq>
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	e002      	b.n	8003b5a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b54:	f7fe fbc8 	bl	80022e8 <HAL_RCC_GetPCLK1Freq>
 8003b58:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	009a      	lsls	r2, r3, #2
 8003b64:	441a      	add	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b70:	4a22      	ldr	r2, [pc, #136]	; (8003bfc <UART_SetConfig+0x118>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	095b      	lsrs	r3, r3, #5
 8003b78:	0119      	lsls	r1, r3, #4
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	009a      	lsls	r2, r3, #2
 8003b84:	441a      	add	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b90:	4b1a      	ldr	r3, [pc, #104]	; (8003bfc <UART_SetConfig+0x118>)
 8003b92:	fba3 0302 	umull	r0, r3, r3, r2
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	2064      	movs	r0, #100	; 0x64
 8003b9a:	fb00 f303 	mul.w	r3, r0, r3
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	3332      	adds	r3, #50	; 0x32
 8003ba4:	4a15      	ldr	r2, [pc, #84]	; (8003bfc <UART_SetConfig+0x118>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bb0:	4419      	add	r1, r3
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	009a      	lsls	r2, r3, #2
 8003bbc:	441a      	add	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bc8:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <UART_SetConfig+0x118>)
 8003bca:	fba3 0302 	umull	r0, r3, r3, r2
 8003bce:	095b      	lsrs	r3, r3, #5
 8003bd0:	2064      	movs	r0, #100	; 0x64
 8003bd2:	fb00 f303 	mul.w	r3, r0, r3
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	3332      	adds	r3, #50	; 0x32
 8003bdc:	4a07      	ldr	r2, [pc, #28]	; (8003bfc <UART_SetConfig+0x118>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	f003 020f 	and.w	r2, r3, #15
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	440a      	add	r2, r1
 8003bee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003bf0:	bf00      	nop
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40013800 	.word	0x40013800
 8003bfc:	51eb851f 	.word	0x51eb851f

08003c00 <__errno>:
 8003c00:	4b01      	ldr	r3, [pc, #4]	; (8003c08 <__errno+0x8>)
 8003c02:	6818      	ldr	r0, [r3, #0]
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	2000000c 	.word	0x2000000c

08003c0c <__libc_init_array>:
 8003c0c:	b570      	push	{r4, r5, r6, lr}
 8003c0e:	2600      	movs	r6, #0
 8003c10:	4d0c      	ldr	r5, [pc, #48]	; (8003c44 <__libc_init_array+0x38>)
 8003c12:	4c0d      	ldr	r4, [pc, #52]	; (8003c48 <__libc_init_array+0x3c>)
 8003c14:	1b64      	subs	r4, r4, r5
 8003c16:	10a4      	asrs	r4, r4, #2
 8003c18:	42a6      	cmp	r6, r4
 8003c1a:	d109      	bne.n	8003c30 <__libc_init_array+0x24>
 8003c1c:	f000 fc70 	bl	8004500 <_init>
 8003c20:	2600      	movs	r6, #0
 8003c22:	4d0a      	ldr	r5, [pc, #40]	; (8003c4c <__libc_init_array+0x40>)
 8003c24:	4c0a      	ldr	r4, [pc, #40]	; (8003c50 <__libc_init_array+0x44>)
 8003c26:	1b64      	subs	r4, r4, r5
 8003c28:	10a4      	asrs	r4, r4, #2
 8003c2a:	42a6      	cmp	r6, r4
 8003c2c:	d105      	bne.n	8003c3a <__libc_init_array+0x2e>
 8003c2e:	bd70      	pop	{r4, r5, r6, pc}
 8003c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c34:	4798      	blx	r3
 8003c36:	3601      	adds	r6, #1
 8003c38:	e7ee      	b.n	8003c18 <__libc_init_array+0xc>
 8003c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c3e:	4798      	blx	r3
 8003c40:	3601      	adds	r6, #1
 8003c42:	e7f2      	b.n	8003c2a <__libc_init_array+0x1e>
 8003c44:	080045fc 	.word	0x080045fc
 8003c48:	080045fc 	.word	0x080045fc
 8003c4c:	080045fc 	.word	0x080045fc
 8003c50:	08004600 	.word	0x08004600

08003c54 <memset>:
 8003c54:	4603      	mov	r3, r0
 8003c56:	4402      	add	r2, r0
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d100      	bne.n	8003c5e <memset+0xa>
 8003c5c:	4770      	bx	lr
 8003c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c62:	e7f9      	b.n	8003c58 <memset+0x4>

08003c64 <sniprintf>:
 8003c64:	b40c      	push	{r2, r3}
 8003c66:	b530      	push	{r4, r5, lr}
 8003c68:	4b17      	ldr	r3, [pc, #92]	; (8003cc8 <sniprintf+0x64>)
 8003c6a:	1e0c      	subs	r4, r1, #0
 8003c6c:	681d      	ldr	r5, [r3, #0]
 8003c6e:	b09d      	sub	sp, #116	; 0x74
 8003c70:	da08      	bge.n	8003c84 <sniprintf+0x20>
 8003c72:	238b      	movs	r3, #139	; 0x8b
 8003c74:	f04f 30ff 	mov.w	r0, #4294967295
 8003c78:	602b      	str	r3, [r5, #0]
 8003c7a:	b01d      	add	sp, #116	; 0x74
 8003c7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c80:	b002      	add	sp, #8
 8003c82:	4770      	bx	lr
 8003c84:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003c88:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003c8c:	bf0c      	ite	eq
 8003c8e:	4623      	moveq	r3, r4
 8003c90:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003c94:	9304      	str	r3, [sp, #16]
 8003c96:	9307      	str	r3, [sp, #28]
 8003c98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c9c:	9002      	str	r0, [sp, #8]
 8003c9e:	9006      	str	r0, [sp, #24]
 8003ca0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	ab21      	add	r3, sp, #132	; 0x84
 8003ca8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003caa:	a902      	add	r1, sp, #8
 8003cac:	9301      	str	r3, [sp, #4]
 8003cae:	f000 f869 	bl	8003d84 <_svfiprintf_r>
 8003cb2:	1c43      	adds	r3, r0, #1
 8003cb4:	bfbc      	itt	lt
 8003cb6:	238b      	movlt	r3, #139	; 0x8b
 8003cb8:	602b      	strlt	r3, [r5, #0]
 8003cba:	2c00      	cmp	r4, #0
 8003cbc:	d0dd      	beq.n	8003c7a <sniprintf+0x16>
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	9b02      	ldr	r3, [sp, #8]
 8003cc2:	701a      	strb	r2, [r3, #0]
 8003cc4:	e7d9      	b.n	8003c7a <sniprintf+0x16>
 8003cc6:	bf00      	nop
 8003cc8:	2000000c 	.word	0x2000000c

08003ccc <__ssputs_r>:
 8003ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd0:	688e      	ldr	r6, [r1, #8]
 8003cd2:	4682      	mov	sl, r0
 8003cd4:	429e      	cmp	r6, r3
 8003cd6:	460c      	mov	r4, r1
 8003cd8:	4690      	mov	r8, r2
 8003cda:	461f      	mov	r7, r3
 8003cdc:	d838      	bhi.n	8003d50 <__ssputs_r+0x84>
 8003cde:	898a      	ldrh	r2, [r1, #12]
 8003ce0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ce4:	d032      	beq.n	8003d4c <__ssputs_r+0x80>
 8003ce6:	6825      	ldr	r5, [r4, #0]
 8003ce8:	6909      	ldr	r1, [r1, #16]
 8003cea:	3301      	adds	r3, #1
 8003cec:	eba5 0901 	sub.w	r9, r5, r1
 8003cf0:	6965      	ldr	r5, [r4, #20]
 8003cf2:	444b      	add	r3, r9
 8003cf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003cfc:	106d      	asrs	r5, r5, #1
 8003cfe:	429d      	cmp	r5, r3
 8003d00:	bf38      	it	cc
 8003d02:	461d      	movcc	r5, r3
 8003d04:	0553      	lsls	r3, r2, #21
 8003d06:	d531      	bpl.n	8003d6c <__ssputs_r+0xa0>
 8003d08:	4629      	mov	r1, r5
 8003d0a:	f000 fb53 	bl	80043b4 <_malloc_r>
 8003d0e:	4606      	mov	r6, r0
 8003d10:	b950      	cbnz	r0, 8003d28 <__ssputs_r+0x5c>
 8003d12:	230c      	movs	r3, #12
 8003d14:	f04f 30ff 	mov.w	r0, #4294967295
 8003d18:	f8ca 3000 	str.w	r3, [sl]
 8003d1c:	89a3      	ldrh	r3, [r4, #12]
 8003d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d22:	81a3      	strh	r3, [r4, #12]
 8003d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d28:	464a      	mov	r2, r9
 8003d2a:	6921      	ldr	r1, [r4, #16]
 8003d2c:	f000 face 	bl	80042cc <memcpy>
 8003d30:	89a3      	ldrh	r3, [r4, #12]
 8003d32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d3a:	81a3      	strh	r3, [r4, #12]
 8003d3c:	6126      	str	r6, [r4, #16]
 8003d3e:	444e      	add	r6, r9
 8003d40:	6026      	str	r6, [r4, #0]
 8003d42:	463e      	mov	r6, r7
 8003d44:	6165      	str	r5, [r4, #20]
 8003d46:	eba5 0509 	sub.w	r5, r5, r9
 8003d4a:	60a5      	str	r5, [r4, #8]
 8003d4c:	42be      	cmp	r6, r7
 8003d4e:	d900      	bls.n	8003d52 <__ssputs_r+0x86>
 8003d50:	463e      	mov	r6, r7
 8003d52:	4632      	mov	r2, r6
 8003d54:	4641      	mov	r1, r8
 8003d56:	6820      	ldr	r0, [r4, #0]
 8003d58:	f000 fac6 	bl	80042e8 <memmove>
 8003d5c:	68a3      	ldr	r3, [r4, #8]
 8003d5e:	6822      	ldr	r2, [r4, #0]
 8003d60:	1b9b      	subs	r3, r3, r6
 8003d62:	4432      	add	r2, r6
 8003d64:	2000      	movs	r0, #0
 8003d66:	60a3      	str	r3, [r4, #8]
 8003d68:	6022      	str	r2, [r4, #0]
 8003d6a:	e7db      	b.n	8003d24 <__ssputs_r+0x58>
 8003d6c:	462a      	mov	r2, r5
 8003d6e:	f000 fb7b 	bl	8004468 <_realloc_r>
 8003d72:	4606      	mov	r6, r0
 8003d74:	2800      	cmp	r0, #0
 8003d76:	d1e1      	bne.n	8003d3c <__ssputs_r+0x70>
 8003d78:	4650      	mov	r0, sl
 8003d7a:	6921      	ldr	r1, [r4, #16]
 8003d7c:	f000 face 	bl	800431c <_free_r>
 8003d80:	e7c7      	b.n	8003d12 <__ssputs_r+0x46>
	...

08003d84 <_svfiprintf_r>:
 8003d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d88:	4698      	mov	r8, r3
 8003d8a:	898b      	ldrh	r3, [r1, #12]
 8003d8c:	4607      	mov	r7, r0
 8003d8e:	061b      	lsls	r3, r3, #24
 8003d90:	460d      	mov	r5, r1
 8003d92:	4614      	mov	r4, r2
 8003d94:	b09d      	sub	sp, #116	; 0x74
 8003d96:	d50e      	bpl.n	8003db6 <_svfiprintf_r+0x32>
 8003d98:	690b      	ldr	r3, [r1, #16]
 8003d9a:	b963      	cbnz	r3, 8003db6 <_svfiprintf_r+0x32>
 8003d9c:	2140      	movs	r1, #64	; 0x40
 8003d9e:	f000 fb09 	bl	80043b4 <_malloc_r>
 8003da2:	6028      	str	r0, [r5, #0]
 8003da4:	6128      	str	r0, [r5, #16]
 8003da6:	b920      	cbnz	r0, 8003db2 <_svfiprintf_r+0x2e>
 8003da8:	230c      	movs	r3, #12
 8003daa:	603b      	str	r3, [r7, #0]
 8003dac:	f04f 30ff 	mov.w	r0, #4294967295
 8003db0:	e0d1      	b.n	8003f56 <_svfiprintf_r+0x1d2>
 8003db2:	2340      	movs	r3, #64	; 0x40
 8003db4:	616b      	str	r3, [r5, #20]
 8003db6:	2300      	movs	r3, #0
 8003db8:	9309      	str	r3, [sp, #36]	; 0x24
 8003dba:	2320      	movs	r3, #32
 8003dbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003dc0:	2330      	movs	r3, #48	; 0x30
 8003dc2:	f04f 0901 	mov.w	r9, #1
 8003dc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003f70 <_svfiprintf_r+0x1ec>
 8003dce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003dd2:	4623      	mov	r3, r4
 8003dd4:	469a      	mov	sl, r3
 8003dd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dda:	b10a      	cbz	r2, 8003de0 <_svfiprintf_r+0x5c>
 8003ddc:	2a25      	cmp	r2, #37	; 0x25
 8003dde:	d1f9      	bne.n	8003dd4 <_svfiprintf_r+0x50>
 8003de0:	ebba 0b04 	subs.w	fp, sl, r4
 8003de4:	d00b      	beq.n	8003dfe <_svfiprintf_r+0x7a>
 8003de6:	465b      	mov	r3, fp
 8003de8:	4622      	mov	r2, r4
 8003dea:	4629      	mov	r1, r5
 8003dec:	4638      	mov	r0, r7
 8003dee:	f7ff ff6d 	bl	8003ccc <__ssputs_r>
 8003df2:	3001      	adds	r0, #1
 8003df4:	f000 80aa 	beq.w	8003f4c <_svfiprintf_r+0x1c8>
 8003df8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003dfa:	445a      	add	r2, fp
 8003dfc:	9209      	str	r2, [sp, #36]	; 0x24
 8003dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 80a2 	beq.w	8003f4c <_svfiprintf_r+0x1c8>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e12:	f10a 0a01 	add.w	sl, sl, #1
 8003e16:	9304      	str	r3, [sp, #16]
 8003e18:	9307      	str	r3, [sp, #28]
 8003e1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e1e:	931a      	str	r3, [sp, #104]	; 0x68
 8003e20:	4654      	mov	r4, sl
 8003e22:	2205      	movs	r2, #5
 8003e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e28:	4851      	ldr	r0, [pc, #324]	; (8003f70 <_svfiprintf_r+0x1ec>)
 8003e2a:	f000 fa41 	bl	80042b0 <memchr>
 8003e2e:	9a04      	ldr	r2, [sp, #16]
 8003e30:	b9d8      	cbnz	r0, 8003e6a <_svfiprintf_r+0xe6>
 8003e32:	06d0      	lsls	r0, r2, #27
 8003e34:	bf44      	itt	mi
 8003e36:	2320      	movmi	r3, #32
 8003e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e3c:	0711      	lsls	r1, r2, #28
 8003e3e:	bf44      	itt	mi
 8003e40:	232b      	movmi	r3, #43	; 0x2b
 8003e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e46:	f89a 3000 	ldrb.w	r3, [sl]
 8003e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8003e4c:	d015      	beq.n	8003e7a <_svfiprintf_r+0xf6>
 8003e4e:	4654      	mov	r4, sl
 8003e50:	2000      	movs	r0, #0
 8003e52:	f04f 0c0a 	mov.w	ip, #10
 8003e56:	9a07      	ldr	r2, [sp, #28]
 8003e58:	4621      	mov	r1, r4
 8003e5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e5e:	3b30      	subs	r3, #48	; 0x30
 8003e60:	2b09      	cmp	r3, #9
 8003e62:	d94e      	bls.n	8003f02 <_svfiprintf_r+0x17e>
 8003e64:	b1b0      	cbz	r0, 8003e94 <_svfiprintf_r+0x110>
 8003e66:	9207      	str	r2, [sp, #28]
 8003e68:	e014      	b.n	8003e94 <_svfiprintf_r+0x110>
 8003e6a:	eba0 0308 	sub.w	r3, r0, r8
 8003e6e:	fa09 f303 	lsl.w	r3, r9, r3
 8003e72:	4313      	orrs	r3, r2
 8003e74:	46a2      	mov	sl, r4
 8003e76:	9304      	str	r3, [sp, #16]
 8003e78:	e7d2      	b.n	8003e20 <_svfiprintf_r+0x9c>
 8003e7a:	9b03      	ldr	r3, [sp, #12]
 8003e7c:	1d19      	adds	r1, r3, #4
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	9103      	str	r1, [sp, #12]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	bfbb      	ittet	lt
 8003e86:	425b      	neglt	r3, r3
 8003e88:	f042 0202 	orrlt.w	r2, r2, #2
 8003e8c:	9307      	strge	r3, [sp, #28]
 8003e8e:	9307      	strlt	r3, [sp, #28]
 8003e90:	bfb8      	it	lt
 8003e92:	9204      	strlt	r2, [sp, #16]
 8003e94:	7823      	ldrb	r3, [r4, #0]
 8003e96:	2b2e      	cmp	r3, #46	; 0x2e
 8003e98:	d10c      	bne.n	8003eb4 <_svfiprintf_r+0x130>
 8003e9a:	7863      	ldrb	r3, [r4, #1]
 8003e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8003e9e:	d135      	bne.n	8003f0c <_svfiprintf_r+0x188>
 8003ea0:	9b03      	ldr	r3, [sp, #12]
 8003ea2:	3402      	adds	r4, #2
 8003ea4:	1d1a      	adds	r2, r3, #4
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	9203      	str	r2, [sp, #12]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	bfb8      	it	lt
 8003eae:	f04f 33ff 	movlt.w	r3, #4294967295
 8003eb2:	9305      	str	r3, [sp, #20]
 8003eb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003f80 <_svfiprintf_r+0x1fc>
 8003eb8:	2203      	movs	r2, #3
 8003eba:	4650      	mov	r0, sl
 8003ebc:	7821      	ldrb	r1, [r4, #0]
 8003ebe:	f000 f9f7 	bl	80042b0 <memchr>
 8003ec2:	b140      	cbz	r0, 8003ed6 <_svfiprintf_r+0x152>
 8003ec4:	2340      	movs	r3, #64	; 0x40
 8003ec6:	eba0 000a 	sub.w	r0, r0, sl
 8003eca:	fa03 f000 	lsl.w	r0, r3, r0
 8003ece:	9b04      	ldr	r3, [sp, #16]
 8003ed0:	3401      	adds	r4, #1
 8003ed2:	4303      	orrs	r3, r0
 8003ed4:	9304      	str	r3, [sp, #16]
 8003ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eda:	2206      	movs	r2, #6
 8003edc:	4825      	ldr	r0, [pc, #148]	; (8003f74 <_svfiprintf_r+0x1f0>)
 8003ede:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ee2:	f000 f9e5 	bl	80042b0 <memchr>
 8003ee6:	2800      	cmp	r0, #0
 8003ee8:	d038      	beq.n	8003f5c <_svfiprintf_r+0x1d8>
 8003eea:	4b23      	ldr	r3, [pc, #140]	; (8003f78 <_svfiprintf_r+0x1f4>)
 8003eec:	bb1b      	cbnz	r3, 8003f36 <_svfiprintf_r+0x1b2>
 8003eee:	9b03      	ldr	r3, [sp, #12]
 8003ef0:	3307      	adds	r3, #7
 8003ef2:	f023 0307 	bic.w	r3, r3, #7
 8003ef6:	3308      	adds	r3, #8
 8003ef8:	9303      	str	r3, [sp, #12]
 8003efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003efc:	4433      	add	r3, r6
 8003efe:	9309      	str	r3, [sp, #36]	; 0x24
 8003f00:	e767      	b.n	8003dd2 <_svfiprintf_r+0x4e>
 8003f02:	460c      	mov	r4, r1
 8003f04:	2001      	movs	r0, #1
 8003f06:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f0a:	e7a5      	b.n	8003e58 <_svfiprintf_r+0xd4>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	f04f 0c0a 	mov.w	ip, #10
 8003f12:	4619      	mov	r1, r3
 8003f14:	3401      	adds	r4, #1
 8003f16:	9305      	str	r3, [sp, #20]
 8003f18:	4620      	mov	r0, r4
 8003f1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f1e:	3a30      	subs	r2, #48	; 0x30
 8003f20:	2a09      	cmp	r2, #9
 8003f22:	d903      	bls.n	8003f2c <_svfiprintf_r+0x1a8>
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0c5      	beq.n	8003eb4 <_svfiprintf_r+0x130>
 8003f28:	9105      	str	r1, [sp, #20]
 8003f2a:	e7c3      	b.n	8003eb4 <_svfiprintf_r+0x130>
 8003f2c:	4604      	mov	r4, r0
 8003f2e:	2301      	movs	r3, #1
 8003f30:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f34:	e7f0      	b.n	8003f18 <_svfiprintf_r+0x194>
 8003f36:	ab03      	add	r3, sp, #12
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	462a      	mov	r2, r5
 8003f3c:	4638      	mov	r0, r7
 8003f3e:	4b0f      	ldr	r3, [pc, #60]	; (8003f7c <_svfiprintf_r+0x1f8>)
 8003f40:	a904      	add	r1, sp, #16
 8003f42:	f3af 8000 	nop.w
 8003f46:	1c42      	adds	r2, r0, #1
 8003f48:	4606      	mov	r6, r0
 8003f4a:	d1d6      	bne.n	8003efa <_svfiprintf_r+0x176>
 8003f4c:	89ab      	ldrh	r3, [r5, #12]
 8003f4e:	065b      	lsls	r3, r3, #25
 8003f50:	f53f af2c 	bmi.w	8003dac <_svfiprintf_r+0x28>
 8003f54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f56:	b01d      	add	sp, #116	; 0x74
 8003f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f5c:	ab03      	add	r3, sp, #12
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	462a      	mov	r2, r5
 8003f62:	4638      	mov	r0, r7
 8003f64:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <_svfiprintf_r+0x1f8>)
 8003f66:	a904      	add	r1, sp, #16
 8003f68:	f000 f87c 	bl	8004064 <_printf_i>
 8003f6c:	e7eb      	b.n	8003f46 <_svfiprintf_r+0x1c2>
 8003f6e:	bf00      	nop
 8003f70:	080045c8 	.word	0x080045c8
 8003f74:	080045d2 	.word	0x080045d2
 8003f78:	00000000 	.word	0x00000000
 8003f7c:	08003ccd 	.word	0x08003ccd
 8003f80:	080045ce 	.word	0x080045ce

08003f84 <_printf_common>:
 8003f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f88:	4616      	mov	r6, r2
 8003f8a:	4699      	mov	r9, r3
 8003f8c:	688a      	ldr	r2, [r1, #8]
 8003f8e:	690b      	ldr	r3, [r1, #16]
 8003f90:	4607      	mov	r7, r0
 8003f92:	4293      	cmp	r3, r2
 8003f94:	bfb8      	it	lt
 8003f96:	4613      	movlt	r3, r2
 8003f98:	6033      	str	r3, [r6, #0]
 8003f9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f9e:	460c      	mov	r4, r1
 8003fa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fa4:	b10a      	cbz	r2, 8003faa <_printf_common+0x26>
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	6033      	str	r3, [r6, #0]
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	0699      	lsls	r1, r3, #26
 8003fae:	bf42      	ittt	mi
 8003fb0:	6833      	ldrmi	r3, [r6, #0]
 8003fb2:	3302      	addmi	r3, #2
 8003fb4:	6033      	strmi	r3, [r6, #0]
 8003fb6:	6825      	ldr	r5, [r4, #0]
 8003fb8:	f015 0506 	ands.w	r5, r5, #6
 8003fbc:	d106      	bne.n	8003fcc <_printf_common+0x48>
 8003fbe:	f104 0a19 	add.w	sl, r4, #25
 8003fc2:	68e3      	ldr	r3, [r4, #12]
 8003fc4:	6832      	ldr	r2, [r6, #0]
 8003fc6:	1a9b      	subs	r3, r3, r2
 8003fc8:	42ab      	cmp	r3, r5
 8003fca:	dc28      	bgt.n	800401e <_printf_common+0x9a>
 8003fcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fd0:	1e13      	subs	r3, r2, #0
 8003fd2:	6822      	ldr	r2, [r4, #0]
 8003fd4:	bf18      	it	ne
 8003fd6:	2301      	movne	r3, #1
 8003fd8:	0692      	lsls	r2, r2, #26
 8003fda:	d42d      	bmi.n	8004038 <_printf_common+0xb4>
 8003fdc:	4649      	mov	r1, r9
 8003fde:	4638      	mov	r0, r7
 8003fe0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fe4:	47c0      	blx	r8
 8003fe6:	3001      	adds	r0, #1
 8003fe8:	d020      	beq.n	800402c <_printf_common+0xa8>
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	68e5      	ldr	r5, [r4, #12]
 8003fee:	f003 0306 	and.w	r3, r3, #6
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	bf18      	it	ne
 8003ff6:	2500      	movne	r5, #0
 8003ff8:	6832      	ldr	r2, [r6, #0]
 8003ffa:	f04f 0600 	mov.w	r6, #0
 8003ffe:	68a3      	ldr	r3, [r4, #8]
 8004000:	bf08      	it	eq
 8004002:	1aad      	subeq	r5, r5, r2
 8004004:	6922      	ldr	r2, [r4, #16]
 8004006:	bf08      	it	eq
 8004008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800400c:	4293      	cmp	r3, r2
 800400e:	bfc4      	itt	gt
 8004010:	1a9b      	subgt	r3, r3, r2
 8004012:	18ed      	addgt	r5, r5, r3
 8004014:	341a      	adds	r4, #26
 8004016:	42b5      	cmp	r5, r6
 8004018:	d11a      	bne.n	8004050 <_printf_common+0xcc>
 800401a:	2000      	movs	r0, #0
 800401c:	e008      	b.n	8004030 <_printf_common+0xac>
 800401e:	2301      	movs	r3, #1
 8004020:	4652      	mov	r2, sl
 8004022:	4649      	mov	r1, r9
 8004024:	4638      	mov	r0, r7
 8004026:	47c0      	blx	r8
 8004028:	3001      	adds	r0, #1
 800402a:	d103      	bne.n	8004034 <_printf_common+0xb0>
 800402c:	f04f 30ff 	mov.w	r0, #4294967295
 8004030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004034:	3501      	adds	r5, #1
 8004036:	e7c4      	b.n	8003fc2 <_printf_common+0x3e>
 8004038:	2030      	movs	r0, #48	; 0x30
 800403a:	18e1      	adds	r1, r4, r3
 800403c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004040:	1c5a      	adds	r2, r3, #1
 8004042:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004046:	4422      	add	r2, r4
 8004048:	3302      	adds	r3, #2
 800404a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800404e:	e7c5      	b.n	8003fdc <_printf_common+0x58>
 8004050:	2301      	movs	r3, #1
 8004052:	4622      	mov	r2, r4
 8004054:	4649      	mov	r1, r9
 8004056:	4638      	mov	r0, r7
 8004058:	47c0      	blx	r8
 800405a:	3001      	adds	r0, #1
 800405c:	d0e6      	beq.n	800402c <_printf_common+0xa8>
 800405e:	3601      	adds	r6, #1
 8004060:	e7d9      	b.n	8004016 <_printf_common+0x92>
	...

08004064 <_printf_i>:
 8004064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004068:	460c      	mov	r4, r1
 800406a:	7e27      	ldrb	r7, [r4, #24]
 800406c:	4691      	mov	r9, r2
 800406e:	2f78      	cmp	r7, #120	; 0x78
 8004070:	4680      	mov	r8, r0
 8004072:	469a      	mov	sl, r3
 8004074:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004076:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800407a:	d807      	bhi.n	800408c <_printf_i+0x28>
 800407c:	2f62      	cmp	r7, #98	; 0x62
 800407e:	d80a      	bhi.n	8004096 <_printf_i+0x32>
 8004080:	2f00      	cmp	r7, #0
 8004082:	f000 80d9 	beq.w	8004238 <_printf_i+0x1d4>
 8004086:	2f58      	cmp	r7, #88	; 0x58
 8004088:	f000 80a4 	beq.w	80041d4 <_printf_i+0x170>
 800408c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004090:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004094:	e03a      	b.n	800410c <_printf_i+0xa8>
 8004096:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800409a:	2b15      	cmp	r3, #21
 800409c:	d8f6      	bhi.n	800408c <_printf_i+0x28>
 800409e:	a001      	add	r0, pc, #4	; (adr r0, 80040a4 <_printf_i+0x40>)
 80040a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80040a4:	080040fd 	.word	0x080040fd
 80040a8:	08004111 	.word	0x08004111
 80040ac:	0800408d 	.word	0x0800408d
 80040b0:	0800408d 	.word	0x0800408d
 80040b4:	0800408d 	.word	0x0800408d
 80040b8:	0800408d 	.word	0x0800408d
 80040bc:	08004111 	.word	0x08004111
 80040c0:	0800408d 	.word	0x0800408d
 80040c4:	0800408d 	.word	0x0800408d
 80040c8:	0800408d 	.word	0x0800408d
 80040cc:	0800408d 	.word	0x0800408d
 80040d0:	0800421f 	.word	0x0800421f
 80040d4:	08004141 	.word	0x08004141
 80040d8:	08004201 	.word	0x08004201
 80040dc:	0800408d 	.word	0x0800408d
 80040e0:	0800408d 	.word	0x0800408d
 80040e4:	08004241 	.word	0x08004241
 80040e8:	0800408d 	.word	0x0800408d
 80040ec:	08004141 	.word	0x08004141
 80040f0:	0800408d 	.word	0x0800408d
 80040f4:	0800408d 	.word	0x0800408d
 80040f8:	08004209 	.word	0x08004209
 80040fc:	680b      	ldr	r3, [r1, #0]
 80040fe:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004102:	1d1a      	adds	r2, r3, #4
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	600a      	str	r2, [r1, #0]
 8004108:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800410c:	2301      	movs	r3, #1
 800410e:	e0a4      	b.n	800425a <_printf_i+0x1f6>
 8004110:	6825      	ldr	r5, [r4, #0]
 8004112:	6808      	ldr	r0, [r1, #0]
 8004114:	062e      	lsls	r6, r5, #24
 8004116:	f100 0304 	add.w	r3, r0, #4
 800411a:	d50a      	bpl.n	8004132 <_printf_i+0xce>
 800411c:	6805      	ldr	r5, [r0, #0]
 800411e:	600b      	str	r3, [r1, #0]
 8004120:	2d00      	cmp	r5, #0
 8004122:	da03      	bge.n	800412c <_printf_i+0xc8>
 8004124:	232d      	movs	r3, #45	; 0x2d
 8004126:	426d      	negs	r5, r5
 8004128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800412c:	230a      	movs	r3, #10
 800412e:	485e      	ldr	r0, [pc, #376]	; (80042a8 <_printf_i+0x244>)
 8004130:	e019      	b.n	8004166 <_printf_i+0x102>
 8004132:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004136:	6805      	ldr	r5, [r0, #0]
 8004138:	600b      	str	r3, [r1, #0]
 800413a:	bf18      	it	ne
 800413c:	b22d      	sxthne	r5, r5
 800413e:	e7ef      	b.n	8004120 <_printf_i+0xbc>
 8004140:	680b      	ldr	r3, [r1, #0]
 8004142:	6825      	ldr	r5, [r4, #0]
 8004144:	1d18      	adds	r0, r3, #4
 8004146:	6008      	str	r0, [r1, #0]
 8004148:	0628      	lsls	r0, r5, #24
 800414a:	d501      	bpl.n	8004150 <_printf_i+0xec>
 800414c:	681d      	ldr	r5, [r3, #0]
 800414e:	e002      	b.n	8004156 <_printf_i+0xf2>
 8004150:	0669      	lsls	r1, r5, #25
 8004152:	d5fb      	bpl.n	800414c <_printf_i+0xe8>
 8004154:	881d      	ldrh	r5, [r3, #0]
 8004156:	2f6f      	cmp	r7, #111	; 0x6f
 8004158:	bf0c      	ite	eq
 800415a:	2308      	moveq	r3, #8
 800415c:	230a      	movne	r3, #10
 800415e:	4852      	ldr	r0, [pc, #328]	; (80042a8 <_printf_i+0x244>)
 8004160:	2100      	movs	r1, #0
 8004162:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004166:	6866      	ldr	r6, [r4, #4]
 8004168:	2e00      	cmp	r6, #0
 800416a:	bfa8      	it	ge
 800416c:	6821      	ldrge	r1, [r4, #0]
 800416e:	60a6      	str	r6, [r4, #8]
 8004170:	bfa4      	itt	ge
 8004172:	f021 0104 	bicge.w	r1, r1, #4
 8004176:	6021      	strge	r1, [r4, #0]
 8004178:	b90d      	cbnz	r5, 800417e <_printf_i+0x11a>
 800417a:	2e00      	cmp	r6, #0
 800417c:	d04d      	beq.n	800421a <_printf_i+0x1b6>
 800417e:	4616      	mov	r6, r2
 8004180:	fbb5 f1f3 	udiv	r1, r5, r3
 8004184:	fb03 5711 	mls	r7, r3, r1, r5
 8004188:	5dc7      	ldrb	r7, [r0, r7]
 800418a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800418e:	462f      	mov	r7, r5
 8004190:	42bb      	cmp	r3, r7
 8004192:	460d      	mov	r5, r1
 8004194:	d9f4      	bls.n	8004180 <_printf_i+0x11c>
 8004196:	2b08      	cmp	r3, #8
 8004198:	d10b      	bne.n	80041b2 <_printf_i+0x14e>
 800419a:	6823      	ldr	r3, [r4, #0]
 800419c:	07df      	lsls	r7, r3, #31
 800419e:	d508      	bpl.n	80041b2 <_printf_i+0x14e>
 80041a0:	6923      	ldr	r3, [r4, #16]
 80041a2:	6861      	ldr	r1, [r4, #4]
 80041a4:	4299      	cmp	r1, r3
 80041a6:	bfde      	ittt	le
 80041a8:	2330      	movle	r3, #48	; 0x30
 80041aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041b2:	1b92      	subs	r2, r2, r6
 80041b4:	6122      	str	r2, [r4, #16]
 80041b6:	464b      	mov	r3, r9
 80041b8:	4621      	mov	r1, r4
 80041ba:	4640      	mov	r0, r8
 80041bc:	f8cd a000 	str.w	sl, [sp]
 80041c0:	aa03      	add	r2, sp, #12
 80041c2:	f7ff fedf 	bl	8003f84 <_printf_common>
 80041c6:	3001      	adds	r0, #1
 80041c8:	d14c      	bne.n	8004264 <_printf_i+0x200>
 80041ca:	f04f 30ff 	mov.w	r0, #4294967295
 80041ce:	b004      	add	sp, #16
 80041d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041d4:	4834      	ldr	r0, [pc, #208]	; (80042a8 <_printf_i+0x244>)
 80041d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80041da:	680e      	ldr	r6, [r1, #0]
 80041dc:	6823      	ldr	r3, [r4, #0]
 80041de:	f856 5b04 	ldr.w	r5, [r6], #4
 80041e2:	061f      	lsls	r7, r3, #24
 80041e4:	600e      	str	r6, [r1, #0]
 80041e6:	d514      	bpl.n	8004212 <_printf_i+0x1ae>
 80041e8:	07d9      	lsls	r1, r3, #31
 80041ea:	bf44      	itt	mi
 80041ec:	f043 0320 	orrmi.w	r3, r3, #32
 80041f0:	6023      	strmi	r3, [r4, #0]
 80041f2:	b91d      	cbnz	r5, 80041fc <_printf_i+0x198>
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	f023 0320 	bic.w	r3, r3, #32
 80041fa:	6023      	str	r3, [r4, #0]
 80041fc:	2310      	movs	r3, #16
 80041fe:	e7af      	b.n	8004160 <_printf_i+0xfc>
 8004200:	6823      	ldr	r3, [r4, #0]
 8004202:	f043 0320 	orr.w	r3, r3, #32
 8004206:	6023      	str	r3, [r4, #0]
 8004208:	2378      	movs	r3, #120	; 0x78
 800420a:	4828      	ldr	r0, [pc, #160]	; (80042ac <_printf_i+0x248>)
 800420c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004210:	e7e3      	b.n	80041da <_printf_i+0x176>
 8004212:	065e      	lsls	r6, r3, #25
 8004214:	bf48      	it	mi
 8004216:	b2ad      	uxthmi	r5, r5
 8004218:	e7e6      	b.n	80041e8 <_printf_i+0x184>
 800421a:	4616      	mov	r6, r2
 800421c:	e7bb      	b.n	8004196 <_printf_i+0x132>
 800421e:	680b      	ldr	r3, [r1, #0]
 8004220:	6826      	ldr	r6, [r4, #0]
 8004222:	1d1d      	adds	r5, r3, #4
 8004224:	6960      	ldr	r0, [r4, #20]
 8004226:	600d      	str	r5, [r1, #0]
 8004228:	0635      	lsls	r5, r6, #24
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	d501      	bpl.n	8004232 <_printf_i+0x1ce>
 800422e:	6018      	str	r0, [r3, #0]
 8004230:	e002      	b.n	8004238 <_printf_i+0x1d4>
 8004232:	0671      	lsls	r1, r6, #25
 8004234:	d5fb      	bpl.n	800422e <_printf_i+0x1ca>
 8004236:	8018      	strh	r0, [r3, #0]
 8004238:	2300      	movs	r3, #0
 800423a:	4616      	mov	r6, r2
 800423c:	6123      	str	r3, [r4, #16]
 800423e:	e7ba      	b.n	80041b6 <_printf_i+0x152>
 8004240:	680b      	ldr	r3, [r1, #0]
 8004242:	1d1a      	adds	r2, r3, #4
 8004244:	600a      	str	r2, [r1, #0]
 8004246:	681e      	ldr	r6, [r3, #0]
 8004248:	2100      	movs	r1, #0
 800424a:	4630      	mov	r0, r6
 800424c:	6862      	ldr	r2, [r4, #4]
 800424e:	f000 f82f 	bl	80042b0 <memchr>
 8004252:	b108      	cbz	r0, 8004258 <_printf_i+0x1f4>
 8004254:	1b80      	subs	r0, r0, r6
 8004256:	6060      	str	r0, [r4, #4]
 8004258:	6863      	ldr	r3, [r4, #4]
 800425a:	6123      	str	r3, [r4, #16]
 800425c:	2300      	movs	r3, #0
 800425e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004262:	e7a8      	b.n	80041b6 <_printf_i+0x152>
 8004264:	4632      	mov	r2, r6
 8004266:	4649      	mov	r1, r9
 8004268:	4640      	mov	r0, r8
 800426a:	6923      	ldr	r3, [r4, #16]
 800426c:	47d0      	blx	sl
 800426e:	3001      	adds	r0, #1
 8004270:	d0ab      	beq.n	80041ca <_printf_i+0x166>
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	079b      	lsls	r3, r3, #30
 8004276:	d413      	bmi.n	80042a0 <_printf_i+0x23c>
 8004278:	68e0      	ldr	r0, [r4, #12]
 800427a:	9b03      	ldr	r3, [sp, #12]
 800427c:	4298      	cmp	r0, r3
 800427e:	bfb8      	it	lt
 8004280:	4618      	movlt	r0, r3
 8004282:	e7a4      	b.n	80041ce <_printf_i+0x16a>
 8004284:	2301      	movs	r3, #1
 8004286:	4632      	mov	r2, r6
 8004288:	4649      	mov	r1, r9
 800428a:	4640      	mov	r0, r8
 800428c:	47d0      	blx	sl
 800428e:	3001      	adds	r0, #1
 8004290:	d09b      	beq.n	80041ca <_printf_i+0x166>
 8004292:	3501      	adds	r5, #1
 8004294:	68e3      	ldr	r3, [r4, #12]
 8004296:	9903      	ldr	r1, [sp, #12]
 8004298:	1a5b      	subs	r3, r3, r1
 800429a:	42ab      	cmp	r3, r5
 800429c:	dcf2      	bgt.n	8004284 <_printf_i+0x220>
 800429e:	e7eb      	b.n	8004278 <_printf_i+0x214>
 80042a0:	2500      	movs	r5, #0
 80042a2:	f104 0619 	add.w	r6, r4, #25
 80042a6:	e7f5      	b.n	8004294 <_printf_i+0x230>
 80042a8:	080045d9 	.word	0x080045d9
 80042ac:	080045ea 	.word	0x080045ea

080042b0 <memchr>:
 80042b0:	4603      	mov	r3, r0
 80042b2:	b510      	push	{r4, lr}
 80042b4:	b2c9      	uxtb	r1, r1
 80042b6:	4402      	add	r2, r0
 80042b8:	4293      	cmp	r3, r2
 80042ba:	4618      	mov	r0, r3
 80042bc:	d101      	bne.n	80042c2 <memchr+0x12>
 80042be:	2000      	movs	r0, #0
 80042c0:	e003      	b.n	80042ca <memchr+0x1a>
 80042c2:	7804      	ldrb	r4, [r0, #0]
 80042c4:	3301      	adds	r3, #1
 80042c6:	428c      	cmp	r4, r1
 80042c8:	d1f6      	bne.n	80042b8 <memchr+0x8>
 80042ca:	bd10      	pop	{r4, pc}

080042cc <memcpy>:
 80042cc:	440a      	add	r2, r1
 80042ce:	4291      	cmp	r1, r2
 80042d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80042d4:	d100      	bne.n	80042d8 <memcpy+0xc>
 80042d6:	4770      	bx	lr
 80042d8:	b510      	push	{r4, lr}
 80042da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042de:	4291      	cmp	r1, r2
 80042e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042e4:	d1f9      	bne.n	80042da <memcpy+0xe>
 80042e6:	bd10      	pop	{r4, pc}

080042e8 <memmove>:
 80042e8:	4288      	cmp	r0, r1
 80042ea:	b510      	push	{r4, lr}
 80042ec:	eb01 0402 	add.w	r4, r1, r2
 80042f0:	d902      	bls.n	80042f8 <memmove+0x10>
 80042f2:	4284      	cmp	r4, r0
 80042f4:	4623      	mov	r3, r4
 80042f6:	d807      	bhi.n	8004308 <memmove+0x20>
 80042f8:	1e43      	subs	r3, r0, #1
 80042fa:	42a1      	cmp	r1, r4
 80042fc:	d008      	beq.n	8004310 <memmove+0x28>
 80042fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004302:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004306:	e7f8      	b.n	80042fa <memmove+0x12>
 8004308:	4601      	mov	r1, r0
 800430a:	4402      	add	r2, r0
 800430c:	428a      	cmp	r2, r1
 800430e:	d100      	bne.n	8004312 <memmove+0x2a>
 8004310:	bd10      	pop	{r4, pc}
 8004312:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004316:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800431a:	e7f7      	b.n	800430c <memmove+0x24>

0800431c <_free_r>:
 800431c:	b538      	push	{r3, r4, r5, lr}
 800431e:	4605      	mov	r5, r0
 8004320:	2900      	cmp	r1, #0
 8004322:	d043      	beq.n	80043ac <_free_r+0x90>
 8004324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004328:	1f0c      	subs	r4, r1, #4
 800432a:	2b00      	cmp	r3, #0
 800432c:	bfb8      	it	lt
 800432e:	18e4      	addlt	r4, r4, r3
 8004330:	f000 f8d0 	bl	80044d4 <__malloc_lock>
 8004334:	4a1e      	ldr	r2, [pc, #120]	; (80043b0 <_free_r+0x94>)
 8004336:	6813      	ldr	r3, [r2, #0]
 8004338:	4610      	mov	r0, r2
 800433a:	b933      	cbnz	r3, 800434a <_free_r+0x2e>
 800433c:	6063      	str	r3, [r4, #4]
 800433e:	6014      	str	r4, [r2, #0]
 8004340:	4628      	mov	r0, r5
 8004342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004346:	f000 b8cb 	b.w	80044e0 <__malloc_unlock>
 800434a:	42a3      	cmp	r3, r4
 800434c:	d90a      	bls.n	8004364 <_free_r+0x48>
 800434e:	6821      	ldr	r1, [r4, #0]
 8004350:	1862      	adds	r2, r4, r1
 8004352:	4293      	cmp	r3, r2
 8004354:	bf01      	itttt	eq
 8004356:	681a      	ldreq	r2, [r3, #0]
 8004358:	685b      	ldreq	r3, [r3, #4]
 800435a:	1852      	addeq	r2, r2, r1
 800435c:	6022      	streq	r2, [r4, #0]
 800435e:	6063      	str	r3, [r4, #4]
 8004360:	6004      	str	r4, [r0, #0]
 8004362:	e7ed      	b.n	8004340 <_free_r+0x24>
 8004364:	461a      	mov	r2, r3
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	b10b      	cbz	r3, 800436e <_free_r+0x52>
 800436a:	42a3      	cmp	r3, r4
 800436c:	d9fa      	bls.n	8004364 <_free_r+0x48>
 800436e:	6811      	ldr	r1, [r2, #0]
 8004370:	1850      	adds	r0, r2, r1
 8004372:	42a0      	cmp	r0, r4
 8004374:	d10b      	bne.n	800438e <_free_r+0x72>
 8004376:	6820      	ldr	r0, [r4, #0]
 8004378:	4401      	add	r1, r0
 800437a:	1850      	adds	r0, r2, r1
 800437c:	4283      	cmp	r3, r0
 800437e:	6011      	str	r1, [r2, #0]
 8004380:	d1de      	bne.n	8004340 <_free_r+0x24>
 8004382:	6818      	ldr	r0, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	4401      	add	r1, r0
 8004388:	6011      	str	r1, [r2, #0]
 800438a:	6053      	str	r3, [r2, #4]
 800438c:	e7d8      	b.n	8004340 <_free_r+0x24>
 800438e:	d902      	bls.n	8004396 <_free_r+0x7a>
 8004390:	230c      	movs	r3, #12
 8004392:	602b      	str	r3, [r5, #0]
 8004394:	e7d4      	b.n	8004340 <_free_r+0x24>
 8004396:	6820      	ldr	r0, [r4, #0]
 8004398:	1821      	adds	r1, r4, r0
 800439a:	428b      	cmp	r3, r1
 800439c:	bf01      	itttt	eq
 800439e:	6819      	ldreq	r1, [r3, #0]
 80043a0:	685b      	ldreq	r3, [r3, #4]
 80043a2:	1809      	addeq	r1, r1, r0
 80043a4:	6021      	streq	r1, [r4, #0]
 80043a6:	6063      	str	r3, [r4, #4]
 80043a8:	6054      	str	r4, [r2, #4]
 80043aa:	e7c9      	b.n	8004340 <_free_r+0x24>
 80043ac:	bd38      	pop	{r3, r4, r5, pc}
 80043ae:	bf00      	nop
 80043b0:	20000094 	.word	0x20000094

080043b4 <_malloc_r>:
 80043b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b6:	1ccd      	adds	r5, r1, #3
 80043b8:	f025 0503 	bic.w	r5, r5, #3
 80043bc:	3508      	adds	r5, #8
 80043be:	2d0c      	cmp	r5, #12
 80043c0:	bf38      	it	cc
 80043c2:	250c      	movcc	r5, #12
 80043c4:	2d00      	cmp	r5, #0
 80043c6:	4606      	mov	r6, r0
 80043c8:	db01      	blt.n	80043ce <_malloc_r+0x1a>
 80043ca:	42a9      	cmp	r1, r5
 80043cc:	d903      	bls.n	80043d6 <_malloc_r+0x22>
 80043ce:	230c      	movs	r3, #12
 80043d0:	6033      	str	r3, [r6, #0]
 80043d2:	2000      	movs	r0, #0
 80043d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043d6:	f000 f87d 	bl	80044d4 <__malloc_lock>
 80043da:	4921      	ldr	r1, [pc, #132]	; (8004460 <_malloc_r+0xac>)
 80043dc:	680a      	ldr	r2, [r1, #0]
 80043de:	4614      	mov	r4, r2
 80043e0:	b99c      	cbnz	r4, 800440a <_malloc_r+0x56>
 80043e2:	4f20      	ldr	r7, [pc, #128]	; (8004464 <_malloc_r+0xb0>)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	b923      	cbnz	r3, 80043f2 <_malloc_r+0x3e>
 80043e8:	4621      	mov	r1, r4
 80043ea:	4630      	mov	r0, r6
 80043ec:	f000 f862 	bl	80044b4 <_sbrk_r>
 80043f0:	6038      	str	r0, [r7, #0]
 80043f2:	4629      	mov	r1, r5
 80043f4:	4630      	mov	r0, r6
 80043f6:	f000 f85d 	bl	80044b4 <_sbrk_r>
 80043fa:	1c43      	adds	r3, r0, #1
 80043fc:	d123      	bne.n	8004446 <_malloc_r+0x92>
 80043fe:	230c      	movs	r3, #12
 8004400:	4630      	mov	r0, r6
 8004402:	6033      	str	r3, [r6, #0]
 8004404:	f000 f86c 	bl	80044e0 <__malloc_unlock>
 8004408:	e7e3      	b.n	80043d2 <_malloc_r+0x1e>
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	1b5b      	subs	r3, r3, r5
 800440e:	d417      	bmi.n	8004440 <_malloc_r+0x8c>
 8004410:	2b0b      	cmp	r3, #11
 8004412:	d903      	bls.n	800441c <_malloc_r+0x68>
 8004414:	6023      	str	r3, [r4, #0]
 8004416:	441c      	add	r4, r3
 8004418:	6025      	str	r5, [r4, #0]
 800441a:	e004      	b.n	8004426 <_malloc_r+0x72>
 800441c:	6863      	ldr	r3, [r4, #4]
 800441e:	42a2      	cmp	r2, r4
 8004420:	bf0c      	ite	eq
 8004422:	600b      	streq	r3, [r1, #0]
 8004424:	6053      	strne	r3, [r2, #4]
 8004426:	4630      	mov	r0, r6
 8004428:	f000 f85a 	bl	80044e0 <__malloc_unlock>
 800442c:	f104 000b 	add.w	r0, r4, #11
 8004430:	1d23      	adds	r3, r4, #4
 8004432:	f020 0007 	bic.w	r0, r0, #7
 8004436:	1ac2      	subs	r2, r0, r3
 8004438:	d0cc      	beq.n	80043d4 <_malloc_r+0x20>
 800443a:	1a1b      	subs	r3, r3, r0
 800443c:	50a3      	str	r3, [r4, r2]
 800443e:	e7c9      	b.n	80043d4 <_malloc_r+0x20>
 8004440:	4622      	mov	r2, r4
 8004442:	6864      	ldr	r4, [r4, #4]
 8004444:	e7cc      	b.n	80043e0 <_malloc_r+0x2c>
 8004446:	1cc4      	adds	r4, r0, #3
 8004448:	f024 0403 	bic.w	r4, r4, #3
 800444c:	42a0      	cmp	r0, r4
 800444e:	d0e3      	beq.n	8004418 <_malloc_r+0x64>
 8004450:	1a21      	subs	r1, r4, r0
 8004452:	4630      	mov	r0, r6
 8004454:	f000 f82e 	bl	80044b4 <_sbrk_r>
 8004458:	3001      	adds	r0, #1
 800445a:	d1dd      	bne.n	8004418 <_malloc_r+0x64>
 800445c:	e7cf      	b.n	80043fe <_malloc_r+0x4a>
 800445e:	bf00      	nop
 8004460:	20000094 	.word	0x20000094
 8004464:	20000098 	.word	0x20000098

08004468 <_realloc_r>:
 8004468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446a:	4607      	mov	r7, r0
 800446c:	4614      	mov	r4, r2
 800446e:	460e      	mov	r6, r1
 8004470:	b921      	cbnz	r1, 800447c <_realloc_r+0x14>
 8004472:	4611      	mov	r1, r2
 8004474:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004478:	f7ff bf9c 	b.w	80043b4 <_malloc_r>
 800447c:	b922      	cbnz	r2, 8004488 <_realloc_r+0x20>
 800447e:	f7ff ff4d 	bl	800431c <_free_r>
 8004482:	4625      	mov	r5, r4
 8004484:	4628      	mov	r0, r5
 8004486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004488:	f000 f830 	bl	80044ec <_malloc_usable_size_r>
 800448c:	42a0      	cmp	r0, r4
 800448e:	d20f      	bcs.n	80044b0 <_realloc_r+0x48>
 8004490:	4621      	mov	r1, r4
 8004492:	4638      	mov	r0, r7
 8004494:	f7ff ff8e 	bl	80043b4 <_malloc_r>
 8004498:	4605      	mov	r5, r0
 800449a:	2800      	cmp	r0, #0
 800449c:	d0f2      	beq.n	8004484 <_realloc_r+0x1c>
 800449e:	4631      	mov	r1, r6
 80044a0:	4622      	mov	r2, r4
 80044a2:	f7ff ff13 	bl	80042cc <memcpy>
 80044a6:	4631      	mov	r1, r6
 80044a8:	4638      	mov	r0, r7
 80044aa:	f7ff ff37 	bl	800431c <_free_r>
 80044ae:	e7e9      	b.n	8004484 <_realloc_r+0x1c>
 80044b0:	4635      	mov	r5, r6
 80044b2:	e7e7      	b.n	8004484 <_realloc_r+0x1c>

080044b4 <_sbrk_r>:
 80044b4:	b538      	push	{r3, r4, r5, lr}
 80044b6:	2300      	movs	r3, #0
 80044b8:	4d05      	ldr	r5, [pc, #20]	; (80044d0 <_sbrk_r+0x1c>)
 80044ba:	4604      	mov	r4, r0
 80044bc:	4608      	mov	r0, r1
 80044be:	602b      	str	r3, [r5, #0]
 80044c0:	f7fc fefa 	bl	80012b8 <_sbrk>
 80044c4:	1c43      	adds	r3, r0, #1
 80044c6:	d102      	bne.n	80044ce <_sbrk_r+0x1a>
 80044c8:	682b      	ldr	r3, [r5, #0]
 80044ca:	b103      	cbz	r3, 80044ce <_sbrk_r+0x1a>
 80044cc:	6023      	str	r3, [r4, #0]
 80044ce:	bd38      	pop	{r3, r4, r5, pc}
 80044d0:	200002d8 	.word	0x200002d8

080044d4 <__malloc_lock>:
 80044d4:	4801      	ldr	r0, [pc, #4]	; (80044dc <__malloc_lock+0x8>)
 80044d6:	f000 b811 	b.w	80044fc <__retarget_lock_acquire_recursive>
 80044da:	bf00      	nop
 80044dc:	200002e0 	.word	0x200002e0

080044e0 <__malloc_unlock>:
 80044e0:	4801      	ldr	r0, [pc, #4]	; (80044e8 <__malloc_unlock+0x8>)
 80044e2:	f000 b80c 	b.w	80044fe <__retarget_lock_release_recursive>
 80044e6:	bf00      	nop
 80044e8:	200002e0 	.word	0x200002e0

080044ec <_malloc_usable_size_r>:
 80044ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044f0:	1f18      	subs	r0, r3, #4
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	bfbc      	itt	lt
 80044f6:	580b      	ldrlt	r3, [r1, r0]
 80044f8:	18c0      	addlt	r0, r0, r3
 80044fa:	4770      	bx	lr

080044fc <__retarget_lock_acquire_recursive>:
 80044fc:	4770      	bx	lr

080044fe <__retarget_lock_release_recursive>:
 80044fe:	4770      	bx	lr

08004500 <_init>:
 8004500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004502:	bf00      	nop
 8004504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004506:	bc08      	pop	{r3}
 8004508:	469e      	mov	lr, r3
 800450a:	4770      	bx	lr

0800450c <_fini>:
 800450c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450e:	bf00      	nop
 8004510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004512:	bc08      	pop	{r3}
 8004514:	469e      	mov	lr, r3
 8004516:	4770      	bx	lr
